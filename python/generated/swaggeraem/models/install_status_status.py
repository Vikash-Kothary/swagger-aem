# coding: utf-8

"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

    OpenAPI spec version: 2.2.0
    Contact: opensource@shinesolutions.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InstallStatusStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'finished': 'bool',
        'item_count': 'int'
    }

    attribute_map = {
        'finished': 'finished',
        'item_count': 'itemCount'
    }

    def __init__(self, finished=None, item_count=None):
        """
        InstallStatusStatus - a model defined in Swagger
        """

        self._finished = None
        self._item_count = None
        self.discriminator = None

        if finished is not None:
          self.finished = finished
        if item_count is not None:
          self.item_count = item_count

    @property
    def finished(self):
        """
        Gets the finished of this InstallStatusStatus.

        :return: The finished of this InstallStatusStatus.
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """
        Sets the finished of this InstallStatusStatus.

        :param finished: The finished of this InstallStatusStatus.
        :type: bool
        """

        self._finished = finished

    @property
    def item_count(self):
        """
        Gets the item_count of this InstallStatusStatus.

        :return: The item_count of this InstallStatusStatus.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """
        Sets the item_count of this InstallStatusStatus.

        :param item_count: The item_count of this InstallStatusStatus.
        :type: int
        """

        self._item_count = item_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InstallStatusStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
