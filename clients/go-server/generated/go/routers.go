/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"//",
		Index,
	},

	{
		"GetAemProductInfo",
		strings.ToUpper("Get"),
		"//system/console/status-productinfo.json",
		GetAemProductInfo,
	},

	{
		"GetConfigMgr",
		strings.ToUpper("Get"),
		"//system/console/configMgr",
		GetConfigMgr,
	},

	{
		"PostBundle",
		strings.ToUpper("Post"),
		"//system/console/bundles/{name}",
		PostBundle,
	},

	{
		"PostJmxRepository",
		strings.ToUpper("Post"),
		"//system/console/jmx/com.adobe.granite:type=Repository/op/{action}",
		PostJmxRepository,
	},

	{
		"PostSamlConfiguration",
		strings.ToUpper("Post"),
		"//system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler",
		PostSamlConfiguration,
	},

	{
		"GetLoginPage",
		strings.ToUpper("Get"),
		"//libs/granite/core/content/login.html",
		GetLoginPage,
	},

	{
		"PostCqActions",
		strings.ToUpper("Post"),
		"//.cqactions.html",
		PostCqActions,
	},

	{
		"GetCrxdeStatus",
		strings.ToUpper("Get"),
		"//crx/server/crx.default/jcr:root/.1.json",
		GetCrxdeStatus,
	},

	{
		"GetInstallStatus",
		strings.ToUpper("Get"),
		"//crx/packmgr/installstatus.jsp",
		GetInstallStatus,
	},

	{
		"GetPackageManagerServlet",
		strings.ToUpper("Get"),
		"//crx/packmgr/service/script.html",
		GetPackageManagerServlet,
	},

	{
		"PostPackageService",
		strings.ToUpper("Post"),
		"//crx/packmgr/service.jsp",
		PostPackageService,
	},

	{
		"PostPackageServiceJson",
		strings.ToUpper("Post"),
		"//crx/packmgr/service/.json/{path}",
		PostPackageServiceJson,
	},

	{
		"PostPackageUpdate",
		strings.ToUpper("Post"),
		"//crx/packmgr/update.jsp",
		PostPackageUpdate,
	},

	{
		"PostSetPassword",
		strings.ToUpper("Post"),
		"//crx/explorer/ui/setpassword.jsp",
		PostSetPassword,
	},

	{
		"GetAemHealthCheck",
		strings.ToUpper("Get"),
		"//system/health",
		GetAemHealthCheck,
	},

	{
		"PostConfigAemHealthCheckServlet",
		strings.ToUpper("Post"),
		"//apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck",
		PostConfigAemHealthCheckServlet,
	},

	{
		"PostConfigAemPasswordReset",
		strings.ToUpper("Post"),
		"//apps/system/config/com.shinesolutions.aem.passwordreset.Activator",
		PostConfigAemPasswordReset,
	},

	{
		"DeleteAgent",
		strings.ToUpper("Delete"),
		"//etc/replication/agents.{runmode}/{name}",
		DeleteAgent,
	},

	{
		"DeleteNode",
		strings.ToUpper("Delete"),
		"//{path}/{name}",
		DeleteNode,
	},

	{
		"GetAgent",
		strings.ToUpper("Get"),
		"//etc/replication/agents.{runmode}/{name}",
		GetAgent,
	},

	{
		"GetAgents",
		strings.ToUpper("Get"),
		"//etc/replication/agents.{runmode}.-1.json",
		GetAgents,
	},

	{
		"GetAuthorizableKeystore",
		strings.ToUpper("Get"),
		"//{intermediatePath}/{authorizableId}.ks.json",
		GetAuthorizableKeystore,
	},

	{
		"GetKeystore",
		strings.ToUpper("Get"),
		"//{intermediatePath}/{authorizableId}/keystore/store.p12",
		GetKeystore,
	},

	{
		"GetNode",
		strings.ToUpper("Get"),
		"//{path}/{name}",
		GetNode,
	},

	{
		"GetPackage",
		strings.ToUpper("Get"),
		"//etc/packages/{group}/{name}-{version}.zip",
		GetPackage,
	},

	{
		"GetPackageFilter",
		strings.ToUpper("Get"),
		"//etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json",
		GetPackageFilter,
	},

	{
		"GetQuery",
		strings.ToUpper("Get"),
		"//bin/querybuilder.json",
		GetQuery,
	},

	{
		"GetTruststore",
		strings.ToUpper("Get"),
		"//etc/truststore/truststore.p12",
		GetTruststore,
	},

	{
		"GetTruststoreInfo",
		strings.ToUpper("Get"),
		"//libs/granite/security/truststore.json",
		GetTruststoreInfo,
	},

	{
		"PostAgent",
		strings.ToUpper("Post"),
		"//etc/replication/agents.{runmode}/{name}",
		PostAgent,
	},

	{
		"PostAuthorizableKeystore",
		strings.ToUpper("Post"),
		"//{intermediatePath}/{authorizableId}.ks.html",
		PostAuthorizableKeystore,
	},

	{
		"PostAuthorizables",
		strings.ToUpper("Post"),
		"//libs/granite/security/post/authorizables",
		PostAuthorizables,
	},

	{
		"PostConfigAdobeGraniteSamlAuthenticationHandler",
		strings.ToUpper("Post"),
		"//apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config",
		PostConfigAdobeGraniteSamlAuthenticationHandler,
	},

	{
		"PostConfigApacheFelixJettyBasedHttpService",
		strings.ToUpper("Post"),
		"//apps/system/config/org.apache.felix.http",
		PostConfigApacheFelixJettyBasedHttpService,
	},

	{
		"PostConfigApacheHttpComponentsProxyConfiguration",
		strings.ToUpper("Post"),
		"//apps/system/config/org.apache.http.proxyconfigurator.config",
		PostConfigApacheHttpComponentsProxyConfiguration,
	},

	{
		"PostConfigApacheSlingDavExServlet",
		strings.ToUpper("Post"),
		"//apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet",
		PostConfigApacheSlingDavExServlet,
	},

	{
		"PostConfigApacheSlingGetServlet",
		strings.ToUpper("Post"),
		"//apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet",
		PostConfigApacheSlingGetServlet,
	},

	{
		"PostConfigApacheSlingReferrerFilter",
		strings.ToUpper("Post"),
		"//apps/system/config/org.apache.sling.security.impl.ReferrerFilter",
		PostConfigApacheSlingReferrerFilter,
	},

	{
		"PostNode",
		strings.ToUpper("Post"),
		"//{path}/{name}",
		PostNode,
	},

	{
		"PostNodeRw",
		strings.ToUpper("Post"),
		"//{path}/{name}.rw.html",
		PostNodeRw,
	},

	{
		"PostPath",
		strings.ToUpper("Post"),
		"//{path}/",
		PostPath,
	},

	{
		"PostQuery",
		strings.ToUpper("Post"),
		"//bin/querybuilder.json",
		PostQuery,
	},

	{
		"PostTreeActivation",
		strings.ToUpper("Post"),
		"//etc/replication/treeactivation.html",
		PostTreeActivation,
	},

	{
		"PostTruststore",
		strings.ToUpper("Post"),
		"//libs/granite/security/post/truststore",
		PostTruststore,
	},

	{
		"PostTruststorePKCS12",
		strings.ToUpper("Post"),
		"//etc/truststore",
		PostTruststorePKCS12,
	},
}
