# coding: utf-8

"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API  # noqa: E501

    OpenAPI spec version: 3.2.0-pre.0
    Contact: opensource@shinesolutions.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swaggeraem.api_client import ApiClient


class CustomApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_aem_health_check(self, **kwargs):  # noqa: E501
        """get_aem_health_check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aem_health_check(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tags:
        :param bool combine_tags_or:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aem_health_check_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aem_health_check_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aem_health_check_with_http_info(self, **kwargs):  # noqa: E501
        """get_aem_health_check  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aem_health_check_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tags:
        :param bool combine_tags_or:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tags', 'combine_tags_or']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aem_health_check" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tags' in local_var_params:
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if 'combine_tags_or' in local_var_params:
            query_params.append(('combineTagsOr', local_var_params['combine_tags_or']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/system/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_config_aem_health_check_servlet(self, **kwargs):  # noqa: E501
        """post_config_aem_health_check_servlet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_config_aem_health_check_servlet(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] bundles_ignored:
        :param str bundles_ignored_type_hint:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_config_aem_health_check_servlet_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_config_aem_health_check_servlet_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_config_aem_health_check_servlet_with_http_info(self, **kwargs):  # noqa: E501
        """post_config_aem_health_check_servlet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_config_aem_health_check_servlet_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] bundles_ignored:
        :param str bundles_ignored_type_hint:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bundles_ignored', 'bundles_ignored_type_hint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_config_aem_health_check_servlet" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundles_ignored' in local_var_params:
            query_params.append(('bundles.ignored', local_var_params['bundles_ignored']))  # noqa: E501
            collection_formats['bundles.ignored'] = 'multi'  # noqa: E501
        if 'bundles_ignored_type_hint' in local_var_params:
            query_params.append(('bundles.ignored@TypeHint', local_var_params['bundles_ignored_type_hint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_config_aem_password_reset(self, **kwargs):  # noqa: E501
        """post_config_aem_password_reset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_config_aem_password_reset(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] pwdreset_authorizables:
        :param str pwdreset_authorizables_type_hint:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_config_aem_password_reset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_config_aem_password_reset_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_config_aem_password_reset_with_http_info(self, **kwargs):  # noqa: E501
        """post_config_aem_password_reset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_config_aem_password_reset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] pwdreset_authorizables:
        :param str pwdreset_authorizables_type_hint:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pwdreset_authorizables', 'pwdreset_authorizables_type_hint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_config_aem_password_reset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pwdreset_authorizables' in local_var_params:
            query_params.append(('pwdreset.authorizables', local_var_params['pwdreset_authorizables']))  # noqa: E501
            collection_formats['pwdreset.authorizables'] = 'multi'  # noqa: E501
        if 'pwdreset_authorizables_type_hint' in local_var_params:
            query_params.append(('pwdreset.authorizables@TypeHint', local_var_params['pwdreset_authorizables_type_hint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['aemAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/system/config/com.shinesolutions.aem.passwordreset.Activator', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
