# coding: utf-8

"""
    Adobe Experience Manager (AEM) API

    Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

    OpenAPI spec version: 2.2.0
    Contact: opensource@shinesolutions.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SamlConfigurationPropertyItemsBoolean(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'optional': 'bool',
        'is_set': 'bool',
        'type': 'int',
        'values': 'bool',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'optional': 'optional',
        'is_set': 'is_set',
        'type': 'type',
        'values': 'values',
        'description': 'description'
    }

    def __init__(self, name=None, optional=None, is_set=None, type=None, values=None, description=None):
        """
        SamlConfigurationPropertyItemsBoolean - a model defined in Swagger
        """

        self._name = None
        self._optional = None
        self._is_set = None
        self._type = None
        self._values = None
        self._description = None
        self.discriminator = None

        if name is not None:
          self.name = name
        if optional is not None:
          self.optional = optional
        if is_set is not None:
          self.is_set = is_set
        if type is not None:
          self.type = type
        if values is not None:
          self.values = values
        if description is not None:
          self.description = description

    @property
    def name(self):
        """
        Gets the name of this SamlConfigurationPropertyItemsBoolean.
        property name

        :return: The name of this SamlConfigurationPropertyItemsBoolean.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SamlConfigurationPropertyItemsBoolean.
        property name

        :param name: The name of this SamlConfigurationPropertyItemsBoolean.
        :type: str
        """

        self._name = name

    @property
    def optional(self):
        """
        Gets the optional of this SamlConfigurationPropertyItemsBoolean.
        True if optional

        :return: The optional of this SamlConfigurationPropertyItemsBoolean.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """
        Sets the optional of this SamlConfigurationPropertyItemsBoolean.
        True if optional

        :param optional: The optional of this SamlConfigurationPropertyItemsBoolean.
        :type: bool
        """

        self._optional = optional

    @property
    def is_set(self):
        """
        Gets the is_set of this SamlConfigurationPropertyItemsBoolean.
        True if property is set

        :return: The is_set of this SamlConfigurationPropertyItemsBoolean.
        :rtype: bool
        """
        return self._is_set

    @is_set.setter
    def is_set(self, is_set):
        """
        Sets the is_set of this SamlConfigurationPropertyItemsBoolean.
        True if property is set

        :param is_set: The is_set of this SamlConfigurationPropertyItemsBoolean.
        :type: bool
        """

        self._is_set = is_set

    @property
    def type(self):
        """
        Gets the type of this SamlConfigurationPropertyItemsBoolean.
        Property type, 1=String, 3=long, 11=boolean, 12=Password

        :return: The type of this SamlConfigurationPropertyItemsBoolean.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SamlConfigurationPropertyItemsBoolean.
        Property type, 1=String, 3=long, 11=boolean, 12=Password

        :param type: The type of this SamlConfigurationPropertyItemsBoolean.
        :type: int
        """

        self._type = type

    @property
    def values(self):
        """
        Gets the values of this SamlConfigurationPropertyItemsBoolean.
        Property value

        :return: The values of this SamlConfigurationPropertyItemsBoolean.
        :rtype: bool
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this SamlConfigurationPropertyItemsBoolean.
        Property value

        :param values: The values of this SamlConfigurationPropertyItemsBoolean.
        :type: bool
        """

        self._values = values

    @property
    def description(self):
        """
        Gets the description of this SamlConfigurationPropertyItemsBoolean.
        Property description

        :return: The description of this SamlConfigurationPropertyItemsBoolean.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SamlConfigurationPropertyItemsBoolean.
        Property description

        :param description: The description of this SamlConfigurationPropertyItemsBoolean.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SamlConfigurationPropertyItemsBoolean):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
