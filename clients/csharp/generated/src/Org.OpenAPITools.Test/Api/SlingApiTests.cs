/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SlingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SlingApiTests
    {
        private SlingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SlingApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SlingApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SlingApi
            //Assert.IsInstanceOfType(typeof(SlingApi), instance, "instance is a SlingApi");
        }

        
        /// <summary>
        /// Test DeleteAgent
        /// </summary>
        [Test]
        public void DeleteAgentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string runmode = null;
            //string name = null;
            //instance.DeleteAgent(runmode, name);
            
        }
        
        /// <summary>
        /// Test DeleteNode
        /// </summary>
        [Test]
        public void DeleteNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string name = null;
            //instance.DeleteNode(path, name);
            
        }
        
        /// <summary>
        /// Test GetAgent
        /// </summary>
        [Test]
        public void GetAgentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string runmode = null;
            //string name = null;
            //instance.GetAgent(runmode, name);
            
        }
        
        /// <summary>
        /// Test GetAgents
        /// </summary>
        [Test]
        public void GetAgentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string runmode = null;
            //var response = instance.GetAgents(runmode);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetAuthorizableKeystore
        /// </summary>
        [Test]
        public void GetAuthorizableKeystoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string intermediatePath = null;
            //string authorizableId = null;
            //var response = instance.GetAuthorizableKeystore(intermediatePath, authorizableId);
            //Assert.IsInstanceOf<KeystoreInfo> (response, "response is KeystoreInfo");
        }
        
        /// <summary>
        /// Test GetKeystore
        /// </summary>
        [Test]
        public void GetKeystoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string intermediatePath = null;
            //string authorizableId = null;
            //var response = instance.GetKeystore(intermediatePath, authorizableId);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetNode
        /// </summary>
        [Test]
        public void GetNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string name = null;
            //instance.GetNode(path, name);
            
        }
        
        /// <summary>
        /// Test GetPackage
        /// </summary>
        [Test]
        public void GetPackageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string group = null;
            //string name = null;
            //string version = null;
            //var response = instance.GetPackage(group, name, version);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetPackageFilter
        /// </summary>
        [Test]
        public void GetPackageFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string group = null;
            //string name = null;
            //string version = null;
            //var response = instance.GetPackageFilter(group, name, version);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetQuery
        /// </summary>
        [Test]
        public void GetQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //decimal? pLimit = null;
            //string _1property = null;
            //string _1propertyValue = null;
            //var response = instance.GetQuery(path, pLimit, _1property, _1propertyValue);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetTruststore
        /// </summary>
        [Test]
        public void GetTruststoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTruststore();
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetTruststoreInfo
        /// </summary>
        [Test]
        public void GetTruststoreInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTruststoreInfo();
            //Assert.IsInstanceOf<TruststoreInfo> (response, "response is TruststoreInfo");
        }
        
        /// <summary>
        /// Test PostAgent
        /// </summary>
        [Test]
        public void PostAgentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string runmode = null;
            //string name = null;
            //bool? jcrcontentcqdistribute = null;
            //string jcrcontentcqdistributeTypeHint = null;
            //string jcrcontentcqname = null;
            //string jcrcontentcqtemplate = null;
            //bool? jcrcontentenabled = null;
            //string jcrcontentjcrdescription = null;
            //string jcrcontentjcrlastModified = null;
            //string jcrcontentjcrlastModifiedBy = null;
            //string jcrcontentjcrmixinTypes = null;
            //string jcrcontentjcrtitle = null;
            //string jcrcontentlogLevel = null;
            //bool? jcrcontentnoStatusUpdate = null;
            //bool? jcrcontentnoVersioning = null;
            //decimal? jcrcontentprotocolConnectTimeout = null;
            //bool? jcrcontentprotocolHTTPConnectionClosed = null;
            //string jcrcontentprotocolHTTPExpired = null;
            //List<string> jcrcontentprotocolHTTPHeaders = null;
            //string jcrcontentprotocolHTTPHeadersTypeHint = null;
            //string jcrcontentprotocolHTTPMethod = null;
            //bool? jcrcontentprotocolHTTPSRelaxed = null;
            //string jcrcontentprotocolInterface = null;
            //decimal? jcrcontentprotocolSocketTimeout = null;
            //string jcrcontentprotocolVersion = null;
            //string jcrcontentproxyNTLMDomain = null;
            //string jcrcontentproxyNTLMHost = null;
            //string jcrcontentproxyHost = null;
            //string jcrcontentproxyPassword = null;
            //decimal? jcrcontentproxyPort = null;
            //string jcrcontentproxyUser = null;
            //decimal? jcrcontentqueueBatchMaxSize = null;
            //string jcrcontentqueueBatchMode = null;
            //decimal? jcrcontentqueueBatchWaitTime = null;
            //string jcrcontentretryDelay = null;
            //bool? jcrcontentreverseReplication = null;
            //string jcrcontentserializationType = null;
            //string jcrcontentslingresourceType = null;
            //string jcrcontentssl = null;
            //string jcrcontenttransportNTLMDomain = null;
            //string jcrcontenttransportNTLMHost = null;
            //string jcrcontenttransportPassword = null;
            //string jcrcontenttransportUri = null;
            //string jcrcontenttransportUser = null;
            //bool? jcrcontenttriggerDistribute = null;
            //bool? jcrcontenttriggerModified = null;
            //bool? jcrcontenttriggerOnOffTime = null;
            //bool? jcrcontenttriggerReceive = null;
            //bool? jcrcontenttriggerSpecific = null;
            //string jcrcontentuserId = null;
            //string jcrprimaryType = null;
            //string operation = null;
            //instance.PostAgent(runmode, name, jcrcontentcqdistribute, jcrcontentcqdistributeTypeHint, jcrcontentcqname, jcrcontentcqtemplate, jcrcontentenabled, jcrcontentjcrdescription, jcrcontentjcrlastModified, jcrcontentjcrlastModifiedBy, jcrcontentjcrmixinTypes, jcrcontentjcrtitle, jcrcontentlogLevel, jcrcontentnoStatusUpdate, jcrcontentnoVersioning, jcrcontentprotocolConnectTimeout, jcrcontentprotocolHTTPConnectionClosed, jcrcontentprotocolHTTPExpired, jcrcontentprotocolHTTPHeaders, jcrcontentprotocolHTTPHeadersTypeHint, jcrcontentprotocolHTTPMethod, jcrcontentprotocolHTTPSRelaxed, jcrcontentprotocolInterface, jcrcontentprotocolSocketTimeout, jcrcontentprotocolVersion, jcrcontentproxyNTLMDomain, jcrcontentproxyNTLMHost, jcrcontentproxyHost, jcrcontentproxyPassword, jcrcontentproxyPort, jcrcontentproxyUser, jcrcontentqueueBatchMaxSize, jcrcontentqueueBatchMode, jcrcontentqueueBatchWaitTime, jcrcontentretryDelay, jcrcontentreverseReplication, jcrcontentserializationType, jcrcontentslingresourceType, jcrcontentssl, jcrcontenttransportNTLMDomain, jcrcontenttransportNTLMHost, jcrcontenttransportPassword, jcrcontenttransportUri, jcrcontenttransportUser, jcrcontenttriggerDistribute, jcrcontenttriggerModified, jcrcontenttriggerOnOffTime, jcrcontenttriggerReceive, jcrcontenttriggerSpecific, jcrcontentuserId, jcrprimaryType, operation);
            
        }
        
        /// <summary>
        /// Test PostAuthorizableKeystore
        /// </summary>
        [Test]
        public void PostAuthorizableKeystoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string intermediatePath = null;
            //string authorizableId = null;
            //string operation = null;
            //string currentPassword = null;
            //string newPassword = null;
            //string rePassword = null;
            //string keyPassword = null;
            //string keyStorePass = null;
            //string alias = null;
            //string newAlias = null;
            //string removeAlias = null;
            //System.IO.Stream certChain = null;
            //System.IO.Stream pk = null;
            //System.IO.Stream keyStore = null;
            //var response = instance.PostAuthorizableKeystore(intermediatePath, authorizableId, operation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore);
            //Assert.IsInstanceOf<KeystoreInfo> (response, "response is KeystoreInfo");
        }
        
        /// <summary>
        /// Test PostAuthorizables
        /// </summary>
        [Test]
        public void PostAuthorizablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorizableId = null;
            //string intermediatePath = null;
            //string createUser = null;
            //string createGroup = null;
            //string reppassword = null;
            //string profilegivenName = null;
            //var response = instance.PostAuthorizables(authorizableId, intermediatePath, createUser, createGroup, reppassword, profilegivenName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostConfigAdobeGraniteSamlAuthenticationHandler
        /// </summary>
        [Test]
        public void PostConfigAdobeGraniteSamlAuthenticationHandlerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string keyStorePassword = null;
            //string keyStorePasswordTypeHint = null;
            //int? serviceRanking = null;
            //string serviceRankingTypeHint = null;
            //bool? idpHttpRedirect = null;
            //string idpHttpRedirectTypeHint = null;
            //bool? createUser = null;
            //string createUserTypeHint = null;
            //string defaultRedirectUrl = null;
            //string defaultRedirectUrlTypeHint = null;
            //string userIDAttribute = null;
            //string userIDAttributeTypeHint = null;
            //List<string> defaultGroups = null;
            //string defaultGroupsTypeHint = null;
            //string idpCertAlias = null;
            //string idpCertAliasTypeHint = null;
            //bool? addGroupMemberships = null;
            //string addGroupMembershipsTypeHint = null;
            //List<string> path = null;
            //string pathTypeHint = null;
            //List<string> synchronizeAttributes = null;
            //string synchronizeAttributesTypeHint = null;
            //int? clockTolerance = null;
            //string clockToleranceTypeHint = null;
            //string groupMembershipAttribute = null;
            //string groupMembershipAttributeTypeHint = null;
            //string idpUrl = null;
            //string idpUrlTypeHint = null;
            //string logoutUrl = null;
            //string logoutUrlTypeHint = null;
            //string serviceProviderEntityId = null;
            //string serviceProviderEntityIdTypeHint = null;
            //string assertionConsumerServiceURL = null;
            //string assertionConsumerServiceURLTypeHint = null;
            //bool? handleLogout = null;
            //string handleLogoutTypeHint = null;
            //string spPrivateKeyAlias = null;
            //string spPrivateKeyAliasTypeHint = null;
            //bool? useEncryption = null;
            //string useEncryptionTypeHint = null;
            //string nameIdFormat = null;
            //string nameIdFormatTypeHint = null;
            //string digestMethod = null;
            //string digestMethodTypeHint = null;
            //string signatureMethod = null;
            //string signatureMethodTypeHint = null;
            //string userIntermediatePath = null;
            //string userIntermediatePathTypeHint = null;
            //instance.PostConfigAdobeGraniteSamlAuthenticationHandler(keyStorePassword, keyStorePasswordTypeHint, serviceRanking, serviceRankingTypeHint, idpHttpRedirect, idpHttpRedirectTypeHint, createUser, createUserTypeHint, defaultRedirectUrl, defaultRedirectUrlTypeHint, userIDAttribute, userIDAttributeTypeHint, defaultGroups, defaultGroupsTypeHint, idpCertAlias, idpCertAliasTypeHint, addGroupMemberships, addGroupMembershipsTypeHint, path, pathTypeHint, synchronizeAttributes, synchronizeAttributesTypeHint, clockTolerance, clockToleranceTypeHint, groupMembershipAttribute, groupMembershipAttributeTypeHint, idpUrl, idpUrlTypeHint, logoutUrl, logoutUrlTypeHint, serviceProviderEntityId, serviceProviderEntityIdTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLTypeHint, handleLogout, handleLogoutTypeHint, spPrivateKeyAlias, spPrivateKeyAliasTypeHint, useEncryption, useEncryptionTypeHint, nameIdFormat, nameIdFormatTypeHint, digestMethod, digestMethodTypeHint, signatureMethod, signatureMethodTypeHint, userIntermediatePath, userIntermediatePathTypeHint);
            
        }
        
        /// <summary>
        /// Test PostConfigApacheFelixJettyBasedHttpService
        /// </summary>
        [Test]
        public void PostConfigApacheFelixJettyBasedHttpServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? orgApacheFelixHttpsNio = null;
            //string orgApacheFelixHttpsNioTypeHint = null;
            //string orgApacheFelixHttpsKeystore = null;
            //string orgApacheFelixHttpsKeystoreTypeHint = null;
            //string orgApacheFelixHttpsKeystorePassword = null;
            //string orgApacheFelixHttpsKeystorePasswordTypeHint = null;
            //string orgApacheFelixHttpsKeystoreKey = null;
            //string orgApacheFelixHttpsKeystoreKeyTypeHint = null;
            //string orgApacheFelixHttpsKeystoreKeyPassword = null;
            //string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = null;
            //string orgApacheFelixHttpsTruststore = null;
            //string orgApacheFelixHttpsTruststoreTypeHint = null;
            //string orgApacheFelixHttpsTruststorePassword = null;
            //string orgApacheFelixHttpsTruststorePasswordTypeHint = null;
            //string orgApacheFelixHttpsClientcertificate = null;
            //string orgApacheFelixHttpsClientcertificateTypeHint = null;
            //bool? orgApacheFelixHttpsEnable = null;
            //string orgApacheFelixHttpsEnableTypeHint = null;
            //string orgOsgiServiceHttpPortSecure = null;
            //string orgOsgiServiceHttpPortSecureTypeHint = null;
            //instance.PostConfigApacheFelixJettyBasedHttpService(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint);
            
        }
        
        /// <summary>
        /// Test PostConfigApacheHttpComponentsProxyConfiguration
        /// </summary>
        [Test]
        public void PostConfigApacheHttpComponentsProxyConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string proxyHost = null;
            //string proxyHostTypeHint = null;
            //int? proxyPort = null;
            //string proxyPortTypeHint = null;
            //List<string> proxyExceptions = null;
            //string proxyExceptionsTypeHint = null;
            //bool? proxyEnabled = null;
            //string proxyEnabledTypeHint = null;
            //string proxyUser = null;
            //string proxyUserTypeHint = null;
            //string proxyPassword = null;
            //string proxyPasswordTypeHint = null;
            //instance.PostConfigApacheHttpComponentsProxyConfiguration(proxyHost, proxyHostTypeHint, proxyPort, proxyPortTypeHint, proxyExceptions, proxyExceptionsTypeHint, proxyEnabled, proxyEnabledTypeHint, proxyUser, proxyUserTypeHint, proxyPassword, proxyPasswordTypeHint);
            
        }
        
        /// <summary>
        /// Test PostConfigApacheSlingDavExServlet
        /// </summary>
        [Test]
        public void PostConfigApacheSlingDavExServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string aliasTypeHint = null;
            //bool? davCreateAbsoluteUri = null;
            //string davCreateAbsoluteUriTypeHint = null;
            //instance.PostConfigApacheSlingDavExServlet(alias, aliasTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriTypeHint);
            
        }
        
        /// <summary>
        /// Test PostConfigApacheSlingGetServlet
        /// </summary>
        [Test]
        public void PostConfigApacheSlingGetServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jsonMaximumresults = null;
            //string jsonMaximumresultsTypeHint = null;
            //bool? enableHtml = null;
            //string enableHtmlTypeHint = null;
            //bool? enableTxt = null;
            //string enableTxtTypeHint = null;
            //bool? enableXml = null;
            //string enableXmlTypeHint = null;
            //instance.PostConfigApacheSlingGetServlet(jsonMaximumresults, jsonMaximumresultsTypeHint, enableHtml, enableHtmlTypeHint, enableTxt, enableTxtTypeHint, enableXml, enableXmlTypeHint);
            
        }
        
        /// <summary>
        /// Test PostConfigApacheSlingReferrerFilter
        /// </summary>
        [Test]
        public void PostConfigApacheSlingReferrerFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? allowEmpty = null;
            //string allowEmptyTypeHint = null;
            //string allowHosts = null;
            //string allowHostsTypeHint = null;
            //string allowHostsRegexp = null;
            //string allowHostsRegexpTypeHint = null;
            //string filterMethods = null;
            //string filterMethodsTypeHint = null;
            //instance.PostConfigApacheSlingReferrerFilter(allowEmpty, allowEmptyTypeHint, allowHosts, allowHostsTypeHint, allowHostsRegexp, allowHostsRegexpTypeHint, filterMethods, filterMethodsTypeHint);
            
        }
        
        /// <summary>
        /// Test PostNode
        /// </summary>
        [Test]
        public void PostNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string name = null;
            //string operation = null;
            //string deleteAuthorizable = null;
            //System.IO.Stream file = null;
            //instance.PostNode(path, name, operation, deleteAuthorizable, file);
            
        }
        
        /// <summary>
        /// Test PostNodeRw
        /// </summary>
        [Test]
        public void PostNodeRwTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string name = null;
            //string addMembers = null;
            //instance.PostNodeRw(path, name, addMembers);
            
        }
        
        /// <summary>
        /// Test PostPath
        /// </summary>
        [Test]
        public void PostPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string jcrprimaryType = null;
            //string name = null;
            //instance.PostPath(path, jcrprimaryType, name);
            
        }
        
        /// <summary>
        /// Test PostQuery
        /// </summary>
        [Test]
        public void PostQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //decimal? pLimit = null;
            //string _1property = null;
            //string _1propertyValue = null;
            //var response = instance.PostQuery(path, pLimit, _1property, _1propertyValue);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostTreeActivation
        /// </summary>
        [Test]
        public void PostTreeActivationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ignoredeactivated = null;
            //bool? onlymodified = null;
            //string path = null;
            //instance.PostTreeActivation(ignoredeactivated, onlymodified, path);
            
        }
        
        /// <summary>
        /// Test PostTruststore
        /// </summary>
        [Test]
        public void PostTruststoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string operation = null;
            //string newPassword = null;
            //string rePassword = null;
            //string keyStoreType = null;
            //string removeAlias = null;
            //System.IO.Stream certificate = null;
            //var response = instance.PostTruststore(operation, newPassword, rePassword, keyStoreType, removeAlias, certificate);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostTruststorePKCS12
        /// </summary>
        [Test]
        public void PostTruststorePKCS12Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream truststoreP12 = null;
            //var response = instance.PostTruststorePKCS12(truststoreP12);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
