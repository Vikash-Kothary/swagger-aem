/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CrxApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CrxApiTests
    {
        private CrxApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CrxApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CrxApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CrxApi
            //Assert.IsInstanceOfType(typeof(CrxApi), instance, "instance is a CrxApi");
        }

        
        /// <summary>
        /// Test GetCrxdeStatus
        /// </summary>
        [Test]
        public void GetCrxdeStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCrxdeStatus();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetInstallStatus
        /// </summary>
        [Test]
        public void GetInstallStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetInstallStatus();
            //Assert.IsInstanceOf<InstallStatus> (response, "response is InstallStatus");
        }
        
        /// <summary>
        /// Test GetPackageManagerServlet
        /// </summary>
        [Test]
        public void GetPackageManagerServletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetPackageManagerServlet();
            
        }
        
        /// <summary>
        /// Test PostPackageService
        /// </summary>
        [Test]
        public void PostPackageServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cmd = null;
            //var response = instance.PostPackageService(cmd);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostPackageServiceJson
        /// </summary>
        [Test]
        public void PostPackageServiceJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //string cmd = null;
            //string groupName = null;
            //string packageName = null;
            //string packageVersion = null;
            //string charset = null;
            //bool? force = null;
            //bool? recursive = null;
            //System.IO.Stream package = null;
            //var response = instance.PostPackageServiceJson(path, cmd, groupName, packageName, packageVersion, charset, force, recursive, package);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostPackageUpdate
        /// </summary>
        [Test]
        public void PostPackageUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupName = null;
            //string packageName = null;
            //string version = null;
            //string path = null;
            //string filter = null;
            //string charset = null;
            //var response = instance.PostPackageUpdate(groupName, packageName, version, path, filter, charset);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test PostSetPassword
        /// </summary>
        [Test]
        public void PostSetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string old = null;
            //string plain = null;
            //string verify = null;
            //var response = instance.PostSetPassword(old, plain, verify);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
