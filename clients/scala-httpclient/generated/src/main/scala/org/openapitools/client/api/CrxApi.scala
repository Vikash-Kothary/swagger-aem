/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import java.io.File
import org.openapitools.client.model.InstallStatus
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class CrxApi(
  val defBasePath: String = "http://localhost",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new CrxApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @return String
   */
  def getCrxdeStatus(): Option[String] = {
    val await = Try(Await.result(getCrxdeStatusAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @return Future(String)
   */
  def getCrxdeStatusAsync(): Future[String] = {
      helper.getCrxdeStatus()
  }

  /**
   * 
   * 
   *
   * @return InstallStatus
   */
  def getInstallStatus(): Option[InstallStatus] = {
    val await = Try(Await.result(getInstallStatusAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @return Future(InstallStatus)
   */
  def getInstallStatusAsync(): Future[InstallStatus] = {
      helper.getInstallStatus()
  }

  /**
   * 
   * 
   *
   * @return void
   */
  def getPackageManagerServlet() = {
    val await = Try(Await.result(getPackageManagerServletAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @return Future(void)
   */
  def getPackageManagerServletAsync() = {
      helper.getPackageManagerServlet()
  }

  /**
   * 
   * 
   *
   * @param cmd  
   * @return String
   */
  def postPackageService(cmd: String): Option[String] = {
    val await = Try(Await.result(postPackageServiceAsync(cmd), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param cmd  
   * @return Future(String)
   */
  def postPackageServiceAsync(cmd: String): Future[String] = {
      helper.postPackageService(cmd)
  }

  /**
   * 
   * 
   *
   * @param `path`  
   * @param cmd  
   * @param groupName  (optional)
   * @param packageName  (optional)
   * @param packageVersion  (optional)
   * @param charset  (optional)
   * @param force  (optional)
   * @param recursive  (optional)
   * @param `package`  (optional)
   * @return String
   */
  def postPackageServiceJson(`path`: String, cmd: String, groupName: Option[String] = None, packageName: Option[String] = None, packageVersion: Option[String] = None, charset: Option[String] = None, force: Option[Boolean] = None, recursive: Option[Boolean] = None, `package`: Option[File] = None): Option[String] = {
    val await = Try(Await.result(postPackageServiceJsonAsync(`path`, cmd, groupName, packageName, packageVersion, charset, force, recursive, `package`), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param `path`  
   * @param cmd  
   * @param groupName  (optional)
   * @param packageName  (optional)
   * @param packageVersion  (optional)
   * @param charset  (optional)
   * @param force  (optional)
   * @param recursive  (optional)
   * @param `package`  (optional)
   * @return Future(String)
   */
  def postPackageServiceJsonAsync(`path`: String, cmd: String, groupName: Option[String] = None, packageName: Option[String] = None, packageVersion: Option[String] = None, charset: Option[String] = None, force: Option[Boolean] = None, recursive: Option[Boolean] = None, `package`: Option[File] = None): Future[String] = {
      helper.postPackageServiceJson(`path`, cmd, groupName, packageName, packageVersion, charset, force, recursive, `package`)
  }

  /**
   * 
   * 
   *
   * @param groupName  
   * @param packageName  
   * @param version  
   * @param `path`  
   * @param filter  (optional)
   * @param charset  (optional)
   * @return String
   */
  def postPackageUpdate(groupName: String, packageName: String, version: String, `path`: String, filter: Option[String] = None, charset: Option[String] = None): Option[String] = {
    val await = Try(Await.result(postPackageUpdateAsync(groupName, packageName, version, `path`, filter, charset), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param groupName  
   * @param packageName  
   * @param version  
   * @param `path`  
   * @param filter  (optional)
   * @param charset  (optional)
   * @return Future(String)
   */
  def postPackageUpdateAsync(groupName: String, packageName: String, version: String, `path`: String, filter: Option[String] = None, charset: Option[String] = None): Future[String] = {
      helper.postPackageUpdate(groupName, packageName, version, `path`, filter, charset)
  }

  /**
   * 
   * 
   *
   * @param old  
   * @param plain  
   * @param verify  
   * @return String
   */
  def postSetPassword(old: String, plain: String, verify: String): Option[String] = {
    val await = Try(Await.result(postSetPasswordAsync(old, plain, verify), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param old  
   * @param plain  
   * @param verify  
   * @return Future(String)
   */
  def postSetPasswordAsync(old: String, plain: String, verify: String): Future[String] = {
      helper.postSetPassword(old, plain, verify)
  }

}

class CrxApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getCrxdeStatus()(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/crx/server/crx.default/jcr:root/.1.json"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getInstallStatus()(implicit reader: ClientResponseReader[InstallStatus]): Future[InstallStatus] = {
    // create path and map variables
    val path = (addFmt("/crx/packmgr/installstatus.jsp"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getPackageManagerServlet()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/crx/packmgr/service/script.html"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postPackageService(cmd: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/crx/packmgr/service.jsp"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (cmd == null) throw new Exception("Missing required parameter 'cmd' when calling CrxApi->postPackageService")

    queryParams += "cmd" -> cmd.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postPackageServiceJson(`path`: String,
    cmd: String,
    groupName: Option[String] = None,
    packageName: Option[String] = None,
    packageVersion: Option[String] = None,
    charset: Option[String] = None,
    force: Option[Boolean] = None,
    recursive: Option[Boolean] = None,
    `package`: Option[File] = None
    )(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/crx/packmgr/service/.json/{path}")
      replaceAll("\\{" + "path" + "\\}", `path`.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (`path` == null) throw new Exception("Missing required parameter '`path`' when calling CrxApi->postPackageServiceJson")

    if (cmd == null) throw new Exception("Missing required parameter 'cmd' when calling CrxApi->postPackageServiceJson")

    queryParams += "cmd" -> cmd.toString
    groupName match {
      case Some(param) => queryParams += "groupName" -> param.toString
      case _ => queryParams
    }
    packageName match {
      case Some(param) => queryParams += "packageName" -> param.toString
      case _ => queryParams
    }
    packageVersion match {
      case Some(param) => queryParams += "packageVersion" -> param.toString
      case _ => queryParams
    }
    charset match {
      case Some(param) => queryParams += "_charset_" -> param.toString
      case _ => queryParams
    }
    force match {
      case Some(param) => queryParams += "force" -> param.toString
      case _ => queryParams
    }
    recursive match {
      case Some(param) => queryParams += "recursive" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postPackageUpdate(groupName: String,
    packageName: String,
    version: String,
    `path`: String,
    filter: Option[String] = None,
    charset: Option[String] = None
    )(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/crx/packmgr/update.jsp"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (groupName == null) throw new Exception("Missing required parameter 'groupName' when calling CrxApi->postPackageUpdate")

    if (packageName == null) throw new Exception("Missing required parameter 'packageName' when calling CrxApi->postPackageUpdate")

    if (version == null) throw new Exception("Missing required parameter 'version' when calling CrxApi->postPackageUpdate")

    if (`path` == null) throw new Exception("Missing required parameter '`path`' when calling CrxApi->postPackageUpdate")

    queryParams += "groupName" -> groupName.toString
    queryParams += "packageName" -> packageName.toString
    queryParams += "version" -> version.toString
    queryParams += "path" -> `path`.toString
    filter match {
      case Some(param) => queryParams += "filter" -> param.toString
      case _ => queryParams
    }
    charset match {
      case Some(param) => queryParams += "_charset_" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postSetPassword(old: String,
    plain: String,
    verify: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/crx/explorer/ui/setpassword.jsp"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (old == null) throw new Exception("Missing required parameter 'old' when calling CrxApi->postSetPassword")

    if (plain == null) throw new Exception("Missing required parameter 'plain' when calling CrxApi->postSetPassword")

    if (verify == null) throw new Exception("Missing required parameter 'verify' when calling CrxApi->postSetPassword")

    queryParams += "old" -> old.toString
    queryParams += "plain" -> plain.toString
    queryParams += "verify" -> verify.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
