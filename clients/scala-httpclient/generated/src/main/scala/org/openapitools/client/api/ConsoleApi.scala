/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.SamlConfigurationInfo
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class ConsoleApi(
  val defBasePath: String = "http://localhost",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new ConsoleApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @return List[String]
   */
  def getAemProductInfo(): Option[List[String]] = {
    val await = Try(Await.result(getAemProductInfoAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @return Future(List[String])
   */
  def getAemProductInfoAsync(): Future[List[String]] = {
      helper.getAemProductInfo()
  }

  /**
   * 
   * 
   *
   * @return String
   */
  def getConfigMgr(): Option[String] = {
    val await = Try(Await.result(getConfigMgrAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @return Future(String)
   */
  def getConfigMgrAsync(): Future[String] = {
      helper.getConfigMgr()
  }

  /**
   * 
   * 
   *
   * @param name  
   * @param action  
   * @return void
   */
  def postBundle(name: String, action: String) = {
    val await = Try(Await.result(postBundleAsync(name, action), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param name  
   * @param action  
   * @return Future(void)
   */
  def postBundleAsync(name: String, action: String) = {
      helper.postBundle(name, action)
  }

  /**
   * 
   * 
   *
   * @param action  
   * @return void
   */
  def postJmxRepository(action: String) = {
    val await = Try(Await.result(postJmxRepositoryAsync(action), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param action  
   * @return Future(void)
   */
  def postJmxRepositoryAsync(action: String) = {
      helper.postJmxRepository(action)
  }

  /**
   * 
   * 
   *
   * @param post  (optional)
   * @param apply  (optional)
   * @param delete  (optional)
   * @param action  (optional)
   * @param location  (optional)
   * @param `path`  (optional)
   * @param serviceRanking  (optional)
   * @param idpUrl  (optional)
   * @param idpCertAlias  (optional)
   * @param idpHttpRedirect  (optional)
   * @param serviceProviderEntityId  (optional)
   * @param assertionConsumerServiceURL  (optional)
   * @param spPrivateKeyAlias  (optional)
   * @param keyStorePassword  (optional)
   * @param defaultRedirectUrl  (optional)
   * @param userIDAttribute  (optional)
   * @param useEncryption  (optional)
   * @param createUser  (optional)
   * @param addGroupMemberships  (optional)
   * @param groupMembershipAttribute  (optional)
   * @param defaultGroups  (optional)
   * @param nameIdFormat  (optional)
   * @param synchronizeAttributes  (optional)
   * @param handleLogout  (optional)
   * @param logoutUrl  (optional)
   * @param clockTolerance  (optional)
   * @param digestMethod  (optional)
   * @param signatureMethod  (optional)
   * @param userIntermediatePath  (optional)
   * @param propertylist  (optional)
   * @return SamlConfigurationInfo
   */
  def postSamlConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, `path`: Option[List[String]] = None, serviceRanking: Option[Integer] = None, idpUrl: Option[String] = None, idpCertAlias: Option[String] = None, idpHttpRedirect: Option[Boolean] = None, serviceProviderEntityId: Option[String] = None, assertionConsumerServiceURL: Option[String] = None, spPrivateKeyAlias: Option[String] = None, keyStorePassword: Option[String] = None, defaultRedirectUrl: Option[String] = None, userIDAttribute: Option[String] = None, useEncryption: Option[Boolean] = None, createUser: Option[Boolean] = None, addGroupMemberships: Option[Boolean] = None, groupMembershipAttribute: Option[String] = None, defaultGroups: Option[List[String]] = None, nameIdFormat: Option[String] = None, synchronizeAttributes: Option[List[String]] = None, handleLogout: Option[Boolean] = None, logoutUrl: Option[String] = None, clockTolerance: Option[Integer] = None, digestMethod: Option[String] = None, signatureMethod: Option[String] = None, userIntermediatePath: Option[String] = None, propertylist: Option[List[String]] = None): Option[SamlConfigurationInfo] = {
    val await = Try(Await.result(postSamlConfigurationAsync(post, apply, delete, action, location, `path`, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param post  (optional)
   * @param apply  (optional)
   * @param delete  (optional)
   * @param action  (optional)
   * @param location  (optional)
   * @param `path`  (optional)
   * @param serviceRanking  (optional)
   * @param idpUrl  (optional)
   * @param idpCertAlias  (optional)
   * @param idpHttpRedirect  (optional)
   * @param serviceProviderEntityId  (optional)
   * @param assertionConsumerServiceURL  (optional)
   * @param spPrivateKeyAlias  (optional)
   * @param keyStorePassword  (optional)
   * @param defaultRedirectUrl  (optional)
   * @param userIDAttribute  (optional)
   * @param useEncryption  (optional)
   * @param createUser  (optional)
   * @param addGroupMemberships  (optional)
   * @param groupMembershipAttribute  (optional)
   * @param defaultGroups  (optional)
   * @param nameIdFormat  (optional)
   * @param synchronizeAttributes  (optional)
   * @param handleLogout  (optional)
   * @param logoutUrl  (optional)
   * @param clockTolerance  (optional)
   * @param digestMethod  (optional)
   * @param signatureMethod  (optional)
   * @param userIntermediatePath  (optional)
   * @param propertylist  (optional)
   * @return Future(SamlConfigurationInfo)
   */
  def postSamlConfigurationAsync(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, `path`: Option[List[String]] = None, serviceRanking: Option[Integer] = None, idpUrl: Option[String] = None, idpCertAlias: Option[String] = None, idpHttpRedirect: Option[Boolean] = None, serviceProviderEntityId: Option[String] = None, assertionConsumerServiceURL: Option[String] = None, spPrivateKeyAlias: Option[String] = None, keyStorePassword: Option[String] = None, defaultRedirectUrl: Option[String] = None, userIDAttribute: Option[String] = None, useEncryption: Option[Boolean] = None, createUser: Option[Boolean] = None, addGroupMemberships: Option[Boolean] = None, groupMembershipAttribute: Option[String] = None, defaultGroups: Option[List[String]] = None, nameIdFormat: Option[String] = None, synchronizeAttributes: Option[List[String]] = None, handleLogout: Option[Boolean] = None, logoutUrl: Option[String] = None, clockTolerance: Option[Integer] = None, digestMethod: Option[String] = None, signatureMethod: Option[String] = None, userIntermediatePath: Option[String] = None, propertylist: Option[List[String]] = None): Future[SamlConfigurationInfo] = {
      helper.postSamlConfiguration(post, apply, delete, action, location, `path`, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist)
  }

}

class ConsoleApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getAemProductInfo()(implicit reader: ClientResponseReader[List[String]]): Future[List[String]] = {
    // create path and map variables
    val path = (addFmt("/system/console/status-productinfo.json"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getConfigMgr()(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/system/console/configMgr"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postBundle(name: String,
    action: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/system/console/bundles/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling ConsoleApi->postBundle")

    if (action == null) throw new Exception("Missing required parameter 'action' when calling ConsoleApi->postBundle")

    queryParams += "action" -> action.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postJmxRepository(action: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/system/console/jmx/com.adobe.granite:type&#x3D;Repository/op/{action}")
      replaceAll("\\{" + "action" + "\\}", action.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (action == null) throw new Exception("Missing required parameter 'action' when calling ConsoleApi->postJmxRepository")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def postSamlConfiguration(post: Option[Boolean] = None,
    apply: Option[Boolean] = None,
    delete: Option[Boolean] = None,
    action: Option[String] = None,
    location: Option[String] = None,
    `path`: Option[List[String]] = None,
    serviceRanking: Option[Integer] = None,
    idpUrl: Option[String] = None,
    idpCertAlias: Option[String] = None,
    idpHttpRedirect: Option[Boolean] = None,
    serviceProviderEntityId: Option[String] = None,
    assertionConsumerServiceURL: Option[String] = None,
    spPrivateKeyAlias: Option[String] = None,
    keyStorePassword: Option[String] = None,
    defaultRedirectUrl: Option[String] = None,
    userIDAttribute: Option[String] = None,
    useEncryption: Option[Boolean] = None,
    createUser: Option[Boolean] = None,
    addGroupMemberships: Option[Boolean] = None,
    groupMembershipAttribute: Option[String] = None,
    defaultGroups: Option[List[String]] = None,
    nameIdFormat: Option[String] = None,
    synchronizeAttributes: Option[List[String]] = None,
    handleLogout: Option[Boolean] = None,
    logoutUrl: Option[String] = None,
    clockTolerance: Option[Integer] = None,
    digestMethod: Option[String] = None,
    signatureMethod: Option[String] = None,
    userIntermediatePath: Option[String] = None,
    propertylist: Option[List[String]] = None
    )(implicit reader: ClientResponseReader[SamlConfigurationInfo]): Future[SamlConfigurationInfo] = {
    // create path and map variables
    val path = (addFmt("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    post match {
      case Some(param) => queryParams += "post" -> param.toString
      case _ => queryParams
    }
    apply match {
      case Some(param) => queryParams += "apply" -> param.toString
      case _ => queryParams
    }
    delete match {
      case Some(param) => queryParams += "delete" -> param.toString
      case _ => queryParams
    }
    action match {
      case Some(param) => queryParams += "action" -> param.toString
      case _ => queryParams
    }
    location match {
      case Some(param) => queryParams += "$location" -> param.toString
      case _ => queryParams
    }
    `path` match {
      case Some(param) => queryParams += "path" -> param.toString
      case _ => queryParams
    }
    serviceRanking match {
      case Some(param) => queryParams += "service.ranking" -> param.toString
      case _ => queryParams
    }
    idpUrl match {
      case Some(param) => queryParams += "idpUrl" -> param.toString
      case _ => queryParams
    }
    idpCertAlias match {
      case Some(param) => queryParams += "idpCertAlias" -> param.toString
      case _ => queryParams
    }
    idpHttpRedirect match {
      case Some(param) => queryParams += "idpHttpRedirect" -> param.toString
      case _ => queryParams
    }
    serviceProviderEntityId match {
      case Some(param) => queryParams += "serviceProviderEntityId" -> param.toString
      case _ => queryParams
    }
    assertionConsumerServiceURL match {
      case Some(param) => queryParams += "assertionConsumerServiceURL" -> param.toString
      case _ => queryParams
    }
    spPrivateKeyAlias match {
      case Some(param) => queryParams += "spPrivateKeyAlias" -> param.toString
      case _ => queryParams
    }
    keyStorePassword match {
      case Some(param) => queryParams += "keyStorePassword" -> param.toString
      case _ => queryParams
    }
    defaultRedirectUrl match {
      case Some(param) => queryParams += "defaultRedirectUrl" -> param.toString
      case _ => queryParams
    }
    userIDAttribute match {
      case Some(param) => queryParams += "userIDAttribute" -> param.toString
      case _ => queryParams
    }
    useEncryption match {
      case Some(param) => queryParams += "useEncryption" -> param.toString
      case _ => queryParams
    }
    createUser match {
      case Some(param) => queryParams += "createUser" -> param.toString
      case _ => queryParams
    }
    addGroupMemberships match {
      case Some(param) => queryParams += "addGroupMemberships" -> param.toString
      case _ => queryParams
    }
    groupMembershipAttribute match {
      case Some(param) => queryParams += "groupMembershipAttribute" -> param.toString
      case _ => queryParams
    }
    defaultGroups match {
      case Some(param) => queryParams += "defaultGroups" -> param.toString
      case _ => queryParams
    }
    nameIdFormat match {
      case Some(param) => queryParams += "nameIdFormat" -> param.toString
      case _ => queryParams
    }
    synchronizeAttributes match {
      case Some(param) => queryParams += "synchronizeAttributes" -> param.toString
      case _ => queryParams
    }
    handleLogout match {
      case Some(param) => queryParams += "handleLogout" -> param.toString
      case _ => queryParams
    }
    logoutUrl match {
      case Some(param) => queryParams += "logoutUrl" -> param.toString
      case _ => queryParams
    }
    clockTolerance match {
      case Some(param) => queryParams += "clockTolerance" -> param.toString
      case _ => queryParams
    }
    digestMethod match {
      case Some(param) => queryParams += "digestMethod" -> param.toString
      case _ => queryParams
    }
    signatureMethod match {
      case Some(param) => queryParams += "signatureMethod" -> param.toString
      case _ => queryParams
    }
    userIntermediatePath match {
      case Some(param) => queryParams += "userIntermediatePath" -> param.toString
      case _ => queryParams
    }
    propertylist match {
      case Some(param) => queryParams += "propertylist" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
