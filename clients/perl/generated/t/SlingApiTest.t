=begin comment

Adobe Experience Manager (AEM) API

Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

OpenAPI spec version: 3.2.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator
# Please update the test cases below to test the API endpoints.
# Ref: https://openapi-generator.tech
#
use Test::More tests => 1; #TODO update number of test cases
use Test::Exception;

use lib 'lib';
use strict;
use warnings;

use_ok('WWW::OpenAPIClient::SlingApi');

my $api = WWW::OpenAPIClient::SlingApi->new();
isa_ok($api, 'WWW::OpenAPIClient::SlingApi');

#
# delete_agent test
#
{
    my $runmode = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $result = $api->delete_agent(runmode => $runmode, name => $name);
}

#
# delete_node test
#
{
    my $path = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $result = $api->delete_node(path => $path, name => $name);
}

#
# get_agent test
#
{
    my $runmode = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $result = $api->get_agent(runmode => $runmode, name => $name);
}

#
# get_agents test
#
{
    my $runmode = undef; # replace NULL with a proper value
    my $result = $api->get_agents(runmode => $runmode);
}

#
# get_authorizable_keystore test
#
{
    my $intermediate_path = undef; # replace NULL with a proper value
    my $authorizable_id = undef; # replace NULL with a proper value
    my $result = $api->get_authorizable_keystore(intermediate_path => $intermediate_path, authorizable_id => $authorizable_id);
}

#
# get_keystore test
#
{
    my $intermediate_path = undef; # replace NULL with a proper value
    my $authorizable_id = undef; # replace NULL with a proper value
    my $result = $api->get_keystore(intermediate_path => $intermediate_path, authorizable_id => $authorizable_id);
}

#
# get_node test
#
{
    my $path = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $result = $api->get_node(path => $path, name => $name);
}

#
# get_package test
#
{
    my $group = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $version = undef; # replace NULL with a proper value
    my $result = $api->get_package(group => $group, name => $name, version => $version);
}

#
# get_package_filter test
#
{
    my $group = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $version = undef; # replace NULL with a proper value
    my $result = $api->get_package_filter(group => $group, name => $name, version => $version);
}

#
# get_query test
#
{
    my $path = undef; # replace NULL with a proper value
    my $p/limit = undef; # replace NULL with a proper value
    my $_1_property = undef; # replace NULL with a proper value
    my $_1_property/value = undef; # replace NULL with a proper value
    my $result = $api->get_query(path => $path, p/limit => $p/limit, _1_property => $_1_property, _1_property/value => $_1_property/value);
}

#
# get_truststore test
#
{
    my $result = $api->get_truststore();
}

#
# get_truststore_info test
#
{
    my $result = $api->get_truststore_info();
}

#
# post_agent test
#
{
    my $runmode = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $jcr:content/cq:distribute = undef; # replace NULL with a proper value
    my $jcr:content/cq:distribute@type_hint = undef; # replace NULL with a proper value
    my $jcr:content/cq:name = undef; # replace NULL with a proper value
    my $jcr:content/cq:template = undef; # replace NULL with a proper value
    my $jcr:content/enabled = undef; # replace NULL with a proper value
    my $jcr:content/jcr:description = undef; # replace NULL with a proper value
    my $jcr:content/jcr:last_modified = undef; # replace NULL with a proper value
    my $jcr:content/jcr:last_modified_by = undef; # replace NULL with a proper value
    my $jcr:content/jcr:mixin_types = undef; # replace NULL with a proper value
    my $jcr:content/jcr:title = undef; # replace NULL with a proper value
    my $jcr:content/log_level = undef; # replace NULL with a proper value
    my $jcr:content/no_status_update = undef; # replace NULL with a proper value
    my $jcr:content/no_versioning = undef; # replace NULL with a proper value
    my $jcr:content/protocol_connect_timeout = undef; # replace NULL with a proper value
    my $jcr:content/protocol_http_connection_closed = undef; # replace NULL with a proper value
    my $jcr:content/protocol_http_expired = undef; # replace NULL with a proper value
    my $jcr:content/protocol_http_headers = undef; # replace NULL with a proper value
    my $jcr:content/protocol_http_headers@type_hint = undef; # replace NULL with a proper value
    my $jcr:content/protocol_http_method = undef; # replace NULL with a proper value
    my $jcr:content/protocol_https_relaxed = undef; # replace NULL with a proper value
    my $jcr:content/protocol_interface = undef; # replace NULL with a proper value
    my $jcr:content/protocol_socket_timeout = undef; # replace NULL with a proper value
    my $jcr:content/protocol_version = undef; # replace NULL with a proper value
    my $jcr:content/proxy_ntlm_domain = undef; # replace NULL with a proper value
    my $jcr:content/proxy_ntlm_host = undef; # replace NULL with a proper value
    my $jcr:content/proxy_host = undef; # replace NULL with a proper value
    my $jcr:content/proxy_password = undef; # replace NULL with a proper value
    my $jcr:content/proxy_port = undef; # replace NULL with a proper value
    my $jcr:content/proxy_user = undef; # replace NULL with a proper value
    my $jcr:content/queue_batch_max_size = undef; # replace NULL with a proper value
    my $jcr:content/queue_batch_mode = undef; # replace NULL with a proper value
    my $jcr:content/queue_batch_wait_time = undef; # replace NULL with a proper value
    my $jcr:content/retry_delay = undef; # replace NULL with a proper value
    my $jcr:content/reverse_replication = undef; # replace NULL with a proper value
    my $jcr:content/serialization_type = undef; # replace NULL with a proper value
    my $jcr:content/sling:resource_type = undef; # replace NULL with a proper value
    my $jcr:content/ssl = undef; # replace NULL with a proper value
    my $jcr:content/transport_ntlm_domain = undef; # replace NULL with a proper value
    my $jcr:content/transport_ntlm_host = undef; # replace NULL with a proper value
    my $jcr:content/transport_password = undef; # replace NULL with a proper value
    my $jcr:content/transport_uri = undef; # replace NULL with a proper value
    my $jcr:content/transport_user = undef; # replace NULL with a proper value
    my $jcr:content/trigger_distribute = undef; # replace NULL with a proper value
    my $jcr:content/trigger_modified = undef; # replace NULL with a proper value
    my $jcr:content/trigger_on_off_time = undef; # replace NULL with a proper value
    my $jcr:content/trigger_receive = undef; # replace NULL with a proper value
    my $jcr:content/trigger_specific = undef; # replace NULL with a proper value
    my $jcr:content/user_id = undef; # replace NULL with a proper value
    my $jcr:primary_type = undef; # replace NULL with a proper value
    my $:operation = undef; # replace NULL with a proper value
    my $result = $api->post_agent(runmode => $runmode, name => $name, jcr:content/cq:distribute => $jcr:content/cq:distribute, jcr:content/cq:distribute@type_hint => $jcr:content/cq:distribute@type_hint, jcr:content/cq:name => $jcr:content/cq:name, jcr:content/cq:template => $jcr:content/cq:template, jcr:content/enabled => $jcr:content/enabled, jcr:content/jcr:description => $jcr:content/jcr:description, jcr:content/jcr:last_modified => $jcr:content/jcr:last_modified, jcr:content/jcr:last_modified_by => $jcr:content/jcr:last_modified_by, jcr:content/jcr:mixin_types => $jcr:content/jcr:mixin_types, jcr:content/jcr:title => $jcr:content/jcr:title, jcr:content/log_level => $jcr:content/log_level, jcr:content/no_status_update => $jcr:content/no_status_update, jcr:content/no_versioning => $jcr:content/no_versioning, jcr:content/protocol_connect_timeout => $jcr:content/protocol_connect_timeout, jcr:content/protocol_http_connection_closed => $jcr:content/protocol_http_connection_closed, jcr:content/protocol_http_expired => $jcr:content/protocol_http_expired, jcr:content/protocol_http_headers => $jcr:content/protocol_http_headers, jcr:content/protocol_http_headers@type_hint => $jcr:content/protocol_http_headers@type_hint, jcr:content/protocol_http_method => $jcr:content/protocol_http_method, jcr:content/protocol_https_relaxed => $jcr:content/protocol_https_relaxed, jcr:content/protocol_interface => $jcr:content/protocol_interface, jcr:content/protocol_socket_timeout => $jcr:content/protocol_socket_timeout, jcr:content/protocol_version => $jcr:content/protocol_version, jcr:content/proxy_ntlm_domain => $jcr:content/proxy_ntlm_domain, jcr:content/proxy_ntlm_host => $jcr:content/proxy_ntlm_host, jcr:content/proxy_host => $jcr:content/proxy_host, jcr:content/proxy_password => $jcr:content/proxy_password, jcr:content/proxy_port => $jcr:content/proxy_port, jcr:content/proxy_user => $jcr:content/proxy_user, jcr:content/queue_batch_max_size => $jcr:content/queue_batch_max_size, jcr:content/queue_batch_mode => $jcr:content/queue_batch_mode, jcr:content/queue_batch_wait_time => $jcr:content/queue_batch_wait_time, jcr:content/retry_delay => $jcr:content/retry_delay, jcr:content/reverse_replication => $jcr:content/reverse_replication, jcr:content/serialization_type => $jcr:content/serialization_type, jcr:content/sling:resource_type => $jcr:content/sling:resource_type, jcr:content/ssl => $jcr:content/ssl, jcr:content/transport_ntlm_domain => $jcr:content/transport_ntlm_domain, jcr:content/transport_ntlm_host => $jcr:content/transport_ntlm_host, jcr:content/transport_password => $jcr:content/transport_password, jcr:content/transport_uri => $jcr:content/transport_uri, jcr:content/transport_user => $jcr:content/transport_user, jcr:content/trigger_distribute => $jcr:content/trigger_distribute, jcr:content/trigger_modified => $jcr:content/trigger_modified, jcr:content/trigger_on_off_time => $jcr:content/trigger_on_off_time, jcr:content/trigger_receive => $jcr:content/trigger_receive, jcr:content/trigger_specific => $jcr:content/trigger_specific, jcr:content/user_id => $jcr:content/user_id, jcr:primary_type => $jcr:primary_type, :operation => $:operation);
}

#
# post_authorizable_keystore test
#
{
    my $intermediate_path = undef; # replace NULL with a proper value
    my $authorizable_id = undef; # replace NULL with a proper value
    my $:operation = undef; # replace NULL with a proper value
    my $current_password = undef; # replace NULL with a proper value
    my $new_password = undef; # replace NULL with a proper value
    my $re_password = undef; # replace NULL with a proper value
    my $key_password = undef; # replace NULL with a proper value
    my $key_store_pass = undef; # replace NULL with a proper value
    my $alias = undef; # replace NULL with a proper value
    my $new_alias = undef; # replace NULL with a proper value
    my $remove_alias = undef; # replace NULL with a proper value
    my $cert_chain = undef; # replace NULL with a proper value
    my $pk = undef; # replace NULL with a proper value
    my $key_store = undef; # replace NULL with a proper value
    my $result = $api->post_authorizable_keystore(intermediate_path => $intermediate_path, authorizable_id => $authorizable_id, :operation => $:operation, current_password => $current_password, new_password => $new_password, re_password => $re_password, key_password => $key_password, key_store_pass => $key_store_pass, alias => $alias, new_alias => $new_alias, remove_alias => $remove_alias, cert_chain => $cert_chain, pk => $pk, key_store => $key_store);
}

#
# post_authorizables test
#
{
    my $authorizable_id = undef; # replace NULL with a proper value
    my $intermediate_path = undef; # replace NULL with a proper value
    my $create_user = undef; # replace NULL with a proper value
    my $create_group = undef; # replace NULL with a proper value
    my $rep:password = undef; # replace NULL with a proper value
    my $profile/given_name = undef; # replace NULL with a proper value
    my $result = $api->post_authorizables(authorizable_id => $authorizable_id, intermediate_path => $intermediate_path, create_user => $create_user, create_group => $create_group, rep:password => $rep:password, profile/given_name => $profile/given_name);
}

#
# post_config_adobe_granite_saml_authentication_handler test
#
{
    my $key_store_password = undef; # replace NULL with a proper value
    my $key_store_password@type_hint = undef; # replace NULL with a proper value
    my $service/ranking = undef; # replace NULL with a proper value
    my $service/ranking@type_hint = undef; # replace NULL with a proper value
    my $idp_http_redirect = undef; # replace NULL with a proper value
    my $idp_http_redirect@type_hint = undef; # replace NULL with a proper value
    my $create_user = undef; # replace NULL with a proper value
    my $create_user@type_hint = undef; # replace NULL with a proper value
    my $default_redirect_url = undef; # replace NULL with a proper value
    my $default_redirect_url@type_hint = undef; # replace NULL with a proper value
    my $user_id_attribute = undef; # replace NULL with a proper value
    my $user_id_attribute@type_hint = undef; # replace NULL with a proper value
    my $default_groups = undef; # replace NULL with a proper value
    my $default_groups@type_hint = undef; # replace NULL with a proper value
    my $idp_cert_alias = undef; # replace NULL with a proper value
    my $idp_cert_alias@type_hint = undef; # replace NULL with a proper value
    my $add_group_memberships = undef; # replace NULL with a proper value
    my $add_group_memberships@type_hint = undef; # replace NULL with a proper value
    my $path = undef; # replace NULL with a proper value
    my $path@type_hint = undef; # replace NULL with a proper value
    my $synchronize_attributes = undef; # replace NULL with a proper value
    my $synchronize_attributes@type_hint = undef; # replace NULL with a proper value
    my $clock_tolerance = undef; # replace NULL with a proper value
    my $clock_tolerance@type_hint = undef; # replace NULL with a proper value
    my $group_membership_attribute = undef; # replace NULL with a proper value
    my $group_membership_attribute@type_hint = undef; # replace NULL with a proper value
    my $idp_url = undef; # replace NULL with a proper value
    my $idp_url@type_hint = undef; # replace NULL with a proper value
    my $logout_url = undef; # replace NULL with a proper value
    my $logout_url@type_hint = undef; # replace NULL with a proper value
    my $service_provider_entity_id = undef; # replace NULL with a proper value
    my $service_provider_entity_id@type_hint = undef; # replace NULL with a proper value
    my $assertion_consumer_service_url = undef; # replace NULL with a proper value
    my $assertion_consumer_service_url@type_hint = undef; # replace NULL with a proper value
    my $handle_logout = undef; # replace NULL with a proper value
    my $handle_logout@type_hint = undef; # replace NULL with a proper value
    my $sp_private_key_alias = undef; # replace NULL with a proper value
    my $sp_private_key_alias@type_hint = undef; # replace NULL with a proper value
    my $use_encryption = undef; # replace NULL with a proper value
    my $use_encryption@type_hint = undef; # replace NULL with a proper value
    my $name_id_format = undef; # replace NULL with a proper value
    my $name_id_format@type_hint = undef; # replace NULL with a proper value
    my $digest_method = undef; # replace NULL with a proper value
    my $digest_method@type_hint = undef; # replace NULL with a proper value
    my $signature_method = undef; # replace NULL with a proper value
    my $signature_method@type_hint = undef; # replace NULL with a proper value
    my $user_intermediate_path = undef; # replace NULL with a proper value
    my $user_intermediate_path@type_hint = undef; # replace NULL with a proper value
    my $result = $api->post_config_adobe_granite_saml_authentication_handler(key_store_password => $key_store_password, key_store_password@type_hint => $key_store_password@type_hint, service/ranking => $service/ranking, service/ranking@type_hint => $service/ranking@type_hint, idp_http_redirect => $idp_http_redirect, idp_http_redirect@type_hint => $idp_http_redirect@type_hint, create_user => $create_user, create_user@type_hint => $create_user@type_hint, default_redirect_url => $default_redirect_url, default_redirect_url@type_hint => $default_redirect_url@type_hint, user_id_attribute => $user_id_attribute, user_id_attribute@type_hint => $user_id_attribute@type_hint, default_groups => $default_groups, default_groups@type_hint => $default_groups@type_hint, idp_cert_alias => $idp_cert_alias, idp_cert_alias@type_hint => $idp_cert_alias@type_hint, add_group_memberships => $add_group_memberships, add_group_memberships@type_hint => $add_group_memberships@type_hint, path => $path, path@type_hint => $path@type_hint, synchronize_attributes => $synchronize_attributes, synchronize_attributes@type_hint => $synchronize_attributes@type_hint, clock_tolerance => $clock_tolerance, clock_tolerance@type_hint => $clock_tolerance@type_hint, group_membership_attribute => $group_membership_attribute, group_membership_attribute@type_hint => $group_membership_attribute@type_hint, idp_url => $idp_url, idp_url@type_hint => $idp_url@type_hint, logout_url => $logout_url, logout_url@type_hint => $logout_url@type_hint, service_provider_entity_id => $service_provider_entity_id, service_provider_entity_id@type_hint => $service_provider_entity_id@type_hint, assertion_consumer_service_url => $assertion_consumer_service_url, assertion_consumer_service_url@type_hint => $assertion_consumer_service_url@type_hint, handle_logout => $handle_logout, handle_logout@type_hint => $handle_logout@type_hint, sp_private_key_alias => $sp_private_key_alias, sp_private_key_alias@type_hint => $sp_private_key_alias@type_hint, use_encryption => $use_encryption, use_encryption@type_hint => $use_encryption@type_hint, name_id_format => $name_id_format, name_id_format@type_hint => $name_id_format@type_hint, digest_method => $digest_method, digest_method@type_hint => $digest_method@type_hint, signature_method => $signature_method, signature_method@type_hint => $signature_method@type_hint, user_intermediate_path => $user_intermediate_path, user_intermediate_path@type_hint => $user_intermediate_path@type_hint);
}

#
# post_config_apache_felix_jetty_based_http_service test
#
{
    my $org/apache/felix/https/nio = undef; # replace NULL with a proper value
    my $org/apache/felix/https/nio@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore/password = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore/password@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore/key = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore/key@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore/key/password = undef; # replace NULL with a proper value
    my $org/apache/felix/https/keystore/key/password@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/truststore = undef; # replace NULL with a proper value
    my $org/apache/felix/https/truststore@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/truststore/password = undef; # replace NULL with a proper value
    my $org/apache/felix/https/truststore/password@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/clientcertificate = undef; # replace NULL with a proper value
    my $org/apache/felix/https/clientcertificate@type_hint = undef; # replace NULL with a proper value
    my $org/apache/felix/https/enable = undef; # replace NULL with a proper value
    my $org/apache/felix/https/enable@type_hint = undef; # replace NULL with a proper value
    my $org/osgi/service/http/port/secure = undef; # replace NULL with a proper value
    my $org/osgi/service/http/port/secure@type_hint = undef; # replace NULL with a proper value
    my $result = $api->post_config_apache_felix_jetty_based_http_service(org/apache/felix/https/nio => $org/apache/felix/https/nio, org/apache/felix/https/nio@type_hint => $org/apache/felix/https/nio@type_hint, org/apache/felix/https/keystore => $org/apache/felix/https/keystore, org/apache/felix/https/keystore@type_hint => $org/apache/felix/https/keystore@type_hint, org/apache/felix/https/keystore/password => $org/apache/felix/https/keystore/password, org/apache/felix/https/keystore/password@type_hint => $org/apache/felix/https/keystore/password@type_hint, org/apache/felix/https/keystore/key => $org/apache/felix/https/keystore/key, org/apache/felix/https/keystore/key@type_hint => $org/apache/felix/https/keystore/key@type_hint, org/apache/felix/https/keystore/key/password => $org/apache/felix/https/keystore/key/password, org/apache/felix/https/keystore/key/password@type_hint => $org/apache/felix/https/keystore/key/password@type_hint, org/apache/felix/https/truststore => $org/apache/felix/https/truststore, org/apache/felix/https/truststore@type_hint => $org/apache/felix/https/truststore@type_hint, org/apache/felix/https/truststore/password => $org/apache/felix/https/truststore/password, org/apache/felix/https/truststore/password@type_hint => $org/apache/felix/https/truststore/password@type_hint, org/apache/felix/https/clientcertificate => $org/apache/felix/https/clientcertificate, org/apache/felix/https/clientcertificate@type_hint => $org/apache/felix/https/clientcertificate@type_hint, org/apache/felix/https/enable => $org/apache/felix/https/enable, org/apache/felix/https/enable@type_hint => $org/apache/felix/https/enable@type_hint, org/osgi/service/http/port/secure => $org/osgi/service/http/port/secure, org/osgi/service/http/port/secure@type_hint => $org/osgi/service/http/port/secure@type_hint);
}

#
# post_config_apache_http_components_proxy_configuration test
#
{
    my $proxy/host = undef; # replace NULL with a proper value
    my $proxy/host@type_hint = undef; # replace NULL with a proper value
    my $proxy/port = undef; # replace NULL with a proper value
    my $proxy/port@type_hint = undef; # replace NULL with a proper value
    my $proxy/exceptions = undef; # replace NULL with a proper value
    my $proxy/exceptions@type_hint = undef; # replace NULL with a proper value
    my $proxy/enabled = undef; # replace NULL with a proper value
    my $proxy/enabled@type_hint = undef; # replace NULL with a proper value
    my $proxy/user = undef; # replace NULL with a proper value
    my $proxy/user@type_hint = undef; # replace NULL with a proper value
    my $proxy/password = undef; # replace NULL with a proper value
    my $proxy/password@type_hint = undef; # replace NULL with a proper value
    my $result = $api->post_config_apache_http_components_proxy_configuration(proxy/host => $proxy/host, proxy/host@type_hint => $proxy/host@type_hint, proxy/port => $proxy/port, proxy/port@type_hint => $proxy/port@type_hint, proxy/exceptions => $proxy/exceptions, proxy/exceptions@type_hint => $proxy/exceptions@type_hint, proxy/enabled => $proxy/enabled, proxy/enabled@type_hint => $proxy/enabled@type_hint, proxy/user => $proxy/user, proxy/user@type_hint => $proxy/user@type_hint, proxy/password => $proxy/password, proxy/password@type_hint => $proxy/password@type_hint);
}

#
# post_config_apache_sling_dav_ex_servlet test
#
{
    my $alias = undef; # replace NULL with a proper value
    my $alias@type_hint = undef; # replace NULL with a proper value
    my $dav/create_absolute_uri = undef; # replace NULL with a proper value
    my $dav/create_absolute_uri@type_hint = undef; # replace NULL with a proper value
    my $result = $api->post_config_apache_sling_dav_ex_servlet(alias => $alias, alias@type_hint => $alias@type_hint, dav/create_absolute_uri => $dav/create_absolute_uri, dav/create_absolute_uri@type_hint => $dav/create_absolute_uri@type_hint);
}

#
# post_config_apache_sling_get_servlet test
#
{
    my $json/maximumresults = undef; # replace NULL with a proper value
    my $json/maximumresults@type_hint = undef; # replace NULL with a proper value
    my $enable/html = undef; # replace NULL with a proper value
    my $enable/html@type_hint = undef; # replace NULL with a proper value
    my $enable/txt = undef; # replace NULL with a proper value
    my $enable/txt@type_hint = undef; # replace NULL with a proper value
    my $enable/xml = undef; # replace NULL with a proper value
    my $enable/xml@type_hint = undef; # replace NULL with a proper value
    my $result = $api->post_config_apache_sling_get_servlet(json/maximumresults => $json/maximumresults, json/maximumresults@type_hint => $json/maximumresults@type_hint, enable/html => $enable/html, enable/html@type_hint => $enable/html@type_hint, enable/txt => $enable/txt, enable/txt@type_hint => $enable/txt@type_hint, enable/xml => $enable/xml, enable/xml@type_hint => $enable/xml@type_hint);
}

#
# post_config_apache_sling_referrer_filter test
#
{
    my $allow/empty = undef; # replace NULL with a proper value
    my $allow/empty@type_hint = undef; # replace NULL with a proper value
    my $allow/hosts = undef; # replace NULL with a proper value
    my $allow/hosts@type_hint = undef; # replace NULL with a proper value
    my $allow/hosts/regexp = undef; # replace NULL with a proper value
    my $allow/hosts/regexp@type_hint = undef; # replace NULL with a proper value
    my $filter/methods = undef; # replace NULL with a proper value
    my $filter/methods@type_hint = undef; # replace NULL with a proper value
    my $result = $api->post_config_apache_sling_referrer_filter(allow/empty => $allow/empty, allow/empty@type_hint => $allow/empty@type_hint, allow/hosts => $allow/hosts, allow/hosts@type_hint => $allow/hosts@type_hint, allow/hosts/regexp => $allow/hosts/regexp, allow/hosts/regexp@type_hint => $allow/hosts/regexp@type_hint, filter/methods => $filter/methods, filter/methods@type_hint => $filter/methods@type_hint);
}

#
# post_node test
#
{
    my $path = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $:operation = undef; # replace NULL with a proper value
    my $delete_authorizable = undef; # replace NULL with a proper value
    my $file = undef; # replace NULL with a proper value
    my $result = $api->post_node(path => $path, name => $name, :operation => $:operation, delete_authorizable => $delete_authorizable, file => $file);
}

#
# post_node_rw test
#
{
    my $path = undef; # replace NULL with a proper value
    my $name = undef; # replace NULL with a proper value
    my $add_members = undef; # replace NULL with a proper value
    my $result = $api->post_node_rw(path => $path, name => $name, add_members => $add_members);
}

#
# post_path test
#
{
    my $path = undef; # replace NULL with a proper value
    my $jcr:primary_type = undef; # replace NULL with a proper value
    my $:name = undef; # replace NULL with a proper value
    my $result = $api->post_path(path => $path, jcr:primary_type => $jcr:primary_type, :name => $:name);
}

#
# post_query test
#
{
    my $path = undef; # replace NULL with a proper value
    my $p/limit = undef; # replace NULL with a proper value
    my $_1_property = undef; # replace NULL with a proper value
    my $_1_property/value = undef; # replace NULL with a proper value
    my $result = $api->post_query(path => $path, p/limit => $p/limit, _1_property => $_1_property, _1_property/value => $_1_property/value);
}

#
# post_tree_activation test
#
{
    my $ignoredeactivated = undef; # replace NULL with a proper value
    my $onlymodified = undef; # replace NULL with a proper value
    my $path = undef; # replace NULL with a proper value
    my $result = $api->post_tree_activation(ignoredeactivated => $ignoredeactivated, onlymodified => $onlymodified, path => $path);
}

#
# post_truststore test
#
{
    my $:operation = undef; # replace NULL with a proper value
    my $new_password = undef; # replace NULL with a proper value
    my $re_password = undef; # replace NULL with a proper value
    my $key_store_type = undef; # replace NULL with a proper value
    my $remove_alias = undef; # replace NULL with a proper value
    my $certificate = undef; # replace NULL with a proper value
    my $result = $api->post_truststore(:operation => $:operation, new_password => $new_password, re_password => $re_password, key_store_type => $key_store_type, remove_alias => $remove_alias, certificate => $certificate);
}

#
# post_truststore_pkcs12 test
#
{
    my $truststore/p12 = undef; # replace NULL with a proper value
    my $result = $api->post_truststore_pkcs12(truststore/p12 => $truststore/p12);
}


1;
