/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.oauth
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.*

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import org.openapitools.server.ApplicationAuthProviders
import org.openapitools.server.Paths
import org.openapitools.server.ApplicationExecutors
import org.openapitools.server.HTTP.client
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.infrastructure.apiKeyAuth

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import org.openapitools.server.delete

import org.openapitools.server.models.KeystoreInfo
import org.openapitools.server.models.TruststoreInfo

fun Route.SlingApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    delete<Paths.deleteAgent> {  it: Paths.deleteAgent ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/replication/agents.{runmode}/{name}' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    delete<Paths.deleteNode> {  it: Paths.deleteNode ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{path}/{name}' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getAgent> {  it: Paths.getAgent ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/replication/agents.{runmode}/{name}' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getAgents> {  it: Paths.getAgents ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/replication/agents.{runmode}.-1.json' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getAuthorizableKeystore> {  it: Paths.getAuthorizableKeystore ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = ""
            val exampleContentString = """"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{intermediatePath}/{authorizableId}.ks.json' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getKeystore> {  it: Paths.getKeystore ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{intermediatePath}/{authorizableId}/keystore/store.p12' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getNode> {  it: Paths.getNode ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{path}/{name}' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getPackage> {  it: Paths.getPackage ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/packages/{group}/{name}-{version}.zip' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getPackageFilter> {  it: Paths.getPackageFilter ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getQuery> {  it: Paths.getQuery ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/bin/querybuilder.json' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getTruststore> {  it: Paths.getTruststore ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/truststore/truststore.p12' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    get<Paths.getTruststoreInfo> {  it: Paths.getTruststoreInfo ->
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
              "aliases" : [ {
                "entryType" : "entryType",
                "notAfter" : "notAfter",
                "serialNumber" : 0,
                "subject" : "subject",
                "alias" : "alias",
                "issuer" : "issuer",
                "notBefore" : "notBefore"
              }, {
                "entryType" : "entryType",
                "notAfter" : "notAfter",
                "serialNumber" : 0,
                "subject" : "subject",
                "alias" : "alias",
                "issuer" : "issuer",
                "notBefore" : "notBefore"
              } ],
              "exists" : true
            }"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/libs/granite/security/truststore.json' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/etc/replication/agents.{runmode}/{name}") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/replication/agents.{runmode}/{name}' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/{intermediatePath}/{authorizableId}.ks.html") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                val exampleContentType = ""
                val exampleContentString = """"""
                
                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{intermediatePath}/{authorizableId}.ks.html' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/libs/granite/security/post/authorizables") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/libs/granite/security/post/authorizables' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/apps/system/config/org.apache.felix.http") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/apps/system/config/org.apache.felix.http' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/apps/system/config/org.apache.http.proxyconfigurator.config") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/apps/system/config/org.apache.http.proxyconfigurator.config' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/{path}/{name}") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{path}/{name}' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/{path}/{name}.rw.html") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{path}/{name}.rw.html' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/{path}/") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/{path}/' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/bin/querybuilder.json") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/bin/querybuilder.json' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/etc/replication/treeactivation.html") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/replication/treeactivation.html' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/libs/granite/security/post/truststore") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/libs/granite/security/post/truststore' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }

    route("/etc/truststore") {
        post {
            val principal = call.authentication.principal<UserIdPrincipal>()
            
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
                call.respond(HttpStatusCode.NotImplemented)
            }
        }
    }
    .apply {
      // TODO: ktor doesn't allow different authentication registrations for endpoints sharing the same path but different methods.
      //       It could be the authentication block is being abused here. Until this is resolved, swallow duplicate exceptions.

        try {
            authentication {
                basicAuthentication("aemAuth") { credentials ->
                    // TODO: "Apply your basic authentication functionality."
                    // Accessible in-method via call.principal<UserIdPrincipal>()
                    if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                         UserIdPrincipal(credentials.name)
                    } else {
                        null
                    }
                }
            }
        } catch(e: io.ktor.application.DuplicateApplicationFeatureException){
            application.environment.log.warn("authentication block for '/etc/truststore' is duplicated in code. " +
            "Generated endpoints may need to be merged under a 'route' entry.")
        }
    }
}
