/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.*
import io.ktor.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import org.openapitools.server.models.*


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * 
     * 
     */
    @Location("/system/console/status-productinfo.json") class getAemProductInfo()

    /**
     * 
     * 
     */
    @Location("/system/console/configMgr") class getConfigMgr()

    /**
     * 
     * 
     */
    @Location("/libs/granite/core/content/login.html") class getLoginPage()

    /**
     * 
     * 
     */
    @Location("/crx/server/crx.default/jcr:root/.1.json") class getCrxdeStatus()

    /**
     * 
     * 
     */
    @Location("/crx/packmgr/installstatus.jsp") class getInstallStatus()

    /**
     * 
     * 
     */
    @Location("/crx/packmgr/service/script.html") class getPackageManagerServlet()

    /**
     * 
     * 
     * @param tags  (optional)
     * @param combineTagsOr  (optional)
     */
    @Location("/system/health") class getAemHealthCheck(val tags: kotlin.String, val combineTagsOr: kotlin.Boolean)

    /**
     * 
     * 
     * @param runmode  
     * @param name  
     */
    @Location("/etc/replication/agents.{runmode}/{name}") class deleteAgent(val runmode: kotlin.String, val name: kotlin.String)

    /**
     * 
     * 
     * @param path  
     * @param name  
     */
    @Location("/{path}/{name}") class deleteNode(val path: kotlin.String, val name: kotlin.String)

    /**
     * 
     * 
     * @param runmode  
     * @param name  
     */
    @Location("/etc/replication/agents.{runmode}/{name}") class getAgent(val runmode: kotlin.String, val name: kotlin.String)

    /**
     * 
     * 
     * @param runmode  
     */
    @Location("/etc/replication/agents.{runmode}.-1.json") class getAgents(val runmode: kotlin.String)

    /**
     * 
     * 
     * @param intermediatePath  
     * @param authorizableId  
     */
    @Location("/{intermediatePath}/{authorizableId}.ks.json") class getAuthorizableKeystore(val intermediatePath: kotlin.String, val authorizableId: kotlin.String)

    /**
     * 
     * 
     * @param intermediatePath  
     * @param authorizableId  
     */
    @Location("/{intermediatePath}/{authorizableId}/keystore/store.p12") class getKeystore(val intermediatePath: kotlin.String, val authorizableId: kotlin.String)

    /**
     * 
     * 
     * @param path  
     * @param name  
     */
    @Location("/{path}/{name}") class getNode(val path: kotlin.String, val name: kotlin.String)

    /**
     * 
     * 
     * @param group  
     * @param name  
     * @param version  
     */
    @Location("/etc/packages/{group}/{name}-{version}.zip") class getPackage(val group: kotlin.String, val name: kotlin.String, val version: kotlin.String)

    /**
     * 
     * 
     * @param group  
     * @param name  
     * @param version  
     */
    @Location("/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json") class getPackageFilter(val group: kotlin.String, val name: kotlin.String, val version: kotlin.String)

    /**
     * 
     * 
     * @param path  
     * @param pPeriodlimit  
     * @param 1Property  
     * @param 1PropertyPeriodvalue  
     */
    @Location("/bin/querybuilder.json") class getQuery(val path: kotlin.String, val pPeriodlimit: java.math.BigDecimal, val 1Property: kotlin.String, val 1PropertyPeriodvalue: kotlin.String)

    /**
     * 
     * 
     */
    @Location("/etc/truststore/truststore.p12") class getTruststore()

    /**
     * 
     * 
     */
    @Location("/libs/granite/security/truststore.json") class getTruststoreInfo()

}
