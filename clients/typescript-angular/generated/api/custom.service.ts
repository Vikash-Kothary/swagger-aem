/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CustomService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param tags 
     * @param combineTagsOr 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAemHealthCheck(tags?: string, combineTagsOr?: boolean, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAemHealthCheck(tags?: string, combineTagsOr?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAemHealthCheck(tags?: string, combineTagsOr?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAemHealthCheck(tags?: string, combineTagsOr?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags !== undefined && tags !== null) {
            queryParameters = queryParameters.set('tags', <any>tags);
        }
        if (combineTagsOr !== undefined && combineTagsOr !== null) {
            queryParameters = queryParameters.set('combineTagsOr', <any>combineTagsOr);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/system/health`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param bundlesIgnored 
     * @param bundlesIgnored@TypeHint 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postConfigAemHealthCheckServlet(bundlesIgnored?: Array<string>, bundlesIgnored@TypeHint?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postConfigAemHealthCheckServlet(bundlesIgnored?: Array<string>, bundlesIgnored@TypeHint?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postConfigAemHealthCheckServlet(bundlesIgnored?: Array<string>, bundlesIgnored@TypeHint?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postConfigAemHealthCheckServlet(bundlesIgnored?: Array<string>, bundlesIgnored@TypeHint?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bundlesIgnored) {
            bundlesIgnored.forEach((element) => {
                queryParameters = queryParameters.append('bundles.ignored', <any>element);
            })
        }
        if (bundlesIgnored@TypeHint !== undefined && bundlesIgnored@TypeHint !== null) {
            queryParameters = queryParameters.set('bundles.ignored@TypeHint', <any>bundlesIgnored@TypeHint);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param pwdresetAuthorizables 
     * @param pwdresetAuthorizables@TypeHint 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postConfigAemPasswordReset(pwdresetAuthorizables?: Array<string>, pwdresetAuthorizables@TypeHint?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postConfigAemPasswordReset(pwdresetAuthorizables?: Array<string>, pwdresetAuthorizables@TypeHint?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postConfigAemPasswordReset(pwdresetAuthorizables?: Array<string>, pwdresetAuthorizables@TypeHint?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postConfigAemPasswordReset(pwdresetAuthorizables?: Array<string>, pwdresetAuthorizables@TypeHint?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pwdresetAuthorizables) {
            pwdresetAuthorizables.forEach((element) => {
                queryParameters = queryParameters.append('pwdreset.authorizables', <any>element);
            })
        }
        if (pwdresetAuthorizables@TypeHint !== undefined && pwdresetAuthorizables@TypeHint !== null) {
            queryParameters = queryParameters.set('pwdreset.authorizables@TypeHint', <any>pwdresetAuthorizables@TypeHint);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/apps/system/config/com.shinesolutions.aem.passwordreset.Activator`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
