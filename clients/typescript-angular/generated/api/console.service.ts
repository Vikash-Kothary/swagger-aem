/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { SamlConfigurationInfo } from '../model/samlConfigurationInfo';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ConsoleService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAemProductInfo(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getAemProductInfo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getAemProductInfo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getAemProductInfo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.configuration.basePath}/system/console/status-productinfo.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConfigMgr(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getConfigMgr(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getConfigMgr(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getConfigMgr(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/system/console/configMgr`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param name 
     * @param action 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postBundle(name: string, action: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postBundle(name: string, action: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postBundle(name: string, action: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postBundle(name: string, action: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling postBundle.');
        }
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling postBundle.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/system/console/bundles/${encodeURIComponent(String(name))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param action 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postJmxRepository(action: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public postJmxRepository(action: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public postJmxRepository(action: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public postJmxRepository(action: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling postJmxRepository.');
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.configuration.basePath}/system/console/jmx/com.adobe.granite:type=Repository/op/${encodeURIComponent(String(action))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param post 
     * @param apply 
     * @param _delete 
     * @param action 
     * @param $location 
     * @param path 
     * @param serviceRanking 
     * @param idpUrl 
     * @param idpCertAlias 
     * @param idpHttpRedirect 
     * @param serviceProviderEntityId 
     * @param assertionConsumerServiceURL 
     * @param spPrivateKeyAlias 
     * @param keyStorePassword 
     * @param defaultRedirectUrl 
     * @param userIDAttribute 
     * @param useEncryption 
     * @param createUser 
     * @param addGroupMemberships 
     * @param groupMembershipAttribute 
     * @param defaultGroups 
     * @param nameIdFormat 
     * @param synchronizeAttributes 
     * @param handleLogout 
     * @param logoutUrl 
     * @param clockTolerance 
     * @param digestMethod 
     * @param signatureMethod 
     * @param userIntermediatePath 
     * @param propertylist 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSamlConfiguration(post?: boolean, apply?: boolean, _delete?: boolean, action?: string, $location?: string, path?: Array<string>, serviceRanking?: number, idpUrl?: string, idpCertAlias?: string, idpHttpRedirect?: boolean, serviceProviderEntityId?: string, assertionConsumerServiceURL?: string, spPrivateKeyAlias?: string, keyStorePassword?: string, defaultRedirectUrl?: string, userIDAttribute?: string, useEncryption?: boolean, createUser?: boolean, addGroupMemberships?: boolean, groupMembershipAttribute?: string, defaultGroups?: Array<string>, nameIdFormat?: string, synchronizeAttributes?: Array<string>, handleLogout?: boolean, logoutUrl?: string, clockTolerance?: number, digestMethod?: string, signatureMethod?: string, userIntermediatePath?: string, propertylist?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<SamlConfigurationInfo>;
    public postSamlConfiguration(post?: boolean, apply?: boolean, _delete?: boolean, action?: string, $location?: string, path?: Array<string>, serviceRanking?: number, idpUrl?: string, idpCertAlias?: string, idpHttpRedirect?: boolean, serviceProviderEntityId?: string, assertionConsumerServiceURL?: string, spPrivateKeyAlias?: string, keyStorePassword?: string, defaultRedirectUrl?: string, userIDAttribute?: string, useEncryption?: boolean, createUser?: boolean, addGroupMemberships?: boolean, groupMembershipAttribute?: string, defaultGroups?: Array<string>, nameIdFormat?: string, synchronizeAttributes?: Array<string>, handleLogout?: boolean, logoutUrl?: string, clockTolerance?: number, digestMethod?: string, signatureMethod?: string, userIntermediatePath?: string, propertylist?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SamlConfigurationInfo>>;
    public postSamlConfiguration(post?: boolean, apply?: boolean, _delete?: boolean, action?: string, $location?: string, path?: Array<string>, serviceRanking?: number, idpUrl?: string, idpCertAlias?: string, idpHttpRedirect?: boolean, serviceProviderEntityId?: string, assertionConsumerServiceURL?: string, spPrivateKeyAlias?: string, keyStorePassword?: string, defaultRedirectUrl?: string, userIDAttribute?: string, useEncryption?: boolean, createUser?: boolean, addGroupMemberships?: boolean, groupMembershipAttribute?: string, defaultGroups?: Array<string>, nameIdFormat?: string, synchronizeAttributes?: Array<string>, handleLogout?: boolean, logoutUrl?: string, clockTolerance?: number, digestMethod?: string, signatureMethod?: string, userIntermediatePath?: string, propertylist?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SamlConfigurationInfo>>;
    public postSamlConfiguration(post?: boolean, apply?: boolean, _delete?: boolean, action?: string, $location?: string, path?: Array<string>, serviceRanking?: number, idpUrl?: string, idpCertAlias?: string, idpHttpRedirect?: boolean, serviceProviderEntityId?: string, assertionConsumerServiceURL?: string, spPrivateKeyAlias?: string, keyStorePassword?: string, defaultRedirectUrl?: string, userIDAttribute?: string, useEncryption?: boolean, createUser?: boolean, addGroupMemberships?: boolean, groupMembershipAttribute?: string, defaultGroups?: Array<string>, nameIdFormat?: string, synchronizeAttributes?: Array<string>, handleLogout?: boolean, logoutUrl?: string, clockTolerance?: number, digestMethod?: string, signatureMethod?: string, userIntermediatePath?: string, propertylist?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (post !== undefined && post !== null) {
            queryParameters = queryParameters.set('post', <any>post);
        }
        if (apply !== undefined && apply !== null) {
            queryParameters = queryParameters.set('apply', <any>apply);
        }
        if (_delete !== undefined && _delete !== null) {
            queryParameters = queryParameters.set('delete', <any>_delete);
        }
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }
        if ($location !== undefined && $location !== null) {
            queryParameters = queryParameters.set('$location', <any>$location);
        }
        if (path) {
            path.forEach((element) => {
                queryParameters = queryParameters.append('path', <any>element);
            })
        }
        if (serviceRanking !== undefined && serviceRanking !== null) {
            queryParameters = queryParameters.set('service.ranking', <any>serviceRanking);
        }
        if (idpUrl !== undefined && idpUrl !== null) {
            queryParameters = queryParameters.set('idpUrl', <any>idpUrl);
        }
        if (idpCertAlias !== undefined && idpCertAlias !== null) {
            queryParameters = queryParameters.set('idpCertAlias', <any>idpCertAlias);
        }
        if (idpHttpRedirect !== undefined && idpHttpRedirect !== null) {
            queryParameters = queryParameters.set('idpHttpRedirect', <any>idpHttpRedirect);
        }
        if (serviceProviderEntityId !== undefined && serviceProviderEntityId !== null) {
            queryParameters = queryParameters.set('serviceProviderEntityId', <any>serviceProviderEntityId);
        }
        if (assertionConsumerServiceURL !== undefined && assertionConsumerServiceURL !== null) {
            queryParameters = queryParameters.set('assertionConsumerServiceURL', <any>assertionConsumerServiceURL);
        }
        if (spPrivateKeyAlias !== undefined && spPrivateKeyAlias !== null) {
            queryParameters = queryParameters.set('spPrivateKeyAlias', <any>spPrivateKeyAlias);
        }
        if (keyStorePassword !== undefined && keyStorePassword !== null) {
            queryParameters = queryParameters.set('keyStorePassword', <any>keyStorePassword);
        }
        if (defaultRedirectUrl !== undefined && defaultRedirectUrl !== null) {
            queryParameters = queryParameters.set('defaultRedirectUrl', <any>defaultRedirectUrl);
        }
        if (userIDAttribute !== undefined && userIDAttribute !== null) {
            queryParameters = queryParameters.set('userIDAttribute', <any>userIDAttribute);
        }
        if (useEncryption !== undefined && useEncryption !== null) {
            queryParameters = queryParameters.set('useEncryption', <any>useEncryption);
        }
        if (createUser !== undefined && createUser !== null) {
            queryParameters = queryParameters.set('createUser', <any>createUser);
        }
        if (addGroupMemberships !== undefined && addGroupMemberships !== null) {
            queryParameters = queryParameters.set('addGroupMemberships', <any>addGroupMemberships);
        }
        if (groupMembershipAttribute !== undefined && groupMembershipAttribute !== null) {
            queryParameters = queryParameters.set('groupMembershipAttribute', <any>groupMembershipAttribute);
        }
        if (defaultGroups) {
            defaultGroups.forEach((element) => {
                queryParameters = queryParameters.append('defaultGroups', <any>element);
            })
        }
        if (nameIdFormat !== undefined && nameIdFormat !== null) {
            queryParameters = queryParameters.set('nameIdFormat', <any>nameIdFormat);
        }
        if (synchronizeAttributes) {
            synchronizeAttributes.forEach((element) => {
                queryParameters = queryParameters.append('synchronizeAttributes', <any>element);
            })
        }
        if (handleLogout !== undefined && handleLogout !== null) {
            queryParameters = queryParameters.set('handleLogout', <any>handleLogout);
        }
        if (logoutUrl !== undefined && logoutUrl !== null) {
            queryParameters = queryParameters.set('logoutUrl', <any>logoutUrl);
        }
        if (clockTolerance !== undefined && clockTolerance !== null) {
            queryParameters = queryParameters.set('clockTolerance', <any>clockTolerance);
        }
        if (digestMethod !== undefined && digestMethod !== null) {
            queryParameters = queryParameters.set('digestMethod', <any>digestMethod);
        }
        if (signatureMethod !== undefined && signatureMethod !== null) {
            queryParameters = queryParameters.set('signatureMethod', <any>signatureMethod);
        }
        if (userIntermediatePath !== undefined && userIntermediatePath !== null) {
            queryParameters = queryParameters.set('userIntermediatePath', <any>userIntermediatePath);
        }
        if (propertylist) {
            queryParameters = queryParameters.set('propertylist', propertylist.join(COLLECTION_FORMATS['csv']));
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<SamlConfigurationInfo>(`${this.configuration.basePath}/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
