/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { InstallStatus } from '../model/installStatus';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CrxService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrxdeStatus(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getCrxdeStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getCrxdeStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getCrxdeStatus(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'plain/text'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/crx/server/crx.default/jcr:root/.1.json`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstallStatus(observe?: 'body', reportProgress?: boolean): Observable<InstallStatus>;
    public getInstallStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InstallStatus>>;
    public getInstallStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InstallStatus>>;
    public getInstallStatus(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InstallStatus>(`${this.configuration.basePath}/crx/packmgr/installstatus.jsp`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPackageManagerServlet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPackageManagerServlet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPackageManagerServlet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPackageManagerServlet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.configuration.basePath}/crx/packmgr/service/script.html`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param cmd 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPackageService(cmd: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public postPackageService(cmd: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public postPackageService(cmd: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public postPackageService(cmd: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cmd === null || cmd === undefined) {
            throw new Error('Required parameter cmd was null or undefined when calling postPackageService.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cmd !== undefined && cmd !== null) {
            queryParameters = queryParameters.set('cmd', <any>cmd);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.configuration.basePath}/crx/packmgr/service.jsp`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param path 
     * @param cmd 
     * @param groupName 
     * @param packageName 
     * @param packageVersion 
     * @param charset 
     * @param force 
     * @param recursive 
     * @param _package 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPackageServiceJson(path: string, cmd: string, groupName?: string, packageName?: string, packageVersion?: string, charset?: string, force?: boolean, recursive?: boolean, _package?: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public postPackageServiceJson(path: string, cmd: string, groupName?: string, packageName?: string, packageVersion?: string, charset?: string, force?: boolean, recursive?: boolean, _package?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public postPackageServiceJson(path: string, cmd: string, groupName?: string, packageName?: string, packageVersion?: string, charset?: string, force?: boolean, recursive?: boolean, _package?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public postPackageServiceJson(path: string, cmd: string, groupName?: string, packageName?: string, packageVersion?: string, charset?: string, force?: boolean, recursive?: boolean, _package?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling postPackageServiceJson.');
        }
        if (cmd === null || cmd === undefined) {
            throw new Error('Required parameter cmd was null or undefined when calling postPackageServiceJson.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cmd !== undefined && cmd !== null) {
            queryParameters = queryParameters.set('cmd', <any>cmd);
        }
        if (groupName !== undefined && groupName !== null) {
            queryParameters = queryParameters.set('groupName', <any>groupName);
        }
        if (packageName !== undefined && packageName !== null) {
            queryParameters = queryParameters.set('packageName', <any>packageName);
        }
        if (packageVersion !== undefined && packageVersion !== null) {
            queryParameters = queryParameters.set('packageVersion', <any>packageVersion);
        }
        if (charset !== undefined && charset !== null) {
            queryParameters = queryParameters.set('_charset_', <any>charset);
        }
        if (force !== undefined && force !== null) {
            queryParameters = queryParameters.set('force', <any>force);
        }
        if (recursive !== undefined && recursive !== null) {
            queryParameters = queryParameters.set('recursive', <any>recursive);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (_package !== undefined) {
            formParams = formParams.append('package', <any>_package) || formParams;
        }

        return this.httpClient.post<string>(`${this.configuration.basePath}/crx/packmgr/service/.json/${encodeURIComponent(String(path))}`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param groupName 
     * @param packageName 
     * @param version 
     * @param path 
     * @param filter 
     * @param charset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPackageUpdate(groupName: string, packageName: string, version: string, path: string, filter?: string, charset?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public postPackageUpdate(groupName: string, packageName: string, version: string, path: string, filter?: string, charset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public postPackageUpdate(groupName: string, packageName: string, version: string, path: string, filter?: string, charset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public postPackageUpdate(groupName: string, packageName: string, version: string, path: string, filter?: string, charset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (groupName === null || groupName === undefined) {
            throw new Error('Required parameter groupName was null or undefined when calling postPackageUpdate.');
        }
        if (packageName === null || packageName === undefined) {
            throw new Error('Required parameter packageName was null or undefined when calling postPackageUpdate.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling postPackageUpdate.');
        }
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling postPackageUpdate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupName !== undefined && groupName !== null) {
            queryParameters = queryParameters.set('groupName', <any>groupName);
        }
        if (packageName !== undefined && packageName !== null) {
            queryParameters = queryParameters.set('packageName', <any>packageName);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }
        if (charset !== undefined && charset !== null) {
            queryParameters = queryParameters.set('_charset_', <any>charset);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.configuration.basePath}/crx/packmgr/update.jsp`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param old 
     * @param plain 
     * @param verify 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSetPassword(old: string, plain: string, verify: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public postSetPassword(old: string, plain: string, verify: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public postSetPassword(old: string, plain: string, verify: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public postSetPassword(old: string, plain: string, verify: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (old === null || old === undefined) {
            throw new Error('Required parameter old was null or undefined when calling postSetPassword.');
        }
        if (plain === null || plain === undefined) {
            throw new Error('Required parameter plain was null or undefined when calling postSetPassword.');
        }
        if (verify === null || verify === undefined) {
            throw new Error('Required parameter verify was null or undefined when calling postSetPassword.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (old !== undefined && old !== null) {
            queryParameters = queryParameters.set('old', <any>old);
        }
        if (plain !== undefined && plain !== null) {
            queryParameters = queryParameters.set('plain', <any>plain);
        }
        if (verify !== undefined && verify !== null) {
            queryParameters = queryParameters.set('verify', <any>verify);
        }

        let headers = this.defaultHeaders;

        // authentication (aemAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.configuration.basePath}/crx/explorer/ui/setpassword.jsp`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
