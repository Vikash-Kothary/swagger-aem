/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export interface InstallStatus {
  status?: InstallStatusStatus;
}

export interface InstallStatusStatus {
  finished?: boolean;
  itemCount?: number;
}

export interface KeystoreChainItems {
  /**
   * e.g. \"CN=localhost\"
   */
  subject?: string;
  /**
   * e.g. \"CN=Admin\"
   */
  issuer?: string;
  /**
   * e.g. \"Sun Jul 01 12:00:00 AEST 2018\"
   */
  notBefore?: string;
  /**
   * e.g. \"Sun Jun 30 23:59:50 AEST 2019\"
   */
  notAfter?: string;
  /**
   * 18165099476682912368
   */
  serialNumber?: number;
}

export interface KeystoreInfo {
  aliases?: Array<KeystoreItems>;
  /**
   * False if truststore don't exist
   */
  exists?: boolean;
}

export interface KeystoreItems {
  /**
   * Keystore alias name
   */
  alias?: string;
  /**
   * e.g. \"privateKey\"
   */
  entryType?: string;
  /**
   * e.g. \"RSA\"
   */
  algorithm?: string;
  /**
   * e.g. \"PKCS#8\"
   */
  format?: string;
  chain?: Array<KeystoreChainItems>;
}

export interface SamlConfigurationInfo {
  /**
   * Persistent Identity (PID)
   */
  pid?: string;
  /**
   * Title
   */
  title?: string;
  /**
   * Title
   */
  description?: string;
  /**
   * needed for configuration binding
   */
  bundleLocation?: string;
  /**
   * needed for configuraiton binding
   */
  serviceLocation?: string;
  properties?: SamlConfigurationProperties;
}

export interface SamlConfigurationProperties {
  path?: SamlConfigurationPropertyItemsArray;
  serviceRanking?: SamlConfigurationPropertyItemsLong;
  idpUrl?: SamlConfigurationPropertyItemsString;
  idpCertAlias?: SamlConfigurationPropertyItemsString;
  idpHttpRedirect?: SamlConfigurationPropertyItemsBoolean;
  serviceProviderEntityId?: SamlConfigurationPropertyItemsString;
  assertionConsumerServiceURL?: SamlConfigurationPropertyItemsString;
  spPrivateKeyAlias?: SamlConfigurationPropertyItemsString;
  keyStorePassword?: SamlConfigurationPropertyItemsString;
  defaultRedirectUrl?: SamlConfigurationPropertyItemsString;
  userIDAttribute?: SamlConfigurationPropertyItemsString;
  useEncryption?: SamlConfigurationPropertyItemsBoolean;
  createUser?: SamlConfigurationPropertyItemsBoolean;
  addGroupMemberships?: SamlConfigurationPropertyItemsBoolean;
  groupMembershipAttribute?: SamlConfigurationPropertyItemsString;
  defaultGroups?: SamlConfigurationPropertyItemsArray;
  nameIdFormat?: SamlConfigurationPropertyItemsString;
  synchronizeAttributes?: SamlConfigurationPropertyItemsArray;
  handleLogout?: SamlConfigurationPropertyItemsBoolean;
  logoutUrl?: SamlConfigurationPropertyItemsString;
  clockTolerance?: SamlConfigurationPropertyItemsLong;
  digestMethod?: SamlConfigurationPropertyItemsString;
  signatureMethod?: SamlConfigurationPropertyItemsString;
  userIntermediatePath?: SamlConfigurationPropertyItemsString;
}

export interface SamlConfigurationPropertyItemsArray {
  /**
   * property name
   */
  name?: string;
  /**
   * True if optional
   */
  optional?: boolean;
  /**
   * True if property is set
   */
  isSet?: boolean;
  /**
   * Property type, 1=String, 3=long, 11=boolean, 12=Password
   */
  type?: number;
  /**
   * Property value
   */
  values?: Array<string>;
  /**
   * Property description
   */
  description?: string;
}

export interface SamlConfigurationPropertyItemsBoolean {
  /**
   * property name
   */
  name?: string;
  /**
   * True if optional
   */
  optional?: boolean;
  /**
   * True if property is set
   */
  isSet?: boolean;
  /**
   * Property type, 1=String, 3=long, 11=boolean, 12=Password
   */
  type?: number;
  /**
   * Property value
   */
  value?: boolean;
  /**
   * Property description
   */
  description?: string;
}

export interface SamlConfigurationPropertyItemsLong {
  /**
   * property name
   */
  name?: string;
  /**
   * True if optional
   */
  optional?: boolean;
  /**
   * True if property is set
   */
  isSet?: boolean;
  /**
   * Property type, 1=String, 3=long, 11=boolean, 12=Password
   */
  type?: number;
  /**
   * Property value
   */
  value?: number;
  /**
   * Property description
   */
  description?: string;
}

export interface SamlConfigurationPropertyItemsString {
  /**
   * property name
   */
  name?: string;
  /**
   * True if optional
   */
  optional?: boolean;
  /**
   * True if property is set
   */
  isSet?: boolean;
  /**
   * Property type, 1=String, 3=long, 11=boolean, 12=Password
   */
  type?: number;
  /**
   * Property value
   */
  value?: string;
  /**
   * Property description
   */
  description?: string;
}

export interface TruststoreInfo {
  aliases?: Array<TruststoreItems>;
  /**
   * False if truststore don't exist
   */
  exists?: boolean;
}

export interface TruststoreItems {
  /**
   * Truststore alias name
   */
  alias?: string;
  entryType?: string;
  /**
   * e.g. \"CN=localhost\"
   */
  subject?: string;
  /**
   * e.g. \"CN=Admin\"
   */
  issuer?: string;
  /**
   * e.g. \"Sun Jul 01 12:00:00 AEST 2018\"
   */
  notBefore?: string;
  /**
   * e.g. \"Sun Jun 30 23:59:50 AEST 2019\"
   */
  notAfter?: string;
  /**
   * 18165099476682912368
   */
  serialNumber?: number;
}

