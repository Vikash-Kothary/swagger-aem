/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 2.2.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraem4j.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.shinesolutions.swaggeraem4j.model.SamlConfigurationPropertyItemsArray;
import com.shinesolutions.swaggeraem4j.model.SamlConfigurationPropertyItemsBoolean;
import com.shinesolutions.swaggeraem4j.model.SamlConfigurationPropertyItemsLong;
import com.shinesolutions.swaggeraem4j.model.SamlConfigurationPropertyItemsString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SamlConfigurationProperties
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-30T04:12:03.132Z")
public class SamlConfigurationProperties {
  @SerializedName("path")
  private List<SamlConfigurationPropertyItemsArray> path = null;

  @SerializedName("service.ranking")
  private List<SamlConfigurationPropertyItemsLong> serviceRanking = null;

  @SerializedName("idpUrl")
  private List<SamlConfigurationPropertyItemsString> idpUrl = null;

  @SerializedName("idpCertAlias")
  private List<SamlConfigurationPropertyItemsString> idpCertAlias = null;

  @SerializedName("idpHttpRedirect")
  private List<SamlConfigurationPropertyItemsBoolean> idpHttpRedirect = null;

  @SerializedName("serviceProviderEntityId")
  private List<SamlConfigurationPropertyItemsString> serviceProviderEntityId = null;

  @SerializedName("assertionConsumerServiceURL")
  private List<SamlConfigurationPropertyItemsString> assertionConsumerServiceURL = null;

  @SerializedName("spPrivateKeyAlias")
  private List<SamlConfigurationPropertyItemsString> spPrivateKeyAlias = null;

  @SerializedName("keyStorePassword")
  private List<SamlConfigurationPropertyItemsString> keyStorePassword = null;

  @SerializedName("defaultRedirectUrl")
  private List<SamlConfigurationPropertyItemsString> defaultRedirectUrl = null;

  @SerializedName("userIDAttribute")
  private List<SamlConfigurationPropertyItemsString> userIDAttribute = null;

  @SerializedName("useEncryption")
  private List<SamlConfigurationPropertyItemsBoolean> useEncryption = null;

  @SerializedName("createUser")
  private List<SamlConfigurationPropertyItemsBoolean> createUser = null;

  @SerializedName("addGroupMemberships")
  private List<SamlConfigurationPropertyItemsBoolean> addGroupMemberships = null;

  @SerializedName("groupMembershipAttribute")
  private List<SamlConfigurationPropertyItemsString> groupMembershipAttribute = null;

  @SerializedName("defaultGroups")
  private List<SamlConfigurationPropertyItemsArray> defaultGroups = null;

  @SerializedName("nameIdFormat")
  private List<SamlConfigurationPropertyItemsString> nameIdFormat = null;

  @SerializedName("synchronizeAttributes")
  private List<SamlConfigurationPropertyItemsArray> synchronizeAttributes = null;

  @SerializedName("handleLogout")
  private List<SamlConfigurationPropertyItemsBoolean> handleLogout = null;

  @SerializedName("logoutUrl")
  private List<SamlConfigurationPropertyItemsString> logoutUrl = null;

  @SerializedName("clockTolerance")
  private List<SamlConfigurationPropertyItemsLong> clockTolerance = null;

  @SerializedName("digestMethod")
  private List<SamlConfigurationPropertyItemsString> digestMethod = null;

  @SerializedName("signatureMethod")
  private List<SamlConfigurationPropertyItemsString> signatureMethod = null;

  @SerializedName("userIntermediatePath")
  private List<SamlConfigurationPropertyItemsString> userIntermediatePath = null;

  public SamlConfigurationProperties path(List<SamlConfigurationPropertyItemsArray> path) {
    this.path = path;
    return this;
  }

  public SamlConfigurationProperties addPathItem(SamlConfigurationPropertyItemsArray pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<SamlConfigurationPropertyItemsArray>();
    }
    this.path.add(pathItem);
    return this;
  }

   /**
   * Repository path for which this authentication handler should be used by Sling. If this is empty, the authentication handler will be disabled.
   * @return path
  **/
  @ApiModelProperty(value = "Repository path for which this authentication handler should be used by Sling. If this is empty, the authentication handler will be disabled.")
  public List<SamlConfigurationPropertyItemsArray> getPath() {
    return path;
  }

  public void setPath(List<SamlConfigurationPropertyItemsArray> path) {
    this.path = path;
  }

  public SamlConfigurationProperties serviceRanking(List<SamlConfigurationPropertyItemsLong> serviceRanking) {
    this.serviceRanking = serviceRanking;
    return this;
  }

  public SamlConfigurationProperties addServiceRankingItem(SamlConfigurationPropertyItemsLong serviceRankingItem) {
    if (this.serviceRanking == null) {
      this.serviceRanking = new ArrayList<SamlConfigurationPropertyItemsLong>();
    }
    this.serviceRanking.add(serviceRankingItem);
    return this;
  }

   /**
   * OSGi Framework Service Ranking value to indicate the order in which to call this service. This is an int value where higher values designate higher precedence. Default value is 0.
   * @return serviceRanking
  **/
  @ApiModelProperty(value = "OSGi Framework Service Ranking value to indicate the order in which to call this service. This is an int value where higher values designate higher precedence. Default value is 0.")
  public List<SamlConfigurationPropertyItemsLong> getServiceRanking() {
    return serviceRanking;
  }

  public void setServiceRanking(List<SamlConfigurationPropertyItemsLong> serviceRanking) {
    this.serviceRanking = serviceRanking;
  }

  public SamlConfigurationProperties idpUrl(List<SamlConfigurationPropertyItemsString> idpUrl) {
    this.idpUrl = idpUrl;
    return this;
  }

  public SamlConfigurationProperties addIdpUrlItem(SamlConfigurationPropertyItemsString idpUrlItem) {
    if (this.idpUrl == null) {
      this.idpUrl = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.idpUrl.add(idpUrlItem);
    return this;
  }

   /**
   * URL of the IDP where the SAML Authentication Request should be sent to. If this property is empty the authentication handler is disabled. (idpUrl)
   * @return idpUrl
  **/
  @ApiModelProperty(value = "URL of the IDP where the SAML Authentication Request should be sent to. If this property is empty the authentication handler is disabled. (idpUrl)")
  public List<SamlConfigurationPropertyItemsString> getIdpUrl() {
    return idpUrl;
  }

  public void setIdpUrl(List<SamlConfigurationPropertyItemsString> idpUrl) {
    this.idpUrl = idpUrl;
  }

  public SamlConfigurationProperties idpCertAlias(List<SamlConfigurationPropertyItemsString> idpCertAlias) {
    this.idpCertAlias = idpCertAlias;
    return this;
  }

  public SamlConfigurationProperties addIdpCertAliasItem(SamlConfigurationPropertyItemsString idpCertAliasItem) {
    if (this.idpCertAlias == null) {
      this.idpCertAlias = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.idpCertAlias.add(idpCertAliasItem);
    return this;
  }

   /**
   * The alias of the IdP&#39;s certificate in the global truststore. If this property is empty the authentication handler is disabled.
   * @return idpCertAlias
  **/
  @ApiModelProperty(value = "The alias of the IdP's certificate in the global truststore. If this property is empty the authentication handler is disabled.")
  public List<SamlConfigurationPropertyItemsString> getIdpCertAlias() {
    return idpCertAlias;
  }

  public void setIdpCertAlias(List<SamlConfigurationPropertyItemsString> idpCertAlias) {
    this.idpCertAlias = idpCertAlias;
  }

  public SamlConfigurationProperties idpHttpRedirect(List<SamlConfigurationPropertyItemsBoolean> idpHttpRedirect) {
    this.idpHttpRedirect = idpHttpRedirect;
    return this;
  }

  public SamlConfigurationProperties addIdpHttpRedirectItem(SamlConfigurationPropertyItemsBoolean idpHttpRedirectItem) {
    if (this.idpHttpRedirect == null) {
      this.idpHttpRedirect = new ArrayList<SamlConfigurationPropertyItemsBoolean>();
    }
    this.idpHttpRedirect.add(idpHttpRedirectItem);
    return this;
  }

   /**
   * Use an HTTP Redirect to the IDP URL instead of sending an AuthnRequest-message to request credentials. Use this for IDP initiated authentication.
   * @return idpHttpRedirect
  **/
  @ApiModelProperty(value = "Use an HTTP Redirect to the IDP URL instead of sending an AuthnRequest-message to request credentials. Use this for IDP initiated authentication.")
  public List<SamlConfigurationPropertyItemsBoolean> getIdpHttpRedirect() {
    return idpHttpRedirect;
  }

  public void setIdpHttpRedirect(List<SamlConfigurationPropertyItemsBoolean> idpHttpRedirect) {
    this.idpHttpRedirect = idpHttpRedirect;
  }

  public SamlConfigurationProperties serviceProviderEntityId(List<SamlConfigurationPropertyItemsString> serviceProviderEntityId) {
    this.serviceProviderEntityId = serviceProviderEntityId;
    return this;
  }

  public SamlConfigurationProperties addServiceProviderEntityIdItem(SamlConfigurationPropertyItemsString serviceProviderEntityIdItem) {
    if (this.serviceProviderEntityId == null) {
      this.serviceProviderEntityId = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.serviceProviderEntityId.add(serviceProviderEntityIdItem);
    return this;
  }

   /**
   * ID which uniquely identifies this service provider with the identity provider. If this property is empty the authentication handler is disabled.
   * @return serviceProviderEntityId
  **/
  @ApiModelProperty(value = "ID which uniquely identifies this service provider with the identity provider. If this property is empty the authentication handler is disabled.")
  public List<SamlConfigurationPropertyItemsString> getServiceProviderEntityId() {
    return serviceProviderEntityId;
  }

  public void setServiceProviderEntityId(List<SamlConfigurationPropertyItemsString> serviceProviderEntityId) {
    this.serviceProviderEntityId = serviceProviderEntityId;
  }

  public SamlConfigurationProperties assertionConsumerServiceURL(List<SamlConfigurationPropertyItemsString> assertionConsumerServiceURL) {
    this.assertionConsumerServiceURL = assertionConsumerServiceURL;
    return this;
  }

  public SamlConfigurationProperties addAssertionConsumerServiceURLItem(SamlConfigurationPropertyItemsString assertionConsumerServiceURLItem) {
    if (this.assertionConsumerServiceURL == null) {
      this.assertionConsumerServiceURL = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.assertionConsumerServiceURL.add(assertionConsumerServiceURLItem);
    return this;
  }

   /**
   * The (optional) AssertionConsumerServiceURL attribute of an Authn request specifies the location to which a &lt;Response&gt; message MUST be sent to the requester.
   * @return assertionConsumerServiceURL
  **/
  @ApiModelProperty(value = "The (optional) AssertionConsumerServiceURL attribute of an Authn request specifies the location to which a <Response> message MUST be sent to the requester.")
  public List<SamlConfigurationPropertyItemsString> getAssertionConsumerServiceURL() {
    return assertionConsumerServiceURL;
  }

  public void setAssertionConsumerServiceURL(List<SamlConfigurationPropertyItemsString> assertionConsumerServiceURL) {
    this.assertionConsumerServiceURL = assertionConsumerServiceURL;
  }

  public SamlConfigurationProperties spPrivateKeyAlias(List<SamlConfigurationPropertyItemsString> spPrivateKeyAlias) {
    this.spPrivateKeyAlias = spPrivateKeyAlias;
    return this;
  }

  public SamlConfigurationProperties addSpPrivateKeyAliasItem(SamlConfigurationPropertyItemsString spPrivateKeyAliasItem) {
    if (this.spPrivateKeyAlias == null) {
      this.spPrivateKeyAlias = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.spPrivateKeyAlias.add(spPrivateKeyAliasItem);
    return this;
  }

   /**
   * The alias of the SP&#39;s private key in the key-store of the &#39;authentication-service&#39; system user. If this property is empty the handler will not be able to sign or decrypt messages.
   * @return spPrivateKeyAlias
  **/
  @ApiModelProperty(value = "The alias of the SP's private key in the key-store of the 'authentication-service' system user. If this property is empty the handler will not be able to sign or decrypt messages.")
  public List<SamlConfigurationPropertyItemsString> getSpPrivateKeyAlias() {
    return spPrivateKeyAlias;
  }

  public void setSpPrivateKeyAlias(List<SamlConfigurationPropertyItemsString> spPrivateKeyAlias) {
    this.spPrivateKeyAlias = spPrivateKeyAlias;
  }

  public SamlConfigurationProperties keyStorePassword(List<SamlConfigurationPropertyItemsString> keyStorePassword) {
    this.keyStorePassword = keyStorePassword;
    return this;
  }

  public SamlConfigurationProperties addKeyStorePasswordItem(SamlConfigurationPropertyItemsString keyStorePasswordItem) {
    if (this.keyStorePassword == null) {
      this.keyStorePassword = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.keyStorePassword.add(keyStorePasswordItem);
    return this;
  }

   /**
   * The password of the key-store of the &#39;authentication-service&#39; system user.
   * @return keyStorePassword
  **/
  @ApiModelProperty(value = "The password of the key-store of the 'authentication-service' system user.")
  public List<SamlConfigurationPropertyItemsString> getKeyStorePassword() {
    return keyStorePassword;
  }

  public void setKeyStorePassword(List<SamlConfigurationPropertyItemsString> keyStorePassword) {
    this.keyStorePassword = keyStorePassword;
  }

  public SamlConfigurationProperties defaultRedirectUrl(List<SamlConfigurationPropertyItemsString> defaultRedirectUrl) {
    this.defaultRedirectUrl = defaultRedirectUrl;
    return this;
  }

  public SamlConfigurationProperties addDefaultRedirectUrlItem(SamlConfigurationPropertyItemsString defaultRedirectUrlItem) {
    if (this.defaultRedirectUrl == null) {
      this.defaultRedirectUrl = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.defaultRedirectUrl.add(defaultRedirectUrlItem);
    return this;
  }

   /**
   * The default location to redirect to after successful authentication.
   * @return defaultRedirectUrl
  **/
  @ApiModelProperty(value = "The default location to redirect to after successful authentication.")
  public List<SamlConfigurationPropertyItemsString> getDefaultRedirectUrl() {
    return defaultRedirectUrl;
  }

  public void setDefaultRedirectUrl(List<SamlConfigurationPropertyItemsString> defaultRedirectUrl) {
    this.defaultRedirectUrl = defaultRedirectUrl;
  }

  public SamlConfigurationProperties userIDAttribute(List<SamlConfigurationPropertyItemsString> userIDAttribute) {
    this.userIDAttribute = userIDAttribute;
    return this;
  }

  public SamlConfigurationProperties addUserIDAttributeItem(SamlConfigurationPropertyItemsString userIDAttributeItem) {
    if (this.userIDAttribute == null) {
      this.userIDAttribute = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.userIDAttribute.add(userIDAttributeItem);
    return this;
  }

   /**
   * The name of the attribute containing the user ID used to authenticate and create the user in the CRX repository. Leave empty to use the Subject:NameId.
   * @return userIDAttribute
  **/
  @ApiModelProperty(value = "The name of the attribute containing the user ID used to authenticate and create the user in the CRX repository. Leave empty to use the Subject:NameId.")
  public List<SamlConfigurationPropertyItemsString> getUserIDAttribute() {
    return userIDAttribute;
  }

  public void setUserIDAttribute(List<SamlConfigurationPropertyItemsString> userIDAttribute) {
    this.userIDAttribute = userIDAttribute;
  }

  public SamlConfigurationProperties useEncryption(List<SamlConfigurationPropertyItemsBoolean> useEncryption) {
    this.useEncryption = useEncryption;
    return this;
  }

  public SamlConfigurationProperties addUseEncryptionItem(SamlConfigurationPropertyItemsBoolean useEncryptionItem) {
    if (this.useEncryption == null) {
      this.useEncryption = new ArrayList<SamlConfigurationPropertyItemsBoolean>();
    }
    this.useEncryption.add(useEncryptionItem);
    return this;
  }

   /**
   * Whether or not this authentication handler expects encrypted SAML assertions. If this is enabled the SP&#39;s private key must be provided in the key-store of the &#39;authentication-service&#39; system user (see SP Private Key Alias above).
   * @return useEncryption
  **/
  @ApiModelProperty(value = "Whether or not this authentication handler expects encrypted SAML assertions. If this is enabled the SP's private key must be provided in the key-store of the 'authentication-service' system user (see SP Private Key Alias above).")
  public List<SamlConfigurationPropertyItemsBoolean> getUseEncryption() {
    return useEncryption;
  }

  public void setUseEncryption(List<SamlConfigurationPropertyItemsBoolean> useEncryption) {
    this.useEncryption = useEncryption;
  }

  public SamlConfigurationProperties createUser(List<SamlConfigurationPropertyItemsBoolean> createUser) {
    this.createUser = createUser;
    return this;
  }

  public SamlConfigurationProperties addCreateUserItem(SamlConfigurationPropertyItemsBoolean createUserItem) {
    if (this.createUser == null) {
      this.createUser = new ArrayList<SamlConfigurationPropertyItemsBoolean>();
    }
    this.createUser.add(createUserItem);
    return this;
  }

   /**
   * Whether or not to autocreate nonexisting users in the repository.
   * @return createUser
  **/
  @ApiModelProperty(value = "Whether or not to autocreate nonexisting users in the repository.")
  public List<SamlConfigurationPropertyItemsBoolean> getCreateUser() {
    return createUser;
  }

  public void setCreateUser(List<SamlConfigurationPropertyItemsBoolean> createUser) {
    this.createUser = createUser;
  }

  public SamlConfigurationProperties addGroupMemberships(List<SamlConfigurationPropertyItemsBoolean> addGroupMemberships) {
    this.addGroupMemberships = addGroupMemberships;
    return this;
  }

  public SamlConfigurationProperties addAddGroupMembershipsItem(SamlConfigurationPropertyItemsBoolean addGroupMembershipsItem) {
    if (this.addGroupMemberships == null) {
      this.addGroupMemberships = new ArrayList<SamlConfigurationPropertyItemsBoolean>();
    }
    this.addGroupMemberships.add(addGroupMembershipsItem);
    return this;
  }

   /**
   * Whether or not a user should be automatically added to CRX groups after successful authentication.
   * @return addGroupMemberships
  **/
  @ApiModelProperty(value = "Whether or not a user should be automatically added to CRX groups after successful authentication.")
  public List<SamlConfigurationPropertyItemsBoolean> getAddGroupMemberships() {
    return addGroupMemberships;
  }

  public void setAddGroupMemberships(List<SamlConfigurationPropertyItemsBoolean> addGroupMemberships) {
    this.addGroupMemberships = addGroupMemberships;
  }

  public SamlConfigurationProperties groupMembershipAttribute(List<SamlConfigurationPropertyItemsString> groupMembershipAttribute) {
    this.groupMembershipAttribute = groupMembershipAttribute;
    return this;
  }

  public SamlConfigurationProperties addGroupMembershipAttributeItem(SamlConfigurationPropertyItemsString groupMembershipAttributeItem) {
    if (this.groupMembershipAttribute == null) {
      this.groupMembershipAttribute = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.groupMembershipAttribute.add(groupMembershipAttributeItem);
    return this;
  }

   /**
   * The name of the attribute containing a list of CRX groups this user should be added to.
   * @return groupMembershipAttribute
  **/
  @ApiModelProperty(value = "The name of the attribute containing a list of CRX groups this user should be added to.")
  public List<SamlConfigurationPropertyItemsString> getGroupMembershipAttribute() {
    return groupMembershipAttribute;
  }

  public void setGroupMembershipAttribute(List<SamlConfigurationPropertyItemsString> groupMembershipAttribute) {
    this.groupMembershipAttribute = groupMembershipAttribute;
  }

  public SamlConfigurationProperties defaultGroups(List<SamlConfigurationPropertyItemsArray> defaultGroups) {
    this.defaultGroups = defaultGroups;
    return this;
  }

  public SamlConfigurationProperties addDefaultGroupsItem(SamlConfigurationPropertyItemsArray defaultGroupsItem) {
    if (this.defaultGroups == null) {
      this.defaultGroups = new ArrayList<SamlConfigurationPropertyItemsArray>();
    }
    this.defaultGroups.add(defaultGroupsItem);
    return this;
  }

   /**
   * A list of default CRX groups users are added to after successful authentication.
   * @return defaultGroups
  **/
  @ApiModelProperty(value = "A list of default CRX groups users are added to after successful authentication.")
  public List<SamlConfigurationPropertyItemsArray> getDefaultGroups() {
    return defaultGroups;
  }

  public void setDefaultGroups(List<SamlConfigurationPropertyItemsArray> defaultGroups) {
    this.defaultGroups = defaultGroups;
  }

  public SamlConfigurationProperties nameIdFormat(List<SamlConfigurationPropertyItemsString> nameIdFormat) {
    this.nameIdFormat = nameIdFormat;
    return this;
  }

  public SamlConfigurationProperties addNameIdFormatItem(SamlConfigurationPropertyItemsString nameIdFormatItem) {
    if (this.nameIdFormat == null) {
      this.nameIdFormat = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.nameIdFormat.add(nameIdFormatItem);
    return this;
  }

   /**
   * The value of the NameIDPolicy format parameter to send in the AuthnRequest message.
   * @return nameIdFormat
  **/
  @ApiModelProperty(value = "The value of the NameIDPolicy format parameter to send in the AuthnRequest message.")
  public List<SamlConfigurationPropertyItemsString> getNameIdFormat() {
    return nameIdFormat;
  }

  public void setNameIdFormat(List<SamlConfigurationPropertyItemsString> nameIdFormat) {
    this.nameIdFormat = nameIdFormat;
  }

  public SamlConfigurationProperties synchronizeAttributes(List<SamlConfigurationPropertyItemsArray> synchronizeAttributes) {
    this.synchronizeAttributes = synchronizeAttributes;
    return this;
  }

  public SamlConfigurationProperties addSynchronizeAttributesItem(SamlConfigurationPropertyItemsArray synchronizeAttributesItem) {
    if (this.synchronizeAttributes == null) {
      this.synchronizeAttributes = new ArrayList<SamlConfigurationPropertyItemsArray>();
    }
    this.synchronizeAttributes.add(synchronizeAttributesItem);
    return this;
  }

   /**
   * A list of attribute mappings (in the format \\attributename&#x3D;path/relative/to/user/node\\) which should be stored in the repository on user-synchronization.
   * @return synchronizeAttributes
  **/
  @ApiModelProperty(value = "A list of attribute mappings (in the format \\attributename=path/relative/to/user/node\\) which should be stored in the repository on user-synchronization.")
  public List<SamlConfigurationPropertyItemsArray> getSynchronizeAttributes() {
    return synchronizeAttributes;
  }

  public void setSynchronizeAttributes(List<SamlConfigurationPropertyItemsArray> synchronizeAttributes) {
    this.synchronizeAttributes = synchronizeAttributes;
  }

  public SamlConfigurationProperties handleLogout(List<SamlConfigurationPropertyItemsBoolean> handleLogout) {
    this.handleLogout = handleLogout;
    return this;
  }

  public SamlConfigurationProperties addHandleLogoutItem(SamlConfigurationPropertyItemsBoolean handleLogoutItem) {
    if (this.handleLogout == null) {
      this.handleLogout = new ArrayList<SamlConfigurationPropertyItemsBoolean>();
    }
    this.handleLogout.add(handleLogoutItem);
    return this;
  }

   /**
   * Whether or not logout (dropCredentials) requests will be processed by this handler.
   * @return handleLogout
  **/
  @ApiModelProperty(value = "Whether or not logout (dropCredentials) requests will be processed by this handler.")
  public List<SamlConfigurationPropertyItemsBoolean> getHandleLogout() {
    return handleLogout;
  }

  public void setHandleLogout(List<SamlConfigurationPropertyItemsBoolean> handleLogout) {
    this.handleLogout = handleLogout;
  }

  public SamlConfigurationProperties logoutUrl(List<SamlConfigurationPropertyItemsString> logoutUrl) {
    this.logoutUrl = logoutUrl;
    return this;
  }

  public SamlConfigurationProperties addLogoutUrlItem(SamlConfigurationPropertyItemsString logoutUrlItem) {
    if (this.logoutUrl == null) {
      this.logoutUrl = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.logoutUrl.add(logoutUrlItem);
    return this;
  }

   /**
   * URL of the IDP where the SAML Logout Request should be sent to. If this property is empty the authentication handler won&#39;t handle logouts.
   * @return logoutUrl
  **/
  @ApiModelProperty(value = "URL of the IDP where the SAML Logout Request should be sent to. If this property is empty the authentication handler won't handle logouts.")
  public List<SamlConfigurationPropertyItemsString> getLogoutUrl() {
    return logoutUrl;
  }

  public void setLogoutUrl(List<SamlConfigurationPropertyItemsString> logoutUrl) {
    this.logoutUrl = logoutUrl;
  }

  public SamlConfigurationProperties clockTolerance(List<SamlConfigurationPropertyItemsLong> clockTolerance) {
    this.clockTolerance = clockTolerance;
    return this;
  }

  public SamlConfigurationProperties addClockToleranceItem(SamlConfigurationPropertyItemsLong clockToleranceItem) {
    if (this.clockTolerance == null) {
      this.clockTolerance = new ArrayList<SamlConfigurationPropertyItemsLong>();
    }
    this.clockTolerance.add(clockToleranceItem);
    return this;
  }

   /**
   * Time tolerance in seconds to compensate clock skew between IDP and SP when validating Assertions.
   * @return clockTolerance
  **/
  @ApiModelProperty(value = "Time tolerance in seconds to compensate clock skew between IDP and SP when validating Assertions.")
  public List<SamlConfigurationPropertyItemsLong> getClockTolerance() {
    return clockTolerance;
  }

  public void setClockTolerance(List<SamlConfigurationPropertyItemsLong> clockTolerance) {
    this.clockTolerance = clockTolerance;
  }

  public SamlConfigurationProperties digestMethod(List<SamlConfigurationPropertyItemsString> digestMethod) {
    this.digestMethod = digestMethod;
    return this;
  }

  public SamlConfigurationProperties addDigestMethodItem(SamlConfigurationPropertyItemsString digestMethodItem) {
    if (this.digestMethod == null) {
      this.digestMethod = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.digestMethod.add(digestMethodItem);
    return this;
  }

   /**
   * The digest algorithm to use when signing a SAML message.
   * @return digestMethod
  **/
  @ApiModelProperty(value = "The digest algorithm to use when signing a SAML message.")
  public List<SamlConfigurationPropertyItemsString> getDigestMethod() {
    return digestMethod;
  }

  public void setDigestMethod(List<SamlConfigurationPropertyItemsString> digestMethod) {
    this.digestMethod = digestMethod;
  }

  public SamlConfigurationProperties signatureMethod(List<SamlConfigurationPropertyItemsString> signatureMethod) {
    this.signatureMethod = signatureMethod;
    return this;
  }

  public SamlConfigurationProperties addSignatureMethodItem(SamlConfigurationPropertyItemsString signatureMethodItem) {
    if (this.signatureMethod == null) {
      this.signatureMethod = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.signatureMethod.add(signatureMethodItem);
    return this;
  }

   /**
   * The signature algorithm to use when signing a SAML message.
   * @return signatureMethod
  **/
  @ApiModelProperty(value = "The signature algorithm to use when signing a SAML message.")
  public List<SamlConfigurationPropertyItemsString> getSignatureMethod() {
    return signatureMethod;
  }

  public void setSignatureMethod(List<SamlConfigurationPropertyItemsString> signatureMethod) {
    this.signatureMethod = signatureMethod;
  }

  public SamlConfigurationProperties userIntermediatePath(List<SamlConfigurationPropertyItemsString> userIntermediatePath) {
    this.userIntermediatePath = userIntermediatePath;
    return this;
  }

  public SamlConfigurationProperties addUserIntermediatePathItem(SamlConfigurationPropertyItemsString userIntermediatePathItem) {
    if (this.userIntermediatePath == null) {
      this.userIntermediatePath = new ArrayList<SamlConfigurationPropertyItemsString>();
    }
    this.userIntermediatePath.add(userIntermediatePathItem);
    return this;
  }

   /**
   * User intermediate path to store created users.
   * @return userIntermediatePath
  **/
  @ApiModelProperty(value = "User intermediate path to store created users.")
  public List<SamlConfigurationPropertyItemsString> getUserIntermediatePath() {
    return userIntermediatePath;
  }

  public void setUserIntermediatePath(List<SamlConfigurationPropertyItemsString> userIntermediatePath) {
    this.userIntermediatePath = userIntermediatePath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamlConfigurationProperties samlConfigurationProperties = (SamlConfigurationProperties) o;
    return Objects.equals(this.path, samlConfigurationProperties.path) &&
        Objects.equals(this.serviceRanking, samlConfigurationProperties.serviceRanking) &&
        Objects.equals(this.idpUrl, samlConfigurationProperties.idpUrl) &&
        Objects.equals(this.idpCertAlias, samlConfigurationProperties.idpCertAlias) &&
        Objects.equals(this.idpHttpRedirect, samlConfigurationProperties.idpHttpRedirect) &&
        Objects.equals(this.serviceProviderEntityId, samlConfigurationProperties.serviceProviderEntityId) &&
        Objects.equals(this.assertionConsumerServiceURL, samlConfigurationProperties.assertionConsumerServiceURL) &&
        Objects.equals(this.spPrivateKeyAlias, samlConfigurationProperties.spPrivateKeyAlias) &&
        Objects.equals(this.keyStorePassword, samlConfigurationProperties.keyStorePassword) &&
        Objects.equals(this.defaultRedirectUrl, samlConfigurationProperties.defaultRedirectUrl) &&
        Objects.equals(this.userIDAttribute, samlConfigurationProperties.userIDAttribute) &&
        Objects.equals(this.useEncryption, samlConfigurationProperties.useEncryption) &&
        Objects.equals(this.createUser, samlConfigurationProperties.createUser) &&
        Objects.equals(this.addGroupMemberships, samlConfigurationProperties.addGroupMemberships) &&
        Objects.equals(this.groupMembershipAttribute, samlConfigurationProperties.groupMembershipAttribute) &&
        Objects.equals(this.defaultGroups, samlConfigurationProperties.defaultGroups) &&
        Objects.equals(this.nameIdFormat, samlConfigurationProperties.nameIdFormat) &&
        Objects.equals(this.synchronizeAttributes, samlConfigurationProperties.synchronizeAttributes) &&
        Objects.equals(this.handleLogout, samlConfigurationProperties.handleLogout) &&
        Objects.equals(this.logoutUrl, samlConfigurationProperties.logoutUrl) &&
        Objects.equals(this.clockTolerance, samlConfigurationProperties.clockTolerance) &&
        Objects.equals(this.digestMethod, samlConfigurationProperties.digestMethod) &&
        Objects.equals(this.signatureMethod, samlConfigurationProperties.signatureMethod) &&
        Objects.equals(this.userIntermediatePath, samlConfigurationProperties.userIntermediatePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamlConfigurationProperties {\n");
    
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    serviceRanking: ").append(toIndentedString(serviceRanking)).append("\n");
    sb.append("    idpUrl: ").append(toIndentedString(idpUrl)).append("\n");
    sb.append("    idpCertAlias: ").append(toIndentedString(idpCertAlias)).append("\n");
    sb.append("    idpHttpRedirect: ").append(toIndentedString(idpHttpRedirect)).append("\n");
    sb.append("    serviceProviderEntityId: ").append(toIndentedString(serviceProviderEntityId)).append("\n");
    sb.append("    assertionConsumerServiceURL: ").append(toIndentedString(assertionConsumerServiceURL)).append("\n");
    sb.append("    spPrivateKeyAlias: ").append(toIndentedString(spPrivateKeyAlias)).append("\n");
    sb.append("    keyStorePassword: ").append(toIndentedString(keyStorePassword)).append("\n");
    sb.append("    defaultRedirectUrl: ").append(toIndentedString(defaultRedirectUrl)).append("\n");
    sb.append("    userIDAttribute: ").append(toIndentedString(userIDAttribute)).append("\n");
    sb.append("    useEncryption: ").append(toIndentedString(useEncryption)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    addGroupMemberships: ").append(toIndentedString(addGroupMemberships)).append("\n");
    sb.append("    groupMembershipAttribute: ").append(toIndentedString(groupMembershipAttribute)).append("\n");
    sb.append("    defaultGroups: ").append(toIndentedString(defaultGroups)).append("\n");
    sb.append("    nameIdFormat: ").append(toIndentedString(nameIdFormat)).append("\n");
    sb.append("    synchronizeAttributes: ").append(toIndentedString(synchronizeAttributes)).append("\n");
    sb.append("    handleLogout: ").append(toIndentedString(handleLogout)).append("\n");
    sb.append("    logoutUrl: ").append(toIndentedString(logoutUrl)).append("\n");
    sb.append("    clockTolerance: ").append(toIndentedString(clockTolerance)).append("\n");
    sb.append("    digestMethod: ").append(toIndentedString(digestMethod)).append("\n");
    sb.append("    signatureMethod: ").append(toIndentedString(signatureMethod)).append("\n");
    sb.append("    userIntermediatePath: ").append(toIndentedString(userIntermediatePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

