/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraem4j.api;

import com.shinesolutions.swaggeraem4j.ApiCallback;
import com.shinesolutions.swaggeraem4j.ApiClient;
import com.shinesolutions.swaggeraem4j.ApiException;
import com.shinesolutions.swaggeraem4j.ApiResponse;
import com.shinesolutions.swaggeraem4j.Configuration;
import com.shinesolutions.swaggeraem4j.Pair;
import com.shinesolutions.swaggeraem4j.ProgressRequestBody;
import com.shinesolutions.swaggeraem4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.io.File;
import com.shinesolutions.swaggeraem4j.model.KeystoreInfo;
import com.shinesolutions.swaggeraem4j.model.TruststoreInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SlingApi {
    private ApiClient apiClient;

    public SlingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SlingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAgent
     * @param runmode  (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAgentCall(String runmode, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}"
            .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAgentValidateBeforeCall(String runmode, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling deleteAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAgent(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAgentCall(runmode, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAgent(String runmode, String name) throws ApiException {
        deleteAgentWithHttpInfo(runmode, name);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAgentWithHttpInfo(String runmode, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteAgentValidateBeforeCall(runmode, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAgentAsync(String runmode, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAgentValidateBeforeCall(runmode, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNode
     * @param path  (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNodeCall(String path, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{path}/{name}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNodeValidateBeforeCall(String path, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNodeCall(path, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNode(String path, String name) throws ApiException {
        deleteNodeWithHttpInfo(path, name);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNodeWithHttpInfo(String path, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteNodeValidateBeforeCall(path, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNodeAsync(String path, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNodeValidateBeforeCall(path, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAgent
     * @param runmode  (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentCall(String runmode, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}"
            .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentValidateBeforeCall(String runmode, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling getAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getAgent(Async)");
        }
        

        com.squareup.okhttp.Call call = getAgentCall(runmode, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAgent(String runmode, String name) throws ApiException {
        getAgentWithHttpInfo(runmode, name);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAgentWithHttpInfo(String runmode, String name) throws ApiException {
        com.squareup.okhttp.Call call = getAgentValidateBeforeCall(runmode, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentAsync(String runmode, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentValidateBeforeCall(runmode, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAgents
     * @param runmode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentsCall(String runmode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}.-1.json"
            .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentsValidateBeforeCall(String runmode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling getAgents(Async)");
        }
        

        com.squareup.okhttp.Call call = getAgentsCall(runmode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getAgents(String runmode) throws ApiException {
        ApiResponse<String> resp = getAgentsWithHttpInfo(runmode);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getAgentsWithHttpInfo(String runmode) throws ApiException {
        com.squareup.okhttp.Call call = getAgentsValidateBeforeCall(runmode, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentsAsync(String runmode, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentsValidateBeforeCall(runmode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthorizableKeystore
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthorizableKeystoreCall(String intermediatePath, String authorizableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{intermediatePath}/{authorizableId}.ks.json"
            .replaceAll("\\{" + "intermediatePath" + "\\}", apiClient.escapeString(intermediatePath.toString()))
            .replaceAll("\\{" + "authorizableId" + "\\}", apiClient.escapeString(authorizableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthorizableKeystoreValidateBeforeCall(String intermediatePath, String authorizableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling getAuthorizableKeystore(Async)");
        }
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling getAuthorizableKeystore(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthorizableKeystoreCall(intermediatePath, authorizableId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return KeystoreInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeystoreInfo getAuthorizableKeystore(String intermediatePath, String authorizableId) throws ApiException {
        ApiResponse<KeystoreInfo> resp = getAuthorizableKeystoreWithHttpInfo(intermediatePath, authorizableId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return ApiResponse&lt;KeystoreInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeystoreInfo> getAuthorizableKeystoreWithHttpInfo(String intermediatePath, String authorizableId) throws ApiException {
        com.squareup.okhttp.Call call = getAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, null, null);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthorizableKeystoreAsync(String intermediatePath, String authorizableId, final ApiCallback<KeystoreInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKeystore
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKeystoreCall(String intermediatePath, String authorizableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{intermediatePath}/{authorizableId}/keystore/store.p12"
            .replaceAll("\\{" + "intermediatePath" + "\\}", apiClient.escapeString(intermediatePath.toString()))
            .replaceAll("\\{" + "authorizableId" + "\\}", apiClient.escapeString(authorizableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKeystoreValidateBeforeCall(String intermediatePath, String authorizableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling getKeystore(Async)");
        }
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling getKeystore(Async)");
        }
        

        com.squareup.okhttp.Call call = getKeystoreCall(intermediatePath, authorizableId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getKeystore(String intermediatePath, String authorizableId) throws ApiException {
        ApiResponse<File> resp = getKeystoreWithHttpInfo(intermediatePath, authorizableId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getKeystoreWithHttpInfo(String intermediatePath, String authorizableId) throws ApiException {
        com.squareup.okhttp.Call call = getKeystoreValidateBeforeCall(intermediatePath, authorizableId, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKeystoreAsync(String intermediatePath, String authorizableId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKeystoreValidateBeforeCall(intermediatePath, authorizableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNode
     * @param path  (required)
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeCall(String path, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{path}/{name}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeValidateBeforeCall(String path, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNode(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeCall(path, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getNode(String path, String name) throws ApiException {
        getNodeWithHttpInfo(path, name);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getNodeWithHttpInfo(String path, String name) throws ApiException {
        com.squareup.okhttp.Call call = getNodeValidateBeforeCall(path, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeAsync(String path, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeValidateBeforeCall(path, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPackage
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackageCall(String group, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/packages/{group}/{name}-{version}.zip"
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackageValidateBeforeCall(String group, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPackage(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackageCall(group, name, version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getPackage(String group, String name, String version) throws ApiException {
        ApiResponse<File> resp = getPackageWithHttpInfo(group, name, version);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getPackageWithHttpInfo(String group, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = getPackageValidateBeforeCall(group, name, version, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackageAsync(String group, String name, String version, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackageValidateBeforeCall(group, name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPackageFilter
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPackageFilterCall(String group, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json"
            .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPackageFilterValidateBeforeCall(String group, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getPackageFilter(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPackageFilter(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getPackageFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = getPackageFilterCall(group, name, version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getPackageFilter(String group, String name, String version) throws ApiException {
        ApiResponse<String> resp = getPackageFilterWithHttpInfo(group, name, version);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getPackageFilterWithHttpInfo(String group, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = getPackageFilterValidateBeforeCall(group, name, version, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param group  (required)
     * @param name  (required)
     * @param version  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPackageFilterAsync(String group, String name, String version, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPackageFilterValidateBeforeCall(group, name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuery
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQueryCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/bin/querybuilder.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (pLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("p.limit", pLimit));
        if (_1property != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("1_property", _1property));
        if (_1propertyValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("1_property.value", _1propertyValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQueryValidateBeforeCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getQuery(Async)");
        }
        
        // verify the required parameter 'pLimit' is set
        if (pLimit == null) {
            throw new ApiException("Missing the required parameter 'pLimit' when calling getQuery(Async)");
        }
        
        // verify the required parameter '_1property' is set
        if (_1property == null) {
            throw new ApiException("Missing the required parameter '_1property' when calling getQuery(Async)");
        }
        
        // verify the required parameter '_1propertyValue' is set
        if (_1propertyValue == null) {
            throw new ApiException("Missing the required parameter '_1propertyValue' when calling getQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = getQueryCall(path, pLimit, _1property, _1propertyValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getQuery(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        ApiResponse<String> resp = getQueryWithHttpInfo(path, pLimit, _1property, _1propertyValue);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getQueryWithHttpInfo(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        com.squareup.okhttp.Call call = getQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQueryAsync(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTruststore
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTruststoreCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/truststore/truststore.p12";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTruststoreValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTruststoreCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getTruststore() throws ApiException {
        ApiResponse<File> resp = getTruststoreWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getTruststoreWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTruststoreValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTruststoreAsync(final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTruststoreValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTruststoreInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTruststoreInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/libs/granite/security/truststore.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTruststoreInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTruststoreInfoCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return TruststoreInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TruststoreInfo getTruststoreInfo() throws ApiException {
        ApiResponse<TruststoreInfo> resp = getTruststoreInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;TruststoreInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TruststoreInfo> getTruststoreInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTruststoreInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TruststoreInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTruststoreInfoAsync(final ApiCallback<TruststoreInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTruststoreInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TruststoreInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAgent
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentSlashCqColonDistribute  (optional)
     * @param jcrColonContentSlashCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentSlashCqColonName  (optional)
     * @param jcrColonContentSlashCqColonTemplate  (optional)
     * @param jcrColonContentSlashEnabled  (optional)
     * @param jcrColonContentSlashJcrColonDescription  (optional)
     * @param jcrColonContentSlashJcrColonLastModified  (optional)
     * @param jcrColonContentSlashJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentSlashJcrColonMixinTypes  (optional)
     * @param jcrColonContentSlashJcrColonTitle  (optional)
     * @param jcrColonContentSlashLogLevel  (optional)
     * @param jcrColonContentSlashNoStatusUpdate  (optional)
     * @param jcrColonContentSlashNoVersioning  (optional)
     * @param jcrColonContentSlashProtocolConnectTimeout  (optional)
     * @param jcrColonContentSlashProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentSlashProtocolHTTPExpired  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeaders  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentSlashProtocolHTTPMethod  (optional)
     * @param jcrColonContentSlashProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentSlashProtocolInterface  (optional)
     * @param jcrColonContentSlashProtocolSocketTimeout  (optional)
     * @param jcrColonContentSlashProtocolVersion  (optional)
     * @param jcrColonContentSlashProxyNTLMDomain  (optional)
     * @param jcrColonContentSlashProxyNTLMHost  (optional)
     * @param jcrColonContentSlashProxyHost  (optional)
     * @param jcrColonContentSlashProxyPassword  (optional)
     * @param jcrColonContentSlashProxyPort  (optional)
     * @param jcrColonContentSlashProxyUser  (optional)
     * @param jcrColonContentSlashQueueBatchMaxSize  (optional)
     * @param jcrColonContentSlashQueueBatchMode  (optional)
     * @param jcrColonContentSlashQueueBatchWaitTime  (optional)
     * @param jcrColonContentSlashRetryDelay  (optional)
     * @param jcrColonContentSlashReverseReplication  (optional)
     * @param jcrColonContentSlashSerializationType  (optional)
     * @param jcrColonContentSlashSlingColonResourceType  (optional)
     * @param jcrColonContentSlashSsl  (optional)
     * @param jcrColonContentSlashTransportNTLMDomain  (optional)
     * @param jcrColonContentSlashTransportNTLMHost  (optional)
     * @param jcrColonContentSlashTransportPassword  (optional)
     * @param jcrColonContentSlashTransportUri  (optional)
     * @param jcrColonContentSlashTransportUser  (optional)
     * @param jcrColonContentSlashTriggerDistribute  (optional)
     * @param jcrColonContentSlashTriggerModified  (optional)
     * @param jcrColonContentSlashTriggerOnOffTime  (optional)
     * @param jcrColonContentSlashTriggerReceive  (optional)
     * @param jcrColonContentSlashTriggerSpecific  (optional)
     * @param jcrColonContentSlashUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAgentCall(String runmode, String name, Boolean jcrColonContentSlashCqColonDistribute, String jcrColonContentSlashCqColonDistributeAtTypeHint, String jcrColonContentSlashCqColonName, String jcrColonContentSlashCqColonTemplate, Boolean jcrColonContentSlashEnabled, String jcrColonContentSlashJcrColonDescription, String jcrColonContentSlashJcrColonLastModified, String jcrColonContentSlashJcrColonLastModifiedBy, String jcrColonContentSlashJcrColonMixinTypes, String jcrColonContentSlashJcrColonTitle, String jcrColonContentSlashLogLevel, Boolean jcrColonContentSlashNoStatusUpdate, Boolean jcrColonContentSlashNoVersioning, BigDecimal jcrColonContentSlashProtocolConnectTimeout, Boolean jcrColonContentSlashProtocolHTTPConnectionClosed, String jcrColonContentSlashProtocolHTTPExpired, List<String> jcrColonContentSlashProtocolHTTPHeaders, String jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, String jcrColonContentSlashProtocolHTTPMethod, Boolean jcrColonContentSlashProtocolHTTPSRelaxed, String jcrColonContentSlashProtocolInterface, BigDecimal jcrColonContentSlashProtocolSocketTimeout, String jcrColonContentSlashProtocolVersion, String jcrColonContentSlashProxyNTLMDomain, String jcrColonContentSlashProxyNTLMHost, String jcrColonContentSlashProxyHost, String jcrColonContentSlashProxyPassword, BigDecimal jcrColonContentSlashProxyPort, String jcrColonContentSlashProxyUser, BigDecimal jcrColonContentSlashQueueBatchMaxSize, String jcrColonContentSlashQueueBatchMode, BigDecimal jcrColonContentSlashQueueBatchWaitTime, String jcrColonContentSlashRetryDelay, Boolean jcrColonContentSlashReverseReplication, String jcrColonContentSlashSerializationType, String jcrColonContentSlashSlingColonResourceType, String jcrColonContentSlashSsl, String jcrColonContentSlashTransportNTLMDomain, String jcrColonContentSlashTransportNTLMHost, String jcrColonContentSlashTransportPassword, String jcrColonContentSlashTransportUri, String jcrColonContentSlashTransportUser, Boolean jcrColonContentSlashTriggerDistribute, Boolean jcrColonContentSlashTriggerModified, Boolean jcrColonContentSlashTriggerOnOffTime, Boolean jcrColonContentSlashTriggerReceive, Boolean jcrColonContentSlashTriggerSpecific, String jcrColonContentSlashUserId, String jcrColonPrimaryType, String colonOperation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/replication/agents.{runmode}/{name}"
            .replaceAll("\\{" + "runmode" + "\\}", apiClient.escapeString(runmode.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jcrColonContentSlashCqColonDistribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/cq:distribute", jcrColonContentSlashCqColonDistribute));
        if (jcrColonContentSlashCqColonDistributeAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/cq:distribute@TypeHint", jcrColonContentSlashCqColonDistributeAtTypeHint));
        if (jcrColonContentSlashCqColonName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/cq:name", jcrColonContentSlashCqColonName));
        if (jcrColonContentSlashCqColonTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/cq:template", jcrColonContentSlashCqColonTemplate));
        if (jcrColonContentSlashEnabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/enabled", jcrColonContentSlashEnabled));
        if (jcrColonContentSlashJcrColonDescription != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/jcr:description", jcrColonContentSlashJcrColonDescription));
        if (jcrColonContentSlashJcrColonLastModified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/jcr:lastModified", jcrColonContentSlashJcrColonLastModified));
        if (jcrColonContentSlashJcrColonLastModifiedBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/jcr:lastModifiedBy", jcrColonContentSlashJcrColonLastModifiedBy));
        if (jcrColonContentSlashJcrColonMixinTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/jcr:mixinTypes", jcrColonContentSlashJcrColonMixinTypes));
        if (jcrColonContentSlashJcrColonTitle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/jcr:title", jcrColonContentSlashJcrColonTitle));
        if (jcrColonContentSlashLogLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/logLevel", jcrColonContentSlashLogLevel));
        if (jcrColonContentSlashNoStatusUpdate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/noStatusUpdate", jcrColonContentSlashNoStatusUpdate));
        if (jcrColonContentSlashNoVersioning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/noVersioning", jcrColonContentSlashNoVersioning));
        if (jcrColonContentSlashProtocolConnectTimeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolConnectTimeout", jcrColonContentSlashProtocolConnectTimeout));
        if (jcrColonContentSlashProtocolHTTPConnectionClosed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolHTTPConnectionClosed", jcrColonContentSlashProtocolHTTPConnectionClosed));
        if (jcrColonContentSlashProtocolHTTPExpired != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolHTTPExpired", jcrColonContentSlashProtocolHTTPExpired));
        if (jcrColonContentSlashProtocolHTTPHeaders != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "jcr:content/protocolHTTPHeaders", jcrColonContentSlashProtocolHTTPHeaders));
        if (jcrColonContentSlashProtocolHTTPHeadersAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolHTTPHeaders@TypeHint", jcrColonContentSlashProtocolHTTPHeadersAtTypeHint));
        if (jcrColonContentSlashProtocolHTTPMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolHTTPMethod", jcrColonContentSlashProtocolHTTPMethod));
        if (jcrColonContentSlashProtocolHTTPSRelaxed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolHTTPSRelaxed", jcrColonContentSlashProtocolHTTPSRelaxed));
        if (jcrColonContentSlashProtocolInterface != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolInterface", jcrColonContentSlashProtocolInterface));
        if (jcrColonContentSlashProtocolSocketTimeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolSocketTimeout", jcrColonContentSlashProtocolSocketTimeout));
        if (jcrColonContentSlashProtocolVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/protocolVersion", jcrColonContentSlashProtocolVersion));
        if (jcrColonContentSlashProxyNTLMDomain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/proxyNTLMDomain", jcrColonContentSlashProxyNTLMDomain));
        if (jcrColonContentSlashProxyNTLMHost != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/proxyNTLMHost", jcrColonContentSlashProxyNTLMHost));
        if (jcrColonContentSlashProxyHost != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/proxyHost", jcrColonContentSlashProxyHost));
        if (jcrColonContentSlashProxyPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/proxyPassword", jcrColonContentSlashProxyPassword));
        if (jcrColonContentSlashProxyPort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/proxyPort", jcrColonContentSlashProxyPort));
        if (jcrColonContentSlashProxyUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/proxyUser", jcrColonContentSlashProxyUser));
        if (jcrColonContentSlashQueueBatchMaxSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/queueBatchMaxSize", jcrColonContentSlashQueueBatchMaxSize));
        if (jcrColonContentSlashQueueBatchMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/queueBatchMode", jcrColonContentSlashQueueBatchMode));
        if (jcrColonContentSlashQueueBatchWaitTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/queueBatchWaitTime", jcrColonContentSlashQueueBatchWaitTime));
        if (jcrColonContentSlashRetryDelay != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/retryDelay", jcrColonContentSlashRetryDelay));
        if (jcrColonContentSlashReverseReplication != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/reverseReplication", jcrColonContentSlashReverseReplication));
        if (jcrColonContentSlashSerializationType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/serializationType", jcrColonContentSlashSerializationType));
        if (jcrColonContentSlashSlingColonResourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/sling:resourceType", jcrColonContentSlashSlingColonResourceType));
        if (jcrColonContentSlashSsl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/ssl", jcrColonContentSlashSsl));
        if (jcrColonContentSlashTransportNTLMDomain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/transportNTLMDomain", jcrColonContentSlashTransportNTLMDomain));
        if (jcrColonContentSlashTransportNTLMHost != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/transportNTLMHost", jcrColonContentSlashTransportNTLMHost));
        if (jcrColonContentSlashTransportPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/transportPassword", jcrColonContentSlashTransportPassword));
        if (jcrColonContentSlashTransportUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/transportUri", jcrColonContentSlashTransportUri));
        if (jcrColonContentSlashTransportUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/transportUser", jcrColonContentSlashTransportUser));
        if (jcrColonContentSlashTriggerDistribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/triggerDistribute", jcrColonContentSlashTriggerDistribute));
        if (jcrColonContentSlashTriggerModified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/triggerModified", jcrColonContentSlashTriggerModified));
        if (jcrColonContentSlashTriggerOnOffTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/triggerOnOffTime", jcrColonContentSlashTriggerOnOffTime));
        if (jcrColonContentSlashTriggerReceive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/triggerReceive", jcrColonContentSlashTriggerReceive));
        if (jcrColonContentSlashTriggerSpecific != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/triggerSpecific", jcrColonContentSlashTriggerSpecific));
        if (jcrColonContentSlashUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:content/userId", jcrColonContentSlashUserId));
        if (jcrColonPrimaryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:primaryType", jcrColonPrimaryType));
        if (colonOperation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair(":operation", colonOperation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAgentValidateBeforeCall(String runmode, String name, Boolean jcrColonContentSlashCqColonDistribute, String jcrColonContentSlashCqColonDistributeAtTypeHint, String jcrColonContentSlashCqColonName, String jcrColonContentSlashCqColonTemplate, Boolean jcrColonContentSlashEnabled, String jcrColonContentSlashJcrColonDescription, String jcrColonContentSlashJcrColonLastModified, String jcrColonContentSlashJcrColonLastModifiedBy, String jcrColonContentSlashJcrColonMixinTypes, String jcrColonContentSlashJcrColonTitle, String jcrColonContentSlashLogLevel, Boolean jcrColonContentSlashNoStatusUpdate, Boolean jcrColonContentSlashNoVersioning, BigDecimal jcrColonContentSlashProtocolConnectTimeout, Boolean jcrColonContentSlashProtocolHTTPConnectionClosed, String jcrColonContentSlashProtocolHTTPExpired, List<String> jcrColonContentSlashProtocolHTTPHeaders, String jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, String jcrColonContentSlashProtocolHTTPMethod, Boolean jcrColonContentSlashProtocolHTTPSRelaxed, String jcrColonContentSlashProtocolInterface, BigDecimal jcrColonContentSlashProtocolSocketTimeout, String jcrColonContentSlashProtocolVersion, String jcrColonContentSlashProxyNTLMDomain, String jcrColonContentSlashProxyNTLMHost, String jcrColonContentSlashProxyHost, String jcrColonContentSlashProxyPassword, BigDecimal jcrColonContentSlashProxyPort, String jcrColonContentSlashProxyUser, BigDecimal jcrColonContentSlashQueueBatchMaxSize, String jcrColonContentSlashQueueBatchMode, BigDecimal jcrColonContentSlashQueueBatchWaitTime, String jcrColonContentSlashRetryDelay, Boolean jcrColonContentSlashReverseReplication, String jcrColonContentSlashSerializationType, String jcrColonContentSlashSlingColonResourceType, String jcrColonContentSlashSsl, String jcrColonContentSlashTransportNTLMDomain, String jcrColonContentSlashTransportNTLMHost, String jcrColonContentSlashTransportPassword, String jcrColonContentSlashTransportUri, String jcrColonContentSlashTransportUser, Boolean jcrColonContentSlashTriggerDistribute, Boolean jcrColonContentSlashTriggerModified, Boolean jcrColonContentSlashTriggerOnOffTime, Boolean jcrColonContentSlashTriggerReceive, Boolean jcrColonContentSlashTriggerSpecific, String jcrColonContentSlashUserId, String jcrColonPrimaryType, String colonOperation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'runmode' is set
        if (runmode == null) {
            throw new ApiException("Missing the required parameter 'runmode' when calling postAgent(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAgent(Async)");
        }
        

        com.squareup.okhttp.Call call = postAgentCall(runmode, name, jcrColonContentSlashCqColonDistribute, jcrColonContentSlashCqColonDistributeAtTypeHint, jcrColonContentSlashCqColonName, jcrColonContentSlashCqColonTemplate, jcrColonContentSlashEnabled, jcrColonContentSlashJcrColonDescription, jcrColonContentSlashJcrColonLastModified, jcrColonContentSlashJcrColonLastModifiedBy, jcrColonContentSlashJcrColonMixinTypes, jcrColonContentSlashJcrColonTitle, jcrColonContentSlashLogLevel, jcrColonContentSlashNoStatusUpdate, jcrColonContentSlashNoVersioning, jcrColonContentSlashProtocolConnectTimeout, jcrColonContentSlashProtocolHTTPConnectionClosed, jcrColonContentSlashProtocolHTTPExpired, jcrColonContentSlashProtocolHTTPHeaders, jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, jcrColonContentSlashProtocolHTTPMethod, jcrColonContentSlashProtocolHTTPSRelaxed, jcrColonContentSlashProtocolInterface, jcrColonContentSlashProtocolSocketTimeout, jcrColonContentSlashProtocolVersion, jcrColonContentSlashProxyNTLMDomain, jcrColonContentSlashProxyNTLMHost, jcrColonContentSlashProxyHost, jcrColonContentSlashProxyPassword, jcrColonContentSlashProxyPort, jcrColonContentSlashProxyUser, jcrColonContentSlashQueueBatchMaxSize, jcrColonContentSlashQueueBatchMode, jcrColonContentSlashQueueBatchWaitTime, jcrColonContentSlashRetryDelay, jcrColonContentSlashReverseReplication, jcrColonContentSlashSerializationType, jcrColonContentSlashSlingColonResourceType, jcrColonContentSlashSsl, jcrColonContentSlashTransportNTLMDomain, jcrColonContentSlashTransportNTLMHost, jcrColonContentSlashTransportPassword, jcrColonContentSlashTransportUri, jcrColonContentSlashTransportUser, jcrColonContentSlashTriggerDistribute, jcrColonContentSlashTriggerModified, jcrColonContentSlashTriggerOnOffTime, jcrColonContentSlashTriggerReceive, jcrColonContentSlashTriggerSpecific, jcrColonContentSlashUserId, jcrColonPrimaryType, colonOperation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentSlashCqColonDistribute  (optional)
     * @param jcrColonContentSlashCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentSlashCqColonName  (optional)
     * @param jcrColonContentSlashCqColonTemplate  (optional)
     * @param jcrColonContentSlashEnabled  (optional)
     * @param jcrColonContentSlashJcrColonDescription  (optional)
     * @param jcrColonContentSlashJcrColonLastModified  (optional)
     * @param jcrColonContentSlashJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentSlashJcrColonMixinTypes  (optional)
     * @param jcrColonContentSlashJcrColonTitle  (optional)
     * @param jcrColonContentSlashLogLevel  (optional)
     * @param jcrColonContentSlashNoStatusUpdate  (optional)
     * @param jcrColonContentSlashNoVersioning  (optional)
     * @param jcrColonContentSlashProtocolConnectTimeout  (optional)
     * @param jcrColonContentSlashProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentSlashProtocolHTTPExpired  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeaders  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentSlashProtocolHTTPMethod  (optional)
     * @param jcrColonContentSlashProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentSlashProtocolInterface  (optional)
     * @param jcrColonContentSlashProtocolSocketTimeout  (optional)
     * @param jcrColonContentSlashProtocolVersion  (optional)
     * @param jcrColonContentSlashProxyNTLMDomain  (optional)
     * @param jcrColonContentSlashProxyNTLMHost  (optional)
     * @param jcrColonContentSlashProxyHost  (optional)
     * @param jcrColonContentSlashProxyPassword  (optional)
     * @param jcrColonContentSlashProxyPort  (optional)
     * @param jcrColonContentSlashProxyUser  (optional)
     * @param jcrColonContentSlashQueueBatchMaxSize  (optional)
     * @param jcrColonContentSlashQueueBatchMode  (optional)
     * @param jcrColonContentSlashQueueBatchWaitTime  (optional)
     * @param jcrColonContentSlashRetryDelay  (optional)
     * @param jcrColonContentSlashReverseReplication  (optional)
     * @param jcrColonContentSlashSerializationType  (optional)
     * @param jcrColonContentSlashSlingColonResourceType  (optional)
     * @param jcrColonContentSlashSsl  (optional)
     * @param jcrColonContentSlashTransportNTLMDomain  (optional)
     * @param jcrColonContentSlashTransportNTLMHost  (optional)
     * @param jcrColonContentSlashTransportPassword  (optional)
     * @param jcrColonContentSlashTransportUri  (optional)
     * @param jcrColonContentSlashTransportUser  (optional)
     * @param jcrColonContentSlashTriggerDistribute  (optional)
     * @param jcrColonContentSlashTriggerModified  (optional)
     * @param jcrColonContentSlashTriggerOnOffTime  (optional)
     * @param jcrColonContentSlashTriggerReceive  (optional)
     * @param jcrColonContentSlashTriggerSpecific  (optional)
     * @param jcrColonContentSlashUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAgent(String runmode, String name, Boolean jcrColonContentSlashCqColonDistribute, String jcrColonContentSlashCqColonDistributeAtTypeHint, String jcrColonContentSlashCqColonName, String jcrColonContentSlashCqColonTemplate, Boolean jcrColonContentSlashEnabled, String jcrColonContentSlashJcrColonDescription, String jcrColonContentSlashJcrColonLastModified, String jcrColonContentSlashJcrColonLastModifiedBy, String jcrColonContentSlashJcrColonMixinTypes, String jcrColonContentSlashJcrColonTitle, String jcrColonContentSlashLogLevel, Boolean jcrColonContentSlashNoStatusUpdate, Boolean jcrColonContentSlashNoVersioning, BigDecimal jcrColonContentSlashProtocolConnectTimeout, Boolean jcrColonContentSlashProtocolHTTPConnectionClosed, String jcrColonContentSlashProtocolHTTPExpired, List<String> jcrColonContentSlashProtocolHTTPHeaders, String jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, String jcrColonContentSlashProtocolHTTPMethod, Boolean jcrColonContentSlashProtocolHTTPSRelaxed, String jcrColonContentSlashProtocolInterface, BigDecimal jcrColonContentSlashProtocolSocketTimeout, String jcrColonContentSlashProtocolVersion, String jcrColonContentSlashProxyNTLMDomain, String jcrColonContentSlashProxyNTLMHost, String jcrColonContentSlashProxyHost, String jcrColonContentSlashProxyPassword, BigDecimal jcrColonContentSlashProxyPort, String jcrColonContentSlashProxyUser, BigDecimal jcrColonContentSlashQueueBatchMaxSize, String jcrColonContentSlashQueueBatchMode, BigDecimal jcrColonContentSlashQueueBatchWaitTime, String jcrColonContentSlashRetryDelay, Boolean jcrColonContentSlashReverseReplication, String jcrColonContentSlashSerializationType, String jcrColonContentSlashSlingColonResourceType, String jcrColonContentSlashSsl, String jcrColonContentSlashTransportNTLMDomain, String jcrColonContentSlashTransportNTLMHost, String jcrColonContentSlashTransportPassword, String jcrColonContentSlashTransportUri, String jcrColonContentSlashTransportUser, Boolean jcrColonContentSlashTriggerDistribute, Boolean jcrColonContentSlashTriggerModified, Boolean jcrColonContentSlashTriggerOnOffTime, Boolean jcrColonContentSlashTriggerReceive, Boolean jcrColonContentSlashTriggerSpecific, String jcrColonContentSlashUserId, String jcrColonPrimaryType, String colonOperation) throws ApiException {
        postAgentWithHttpInfo(runmode, name, jcrColonContentSlashCqColonDistribute, jcrColonContentSlashCqColonDistributeAtTypeHint, jcrColonContentSlashCqColonName, jcrColonContentSlashCqColonTemplate, jcrColonContentSlashEnabled, jcrColonContentSlashJcrColonDescription, jcrColonContentSlashJcrColonLastModified, jcrColonContentSlashJcrColonLastModifiedBy, jcrColonContentSlashJcrColonMixinTypes, jcrColonContentSlashJcrColonTitle, jcrColonContentSlashLogLevel, jcrColonContentSlashNoStatusUpdate, jcrColonContentSlashNoVersioning, jcrColonContentSlashProtocolConnectTimeout, jcrColonContentSlashProtocolHTTPConnectionClosed, jcrColonContentSlashProtocolHTTPExpired, jcrColonContentSlashProtocolHTTPHeaders, jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, jcrColonContentSlashProtocolHTTPMethod, jcrColonContentSlashProtocolHTTPSRelaxed, jcrColonContentSlashProtocolInterface, jcrColonContentSlashProtocolSocketTimeout, jcrColonContentSlashProtocolVersion, jcrColonContentSlashProxyNTLMDomain, jcrColonContentSlashProxyNTLMHost, jcrColonContentSlashProxyHost, jcrColonContentSlashProxyPassword, jcrColonContentSlashProxyPort, jcrColonContentSlashProxyUser, jcrColonContentSlashQueueBatchMaxSize, jcrColonContentSlashQueueBatchMode, jcrColonContentSlashQueueBatchWaitTime, jcrColonContentSlashRetryDelay, jcrColonContentSlashReverseReplication, jcrColonContentSlashSerializationType, jcrColonContentSlashSlingColonResourceType, jcrColonContentSlashSsl, jcrColonContentSlashTransportNTLMDomain, jcrColonContentSlashTransportNTLMHost, jcrColonContentSlashTransportPassword, jcrColonContentSlashTransportUri, jcrColonContentSlashTransportUser, jcrColonContentSlashTriggerDistribute, jcrColonContentSlashTriggerModified, jcrColonContentSlashTriggerOnOffTime, jcrColonContentSlashTriggerReceive, jcrColonContentSlashTriggerSpecific, jcrColonContentSlashUserId, jcrColonPrimaryType, colonOperation);
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentSlashCqColonDistribute  (optional)
     * @param jcrColonContentSlashCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentSlashCqColonName  (optional)
     * @param jcrColonContentSlashCqColonTemplate  (optional)
     * @param jcrColonContentSlashEnabled  (optional)
     * @param jcrColonContentSlashJcrColonDescription  (optional)
     * @param jcrColonContentSlashJcrColonLastModified  (optional)
     * @param jcrColonContentSlashJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentSlashJcrColonMixinTypes  (optional)
     * @param jcrColonContentSlashJcrColonTitle  (optional)
     * @param jcrColonContentSlashLogLevel  (optional)
     * @param jcrColonContentSlashNoStatusUpdate  (optional)
     * @param jcrColonContentSlashNoVersioning  (optional)
     * @param jcrColonContentSlashProtocolConnectTimeout  (optional)
     * @param jcrColonContentSlashProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentSlashProtocolHTTPExpired  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeaders  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentSlashProtocolHTTPMethod  (optional)
     * @param jcrColonContentSlashProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentSlashProtocolInterface  (optional)
     * @param jcrColonContentSlashProtocolSocketTimeout  (optional)
     * @param jcrColonContentSlashProtocolVersion  (optional)
     * @param jcrColonContentSlashProxyNTLMDomain  (optional)
     * @param jcrColonContentSlashProxyNTLMHost  (optional)
     * @param jcrColonContentSlashProxyHost  (optional)
     * @param jcrColonContentSlashProxyPassword  (optional)
     * @param jcrColonContentSlashProxyPort  (optional)
     * @param jcrColonContentSlashProxyUser  (optional)
     * @param jcrColonContentSlashQueueBatchMaxSize  (optional)
     * @param jcrColonContentSlashQueueBatchMode  (optional)
     * @param jcrColonContentSlashQueueBatchWaitTime  (optional)
     * @param jcrColonContentSlashRetryDelay  (optional)
     * @param jcrColonContentSlashReverseReplication  (optional)
     * @param jcrColonContentSlashSerializationType  (optional)
     * @param jcrColonContentSlashSlingColonResourceType  (optional)
     * @param jcrColonContentSlashSsl  (optional)
     * @param jcrColonContentSlashTransportNTLMDomain  (optional)
     * @param jcrColonContentSlashTransportNTLMHost  (optional)
     * @param jcrColonContentSlashTransportPassword  (optional)
     * @param jcrColonContentSlashTransportUri  (optional)
     * @param jcrColonContentSlashTransportUser  (optional)
     * @param jcrColonContentSlashTriggerDistribute  (optional)
     * @param jcrColonContentSlashTriggerModified  (optional)
     * @param jcrColonContentSlashTriggerOnOffTime  (optional)
     * @param jcrColonContentSlashTriggerReceive  (optional)
     * @param jcrColonContentSlashTriggerSpecific  (optional)
     * @param jcrColonContentSlashUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAgentWithHttpInfo(String runmode, String name, Boolean jcrColonContentSlashCqColonDistribute, String jcrColonContentSlashCqColonDistributeAtTypeHint, String jcrColonContentSlashCqColonName, String jcrColonContentSlashCqColonTemplate, Boolean jcrColonContentSlashEnabled, String jcrColonContentSlashJcrColonDescription, String jcrColonContentSlashJcrColonLastModified, String jcrColonContentSlashJcrColonLastModifiedBy, String jcrColonContentSlashJcrColonMixinTypes, String jcrColonContentSlashJcrColonTitle, String jcrColonContentSlashLogLevel, Boolean jcrColonContentSlashNoStatusUpdate, Boolean jcrColonContentSlashNoVersioning, BigDecimal jcrColonContentSlashProtocolConnectTimeout, Boolean jcrColonContentSlashProtocolHTTPConnectionClosed, String jcrColonContentSlashProtocolHTTPExpired, List<String> jcrColonContentSlashProtocolHTTPHeaders, String jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, String jcrColonContentSlashProtocolHTTPMethod, Boolean jcrColonContentSlashProtocolHTTPSRelaxed, String jcrColonContentSlashProtocolInterface, BigDecimal jcrColonContentSlashProtocolSocketTimeout, String jcrColonContentSlashProtocolVersion, String jcrColonContentSlashProxyNTLMDomain, String jcrColonContentSlashProxyNTLMHost, String jcrColonContentSlashProxyHost, String jcrColonContentSlashProxyPassword, BigDecimal jcrColonContentSlashProxyPort, String jcrColonContentSlashProxyUser, BigDecimal jcrColonContentSlashQueueBatchMaxSize, String jcrColonContentSlashQueueBatchMode, BigDecimal jcrColonContentSlashQueueBatchWaitTime, String jcrColonContentSlashRetryDelay, Boolean jcrColonContentSlashReverseReplication, String jcrColonContentSlashSerializationType, String jcrColonContentSlashSlingColonResourceType, String jcrColonContentSlashSsl, String jcrColonContentSlashTransportNTLMDomain, String jcrColonContentSlashTransportNTLMHost, String jcrColonContentSlashTransportPassword, String jcrColonContentSlashTransportUri, String jcrColonContentSlashTransportUser, Boolean jcrColonContentSlashTriggerDistribute, Boolean jcrColonContentSlashTriggerModified, Boolean jcrColonContentSlashTriggerOnOffTime, Boolean jcrColonContentSlashTriggerReceive, Boolean jcrColonContentSlashTriggerSpecific, String jcrColonContentSlashUserId, String jcrColonPrimaryType, String colonOperation) throws ApiException {
        com.squareup.okhttp.Call call = postAgentValidateBeforeCall(runmode, name, jcrColonContentSlashCqColonDistribute, jcrColonContentSlashCqColonDistributeAtTypeHint, jcrColonContentSlashCqColonName, jcrColonContentSlashCqColonTemplate, jcrColonContentSlashEnabled, jcrColonContentSlashJcrColonDescription, jcrColonContentSlashJcrColonLastModified, jcrColonContentSlashJcrColonLastModifiedBy, jcrColonContentSlashJcrColonMixinTypes, jcrColonContentSlashJcrColonTitle, jcrColonContentSlashLogLevel, jcrColonContentSlashNoStatusUpdate, jcrColonContentSlashNoVersioning, jcrColonContentSlashProtocolConnectTimeout, jcrColonContentSlashProtocolHTTPConnectionClosed, jcrColonContentSlashProtocolHTTPExpired, jcrColonContentSlashProtocolHTTPHeaders, jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, jcrColonContentSlashProtocolHTTPMethod, jcrColonContentSlashProtocolHTTPSRelaxed, jcrColonContentSlashProtocolInterface, jcrColonContentSlashProtocolSocketTimeout, jcrColonContentSlashProtocolVersion, jcrColonContentSlashProxyNTLMDomain, jcrColonContentSlashProxyNTLMHost, jcrColonContentSlashProxyHost, jcrColonContentSlashProxyPassword, jcrColonContentSlashProxyPort, jcrColonContentSlashProxyUser, jcrColonContentSlashQueueBatchMaxSize, jcrColonContentSlashQueueBatchMode, jcrColonContentSlashQueueBatchWaitTime, jcrColonContentSlashRetryDelay, jcrColonContentSlashReverseReplication, jcrColonContentSlashSerializationType, jcrColonContentSlashSlingColonResourceType, jcrColonContentSlashSsl, jcrColonContentSlashTransportNTLMDomain, jcrColonContentSlashTransportNTLMHost, jcrColonContentSlashTransportPassword, jcrColonContentSlashTransportUri, jcrColonContentSlashTransportUser, jcrColonContentSlashTriggerDistribute, jcrColonContentSlashTriggerModified, jcrColonContentSlashTriggerOnOffTime, jcrColonContentSlashTriggerReceive, jcrColonContentSlashTriggerSpecific, jcrColonContentSlashUserId, jcrColonPrimaryType, colonOperation, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrColonContentSlashCqColonDistribute  (optional)
     * @param jcrColonContentSlashCqColonDistributeAtTypeHint  (optional)
     * @param jcrColonContentSlashCqColonName  (optional)
     * @param jcrColonContentSlashCqColonTemplate  (optional)
     * @param jcrColonContentSlashEnabled  (optional)
     * @param jcrColonContentSlashJcrColonDescription  (optional)
     * @param jcrColonContentSlashJcrColonLastModified  (optional)
     * @param jcrColonContentSlashJcrColonLastModifiedBy  (optional)
     * @param jcrColonContentSlashJcrColonMixinTypes  (optional)
     * @param jcrColonContentSlashJcrColonTitle  (optional)
     * @param jcrColonContentSlashLogLevel  (optional)
     * @param jcrColonContentSlashNoStatusUpdate  (optional)
     * @param jcrColonContentSlashNoVersioning  (optional)
     * @param jcrColonContentSlashProtocolConnectTimeout  (optional)
     * @param jcrColonContentSlashProtocolHTTPConnectionClosed  (optional)
     * @param jcrColonContentSlashProtocolHTTPExpired  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeaders  (optional)
     * @param jcrColonContentSlashProtocolHTTPHeadersAtTypeHint  (optional)
     * @param jcrColonContentSlashProtocolHTTPMethod  (optional)
     * @param jcrColonContentSlashProtocolHTTPSRelaxed  (optional)
     * @param jcrColonContentSlashProtocolInterface  (optional)
     * @param jcrColonContentSlashProtocolSocketTimeout  (optional)
     * @param jcrColonContentSlashProtocolVersion  (optional)
     * @param jcrColonContentSlashProxyNTLMDomain  (optional)
     * @param jcrColonContentSlashProxyNTLMHost  (optional)
     * @param jcrColonContentSlashProxyHost  (optional)
     * @param jcrColonContentSlashProxyPassword  (optional)
     * @param jcrColonContentSlashProxyPort  (optional)
     * @param jcrColonContentSlashProxyUser  (optional)
     * @param jcrColonContentSlashQueueBatchMaxSize  (optional)
     * @param jcrColonContentSlashQueueBatchMode  (optional)
     * @param jcrColonContentSlashQueueBatchWaitTime  (optional)
     * @param jcrColonContentSlashRetryDelay  (optional)
     * @param jcrColonContentSlashReverseReplication  (optional)
     * @param jcrColonContentSlashSerializationType  (optional)
     * @param jcrColonContentSlashSlingColonResourceType  (optional)
     * @param jcrColonContentSlashSsl  (optional)
     * @param jcrColonContentSlashTransportNTLMDomain  (optional)
     * @param jcrColonContentSlashTransportNTLMHost  (optional)
     * @param jcrColonContentSlashTransportPassword  (optional)
     * @param jcrColonContentSlashTransportUri  (optional)
     * @param jcrColonContentSlashTransportUser  (optional)
     * @param jcrColonContentSlashTriggerDistribute  (optional)
     * @param jcrColonContentSlashTriggerModified  (optional)
     * @param jcrColonContentSlashTriggerOnOffTime  (optional)
     * @param jcrColonContentSlashTriggerReceive  (optional)
     * @param jcrColonContentSlashTriggerSpecific  (optional)
     * @param jcrColonContentSlashUserId  (optional)
     * @param jcrColonPrimaryType  (optional)
     * @param colonOperation  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAgentAsync(String runmode, String name, Boolean jcrColonContentSlashCqColonDistribute, String jcrColonContentSlashCqColonDistributeAtTypeHint, String jcrColonContentSlashCqColonName, String jcrColonContentSlashCqColonTemplate, Boolean jcrColonContentSlashEnabled, String jcrColonContentSlashJcrColonDescription, String jcrColonContentSlashJcrColonLastModified, String jcrColonContentSlashJcrColonLastModifiedBy, String jcrColonContentSlashJcrColonMixinTypes, String jcrColonContentSlashJcrColonTitle, String jcrColonContentSlashLogLevel, Boolean jcrColonContentSlashNoStatusUpdate, Boolean jcrColonContentSlashNoVersioning, BigDecimal jcrColonContentSlashProtocolConnectTimeout, Boolean jcrColonContentSlashProtocolHTTPConnectionClosed, String jcrColonContentSlashProtocolHTTPExpired, List<String> jcrColonContentSlashProtocolHTTPHeaders, String jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, String jcrColonContentSlashProtocolHTTPMethod, Boolean jcrColonContentSlashProtocolHTTPSRelaxed, String jcrColonContentSlashProtocolInterface, BigDecimal jcrColonContentSlashProtocolSocketTimeout, String jcrColonContentSlashProtocolVersion, String jcrColonContentSlashProxyNTLMDomain, String jcrColonContentSlashProxyNTLMHost, String jcrColonContentSlashProxyHost, String jcrColonContentSlashProxyPassword, BigDecimal jcrColonContentSlashProxyPort, String jcrColonContentSlashProxyUser, BigDecimal jcrColonContentSlashQueueBatchMaxSize, String jcrColonContentSlashQueueBatchMode, BigDecimal jcrColonContentSlashQueueBatchWaitTime, String jcrColonContentSlashRetryDelay, Boolean jcrColonContentSlashReverseReplication, String jcrColonContentSlashSerializationType, String jcrColonContentSlashSlingColonResourceType, String jcrColonContentSlashSsl, String jcrColonContentSlashTransportNTLMDomain, String jcrColonContentSlashTransportNTLMHost, String jcrColonContentSlashTransportPassword, String jcrColonContentSlashTransportUri, String jcrColonContentSlashTransportUser, Boolean jcrColonContentSlashTriggerDistribute, Boolean jcrColonContentSlashTriggerModified, Boolean jcrColonContentSlashTriggerOnOffTime, Boolean jcrColonContentSlashTriggerReceive, Boolean jcrColonContentSlashTriggerSpecific, String jcrColonContentSlashUserId, String jcrColonPrimaryType, String colonOperation, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAgentValidateBeforeCall(runmode, name, jcrColonContentSlashCqColonDistribute, jcrColonContentSlashCqColonDistributeAtTypeHint, jcrColonContentSlashCqColonName, jcrColonContentSlashCqColonTemplate, jcrColonContentSlashEnabled, jcrColonContentSlashJcrColonDescription, jcrColonContentSlashJcrColonLastModified, jcrColonContentSlashJcrColonLastModifiedBy, jcrColonContentSlashJcrColonMixinTypes, jcrColonContentSlashJcrColonTitle, jcrColonContentSlashLogLevel, jcrColonContentSlashNoStatusUpdate, jcrColonContentSlashNoVersioning, jcrColonContentSlashProtocolConnectTimeout, jcrColonContentSlashProtocolHTTPConnectionClosed, jcrColonContentSlashProtocolHTTPExpired, jcrColonContentSlashProtocolHTTPHeaders, jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, jcrColonContentSlashProtocolHTTPMethod, jcrColonContentSlashProtocolHTTPSRelaxed, jcrColonContentSlashProtocolInterface, jcrColonContentSlashProtocolSocketTimeout, jcrColonContentSlashProtocolVersion, jcrColonContentSlashProxyNTLMDomain, jcrColonContentSlashProxyNTLMHost, jcrColonContentSlashProxyHost, jcrColonContentSlashProxyPassword, jcrColonContentSlashProxyPort, jcrColonContentSlashProxyUser, jcrColonContentSlashQueueBatchMaxSize, jcrColonContentSlashQueueBatchMode, jcrColonContentSlashQueueBatchWaitTime, jcrColonContentSlashRetryDelay, jcrColonContentSlashReverseReplication, jcrColonContentSlashSerializationType, jcrColonContentSlashSlingColonResourceType, jcrColonContentSlashSsl, jcrColonContentSlashTransportNTLMDomain, jcrColonContentSlashTransportNTLMHost, jcrColonContentSlashTransportPassword, jcrColonContentSlashTransportUri, jcrColonContentSlashTransportUser, jcrColonContentSlashTriggerDistribute, jcrColonContentSlashTriggerModified, jcrColonContentSlashTriggerOnOffTime, jcrColonContentSlashTriggerReceive, jcrColonContentSlashTriggerSpecific, jcrColonContentSlashUserId, jcrColonPrimaryType, colonOperation, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAuthorizableKeystore
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional, default to null)
     * @param pk  (optional, default to null)
     * @param keyStore  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAuthorizableKeystoreCall(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{intermediatePath}/{authorizableId}.ks.html"
            .replaceAll("\\{" + "intermediatePath" + "\\}", apiClient.escapeString(intermediatePath.toString()))
            .replaceAll("\\{" + "authorizableId" + "\\}", apiClient.escapeString(authorizableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (colonOperation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair(":operation", colonOperation));
        if (currentPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currentPassword", currentPassword));
        if (newPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newPassword", newPassword));
        if (rePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rePassword", rePassword));
        if (keyPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyPassword", keyPassword));
        if (keyStorePass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyStorePass", keyStorePass));
        if (alias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alias", alias));
        if (newAlias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newAlias", newAlias));
        if (removeAlias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeAlias", removeAlias));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (certChain != null)
        localVarFormParams.put("cert-chain", certChain);
        if (pk != null)
        localVarFormParams.put("pk", pk);
        if (keyStore != null)
        localVarFormParams.put("keyStore", keyStore);

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAuthorizableKeystoreValidateBeforeCall(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling postAuthorizableKeystore(Async)");
        }
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling postAuthorizableKeystore(Async)");
        }
        

        com.squareup.okhttp.Call call = postAuthorizableKeystoreCall(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional, default to null)
     * @param pk  (optional, default to null)
     * @param keyStore  (optional, default to null)
     * @return KeystoreInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeystoreInfo postAuthorizableKeystore(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore) throws ApiException {
        ApiResponse<KeystoreInfo> resp = postAuthorizableKeystoreWithHttpInfo(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional, default to null)
     * @param pk  (optional, default to null)
     * @param keyStore  (optional, default to null)
     * @return ApiResponse&lt;KeystoreInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeystoreInfo> postAuthorizableKeystoreWithHttpInfo(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore) throws ApiException {
        com.squareup.okhttp.Call call = postAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore, null, null);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param colonOperation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional, default to null)
     * @param pk  (optional, default to null)
     * @param keyStore  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAuthorizableKeystoreAsync(String intermediatePath, String authorizableId, String colonOperation, String currentPassword, String newPassword, String rePassword, String keyPassword, String keyStorePass, String alias, String newAlias, String removeAlias, File certChain, File pk, File keyStore, final ApiCallback<KeystoreInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAuthorizableKeystoreValidateBeforeCall(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeystoreInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAuthorizables
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileSlashGivenName  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAuthorizablesCall(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileSlashGivenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/libs/granite/security/post/authorizables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (authorizableId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("authorizableId", authorizableId));
        if (intermediatePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("intermediatePath", intermediatePath));
        if (createUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createUser", createUser));
        if (createGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createGroup", createGroup));
        if (repColonPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rep:password", repColonPassword));
        if (profileSlashGivenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("profile/givenName", profileSlashGivenName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAuthorizablesValidateBeforeCall(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileSlashGivenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorizableId' is set
        if (authorizableId == null) {
            throw new ApiException("Missing the required parameter 'authorizableId' when calling postAuthorizables(Async)");
        }
        
        // verify the required parameter 'intermediatePath' is set
        if (intermediatePath == null) {
            throw new ApiException("Missing the required parameter 'intermediatePath' when calling postAuthorizables(Async)");
        }
        

        com.squareup.okhttp.Call call = postAuthorizablesCall(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileSlashGivenName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileSlashGivenName  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postAuthorizables(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileSlashGivenName) throws ApiException {
        ApiResponse<String> resp = postAuthorizablesWithHttpInfo(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileSlashGivenName);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileSlashGivenName  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postAuthorizablesWithHttpInfo(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileSlashGivenName) throws ApiException {
        com.squareup.okhttp.Call call = postAuthorizablesValidateBeforeCall(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileSlashGivenName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param repColonPassword  (optional)
     * @param profileSlashGivenName  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAuthorizablesAsync(String authorizableId, String intermediatePath, String createUser, String createGroup, String repColonPassword, String profileSlashGivenName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAuthorizablesValidateBeforeCall(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileSlashGivenName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postConfigAdobeGraniteSamlAuthenticationHandler
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConfigAdobeGraniteSamlAuthenticationHandlerCall(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyStorePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyStorePassword", keyStorePassword));
        if (keyStorePasswordAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyStorePassword@TypeHint", keyStorePasswordAtTypeHint));
        if (serviceRanking != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service.ranking", serviceRanking));
        if (serviceRankingAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service.ranking@TypeHint", serviceRankingAtTypeHint));
        if (idpHttpRedirect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpHttpRedirect", idpHttpRedirect));
        if (idpHttpRedirectAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpHttpRedirect@TypeHint", idpHttpRedirectAtTypeHint));
        if (createUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createUser", createUser));
        if (createUserAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createUser@TypeHint", createUserAtTypeHint));
        if (defaultRedirectUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultRedirectUrl", defaultRedirectUrl));
        if (defaultRedirectUrlAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultRedirectUrl@TypeHint", defaultRedirectUrlAtTypeHint));
        if (userIDAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userIDAttribute", userIDAttribute));
        if (userIDAttributeAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userIDAttribute@TypeHint", userIDAttributeAtTypeHint));
        if (defaultGroups != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "defaultGroups", defaultGroups));
        if (defaultGroupsAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultGroups@TypeHint", defaultGroupsAtTypeHint));
        if (idpCertAlias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpCertAlias", idpCertAlias));
        if (idpCertAliasAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpCertAlias@TypeHint", idpCertAliasAtTypeHint));
        if (addGroupMemberships != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addGroupMemberships", addGroupMemberships));
        if (addGroupMembershipsAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addGroupMemberships@TypeHint", addGroupMembershipsAtTypeHint));
        if (path != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "path", path));
        if (pathAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path@TypeHint", pathAtTypeHint));
        if (synchronizeAttributes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
        if (synchronizeAttributesAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("synchronizeAttributes@TypeHint", synchronizeAttributesAtTypeHint));
        if (clockTolerance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clockTolerance", clockTolerance));
        if (clockToleranceAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clockTolerance@TypeHint", clockToleranceAtTypeHint));
        if (groupMembershipAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupMembershipAttribute", groupMembershipAttribute));
        if (groupMembershipAttributeAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupMembershipAttribute@TypeHint", groupMembershipAttributeAtTypeHint));
        if (idpUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpUrl", idpUrl));
        if (idpUrlAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpUrl@TypeHint", idpUrlAtTypeHint));
        if (logoutUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logoutUrl", logoutUrl));
        if (logoutUrlAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logoutUrl@TypeHint", logoutUrlAtTypeHint));
        if (serviceProviderEntityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceProviderEntityId", serviceProviderEntityId));
        if (serviceProviderEntityIdAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceProviderEntityId@TypeHint", serviceProviderEntityIdAtTypeHint));
        if (assertionConsumerServiceURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assertionConsumerServiceURL", assertionConsumerServiceURL));
        if (assertionConsumerServiceURLAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assertionConsumerServiceURL@TypeHint", assertionConsumerServiceURLAtTypeHint));
        if (handleLogout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("handleLogout", handleLogout));
        if (handleLogoutAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("handleLogout@TypeHint", handleLogoutAtTypeHint));
        if (spPrivateKeyAlias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("spPrivateKeyAlias", spPrivateKeyAlias));
        if (spPrivateKeyAliasAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("spPrivateKeyAlias@TypeHint", spPrivateKeyAliasAtTypeHint));
        if (useEncryption != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useEncryption", useEncryption));
        if (useEncryptionAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useEncryption@TypeHint", useEncryptionAtTypeHint));
        if (nameIdFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nameIdFormat", nameIdFormat));
        if (nameIdFormatAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nameIdFormat@TypeHint", nameIdFormatAtTypeHint));
        if (digestMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("digestMethod", digestMethod));
        if (digestMethodAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("digestMethod@TypeHint", digestMethodAtTypeHint));
        if (signatureMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signatureMethod", signatureMethod));
        if (signatureMethodAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signatureMethod@TypeHint", signatureMethodAtTypeHint));
        if (userIntermediatePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userIntermediatePath", userIntermediatePath));
        if (userIntermediatePathAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userIntermediatePath@TypeHint", userIntermediatePathAtTypeHint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConfigAdobeGraniteSamlAuthenticationHandlerValidateBeforeCall(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postConfigAdobeGraniteSamlAuthenticationHandlerCall(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postConfigAdobeGraniteSamlAuthenticationHandler(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint) throws ApiException {
        postConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint);
    }

    /**
     * 
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postConfigAdobeGraniteSamlAuthenticationHandlerWithHttpInfo(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint) throws ApiException {
        com.squareup.okhttp.Call call = postConfigAdobeGraniteSamlAuthenticationHandlerValidateBeforeCall(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordAtTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingAtTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectAtTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserAtTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlAtTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeAtTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsAtTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasAtTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsAtTypeHint  (optional)
     * @param path  (optional)
     * @param pathAtTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesAtTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceAtTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeAtTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlAtTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlAtTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdAtTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLAtTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutAtTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasAtTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionAtTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatAtTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodAtTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodAtTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathAtTypeHint  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigAdobeGraniteSamlAuthenticationHandlerAsync(String keyStorePassword, String keyStorePasswordAtTypeHint, Integer serviceRanking, String serviceRankingAtTypeHint, Boolean idpHttpRedirect, String idpHttpRedirectAtTypeHint, Boolean createUser, String createUserAtTypeHint, String defaultRedirectUrl, String defaultRedirectUrlAtTypeHint, String userIDAttribute, String userIDAttributeAtTypeHint, List<String> defaultGroups, String defaultGroupsAtTypeHint, String idpCertAlias, String idpCertAliasAtTypeHint, Boolean addGroupMemberships, String addGroupMembershipsAtTypeHint, List<String> path, String pathAtTypeHint, List<String> synchronizeAttributes, String synchronizeAttributesAtTypeHint, Integer clockTolerance, String clockToleranceAtTypeHint, String groupMembershipAttribute, String groupMembershipAttributeAtTypeHint, String idpUrl, String idpUrlAtTypeHint, String logoutUrl, String logoutUrlAtTypeHint, String serviceProviderEntityId, String serviceProviderEntityIdAtTypeHint, String assertionConsumerServiceURL, String assertionConsumerServiceURLAtTypeHint, Boolean handleLogout, String handleLogoutAtTypeHint, String spPrivateKeyAlias, String spPrivateKeyAliasAtTypeHint, Boolean useEncryption, String useEncryptionAtTypeHint, String nameIdFormat, String nameIdFormatAtTypeHint, String digestMethod, String digestMethodAtTypeHint, String signatureMethod, String signatureMethodAtTypeHint, String userIntermediatePath, String userIntermediatePathAtTypeHint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigAdobeGraniteSamlAuthenticationHandlerValidateBeforeCall(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postConfigApacheFelixJettyBasedHttpService
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheFelixJettyBasedHttpServiceCall(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.felix.http";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orgApacheFelixHttpsNio != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.nio", orgApacheFelixHttpsNio));
        if (orgApacheFelixHttpsNioAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.nio@TypeHint", orgApacheFelixHttpsNioAtTypeHint));
        if (orgApacheFelixHttpsKeystore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore", orgApacheFelixHttpsKeystore));
        if (orgApacheFelixHttpsKeystoreAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore@TypeHint", orgApacheFelixHttpsKeystoreAtTypeHint));
        if (orgApacheFelixHttpsKeystorePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore.password", orgApacheFelixHttpsKeystorePassword));
        if (orgApacheFelixHttpsKeystorePasswordAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore.password@TypeHint", orgApacheFelixHttpsKeystorePasswordAtTypeHint));
        if (orgApacheFelixHttpsKeystoreKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore.key", orgApacheFelixHttpsKeystoreKey));
        if (orgApacheFelixHttpsKeystoreKeyAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore.key@TypeHint", orgApacheFelixHttpsKeystoreKeyAtTypeHint));
        if (orgApacheFelixHttpsKeystoreKeyPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore.key.password", orgApacheFelixHttpsKeystoreKeyPassword));
        if (orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.keystore.key.password@TypeHint", orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint));
        if (orgApacheFelixHttpsTruststore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.truststore", orgApacheFelixHttpsTruststore));
        if (orgApacheFelixHttpsTruststoreAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.truststore@TypeHint", orgApacheFelixHttpsTruststoreAtTypeHint));
        if (orgApacheFelixHttpsTruststorePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.truststore.password", orgApacheFelixHttpsTruststorePassword));
        if (orgApacheFelixHttpsTruststorePasswordAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.truststore.password@TypeHint", orgApacheFelixHttpsTruststorePasswordAtTypeHint));
        if (orgApacheFelixHttpsClientcertificate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.clientcertificate", orgApacheFelixHttpsClientcertificate));
        if (orgApacheFelixHttpsClientcertificateAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.clientcertificate@TypeHint", orgApacheFelixHttpsClientcertificateAtTypeHint));
        if (orgApacheFelixHttpsEnable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.enable", orgApacheFelixHttpsEnable));
        if (orgApacheFelixHttpsEnableAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.apache.felix.https.enable@TypeHint", orgApacheFelixHttpsEnableAtTypeHint));
        if (orgOsgiServiceHttpPortSecure != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.osgi.service.http.port.secure", orgOsgiServiceHttpPortSecure));
        if (orgOsgiServiceHttpPortSecureAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org.osgi.service.http.port.secure@TypeHint", orgOsgiServiceHttpPortSecureAtTypeHint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConfigApacheFelixJettyBasedHttpServiceValidateBeforeCall(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postConfigApacheFelixJettyBasedHttpServiceCall(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postConfigApacheFelixJettyBasedHttpService(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint) throws ApiException {
        postConfigApacheFelixJettyBasedHttpServiceWithHttpInfo(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint);
    }

    /**
     * 
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postConfigApacheFelixJettyBasedHttpServiceWithHttpInfo(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint) throws ApiException {
        com.squareup.okhttp.Call call = postConfigApacheFelixJettyBasedHttpServiceValidateBeforeCall(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyAtTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreAtTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordAtTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateAtTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableAtTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureAtTypeHint  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheFelixJettyBasedHttpServiceAsync(Boolean orgApacheFelixHttpsNio, String orgApacheFelixHttpsNioAtTypeHint, String orgApacheFelixHttpsKeystore, String orgApacheFelixHttpsKeystoreAtTypeHint, String orgApacheFelixHttpsKeystorePassword, String orgApacheFelixHttpsKeystorePasswordAtTypeHint, String orgApacheFelixHttpsKeystoreKey, String orgApacheFelixHttpsKeystoreKeyAtTypeHint, String orgApacheFelixHttpsKeystoreKeyPassword, String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, String orgApacheFelixHttpsTruststore, String orgApacheFelixHttpsTruststoreAtTypeHint, String orgApacheFelixHttpsTruststorePassword, String orgApacheFelixHttpsTruststorePasswordAtTypeHint, String orgApacheFelixHttpsClientcertificate, String orgApacheFelixHttpsClientcertificateAtTypeHint, Boolean orgApacheFelixHttpsEnable, String orgApacheFelixHttpsEnableAtTypeHint, String orgOsgiServiceHttpPortSecure, String orgOsgiServiceHttpPortSecureAtTypeHint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigApacheFelixJettyBasedHttpServiceValidateBeforeCall(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postConfigApacheHttpComponentsProxyConfiguration
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheHttpComponentsProxyConfigurationCall(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.http.proxyconfigurator.config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (proxyHost != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.host", proxyHost));
        if (proxyHostAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.host@TypeHint", proxyHostAtTypeHint));
        if (proxyPort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.port", proxyPort));
        if (proxyPortAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.port@TypeHint", proxyPortAtTypeHint));
        if (proxyExceptions != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "proxy.exceptions", proxyExceptions));
        if (proxyExceptionsAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.exceptions@TypeHint", proxyExceptionsAtTypeHint));
        if (proxyEnabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.enabled", proxyEnabled));
        if (proxyEnabledAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.enabled@TypeHint", proxyEnabledAtTypeHint));
        if (proxyUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.user", proxyUser));
        if (proxyUserAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.user@TypeHint", proxyUserAtTypeHint));
        if (proxyPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.password", proxyPassword));
        if (proxyPasswordAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proxy.password@TypeHint", proxyPasswordAtTypeHint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConfigApacheHttpComponentsProxyConfigurationValidateBeforeCall(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postConfigApacheHttpComponentsProxyConfigurationCall(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postConfigApacheHttpComponentsProxyConfiguration(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint) throws ApiException {
        postConfigApacheHttpComponentsProxyConfigurationWithHttpInfo(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint);
    }

    /**
     * 
     * 
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postConfigApacheHttpComponentsProxyConfigurationWithHttpInfo(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint) throws ApiException {
        com.squareup.okhttp.Call call = postConfigApacheHttpComponentsProxyConfigurationValidateBeforeCall(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param proxyHost  (optional)
     * @param proxyHostAtTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortAtTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsAtTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledAtTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserAtTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordAtTypeHint  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheHttpComponentsProxyConfigurationAsync(String proxyHost, String proxyHostAtTypeHint, Integer proxyPort, String proxyPortAtTypeHint, List<String> proxyExceptions, String proxyExceptionsAtTypeHint, Boolean proxyEnabled, String proxyEnabledAtTypeHint, String proxyUser, String proxyUserAtTypeHint, String proxyPassword, String proxyPasswordAtTypeHint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigApacheHttpComponentsProxyConfigurationValidateBeforeCall(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postConfigApacheSlingDavExServlet
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheSlingDavExServletCall(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (alias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alias", alias));
        if (aliasAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alias@TypeHint", aliasAtTypeHint));
        if (davCreateAbsoluteUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dav.create-absolute-uri", davCreateAbsoluteUri));
        if (davCreateAbsoluteUriAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dav.create-absolute-uri@TypeHint", davCreateAbsoluteUriAtTypeHint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConfigApacheSlingDavExServletValidateBeforeCall(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postConfigApacheSlingDavExServletCall(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postConfigApacheSlingDavExServlet(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint) throws ApiException {
        postConfigApacheSlingDavExServletWithHttpInfo(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint);
    }

    /**
     * 
     * 
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postConfigApacheSlingDavExServletWithHttpInfo(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint) throws ApiException {
        com.squareup.okhttp.Call call = postConfigApacheSlingDavExServletValidateBeforeCall(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param alias  (optional)
     * @param aliasAtTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriAtTypeHint  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheSlingDavExServletAsync(String alias, String aliasAtTypeHint, Boolean davCreateAbsoluteUri, String davCreateAbsoluteUriAtTypeHint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigApacheSlingDavExServletValidateBeforeCall(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postConfigApacheSlingGetServlet
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheSlingGetServletCall(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jsonMaximumresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("json.maximumresults", jsonMaximumresults));
        if (jsonMaximumresultsAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("json.maximumresults@TypeHint", jsonMaximumresultsAtTypeHint));
        if (enableHtml != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enable.html", enableHtml));
        if (enableHtmlAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enable.html@TypeHint", enableHtmlAtTypeHint));
        if (enableTxt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enable.txt", enableTxt));
        if (enableTxtAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enable.txt@TypeHint", enableTxtAtTypeHint));
        if (enableXml != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enable.xml", enableXml));
        if (enableXmlAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enable.xml@TypeHint", enableXmlAtTypeHint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConfigApacheSlingGetServletValidateBeforeCall(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postConfigApacheSlingGetServletCall(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postConfigApacheSlingGetServlet(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint) throws ApiException {
        postConfigApacheSlingGetServletWithHttpInfo(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint);
    }

    /**
     * 
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postConfigApacheSlingGetServletWithHttpInfo(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint) throws ApiException {
        com.squareup.okhttp.Call call = postConfigApacheSlingGetServletValidateBeforeCall(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsAtTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlAtTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtAtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlAtTypeHint  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheSlingGetServletAsync(String jsonMaximumresults, String jsonMaximumresultsAtTypeHint, Boolean enableHtml, String enableHtmlAtTypeHint, Boolean enableTxt, String enableTxtAtTypeHint, Boolean enableXml, String enableXmlAtTypeHint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigApacheSlingGetServletValidateBeforeCall(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postConfigApacheSlingReferrerFilter
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheSlingReferrerFilterCall(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowEmpty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow.empty", allowEmpty));
        if (allowEmptyAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow.empty@TypeHint", allowEmptyAtTypeHint));
        if (allowHosts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow.hosts", allowHosts));
        if (allowHostsAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow.hosts@TypeHint", allowHostsAtTypeHint));
        if (allowHostsRegexp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow.hosts.regexp", allowHostsRegexp));
        if (allowHostsRegexpAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("allow.hosts.regexp@TypeHint", allowHostsRegexpAtTypeHint));
        if (filterMethods != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter.methods", filterMethods));
        if (filterMethodsAtTypeHint != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter.methods@TypeHint", filterMethodsAtTypeHint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConfigApacheSlingReferrerFilterValidateBeforeCall(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postConfigApacheSlingReferrerFilterCall(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postConfigApacheSlingReferrerFilter(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint) throws ApiException {
        postConfigApacheSlingReferrerFilterWithHttpInfo(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint);
    }

    /**
     * 
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postConfigApacheSlingReferrerFilterWithHttpInfo(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint) throws ApiException {
        com.squareup.okhttp.Call call = postConfigApacheSlingReferrerFilterValidateBeforeCall(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyAtTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsAtTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpAtTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsAtTypeHint  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConfigApacheSlingReferrerFilterAsync(Boolean allowEmpty, String allowEmptyAtTypeHint, String allowHosts, String allowHostsAtTypeHint, String allowHostsRegexp, String allowHostsRegexpAtTypeHint, String filterMethods, String filterMethodsAtTypeHint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConfigApacheSlingReferrerFilterValidateBeforeCall(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postNode
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postNodeCall(String path, String name, String colonOperation, String deleteAuthorizable, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{path}/{name}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (colonOperation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair(":operation", colonOperation));
        if (deleteAuthorizable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleteAuthorizable", deleteAuthorizable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postNodeValidateBeforeCall(String path, String name, String colonOperation, String deleteAuthorizable, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postNode(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNode(Async)");
        }
        

        com.squareup.okhttp.Call call = postNodeCall(path, name, colonOperation, deleteAuthorizable, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional, default to null)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postNode(String path, String name, String colonOperation, String deleteAuthorizable, File file) throws ApiException {
        postNodeWithHttpInfo(path, name, colonOperation, deleteAuthorizable, file);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional, default to null)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postNodeWithHttpInfo(String path, String name, String colonOperation, String deleteAuthorizable, File file) throws ApiException {
        com.squareup.okhttp.Call call = postNodeValidateBeforeCall(path, name, colonOperation, deleteAuthorizable, file, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param colonOperation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postNodeAsync(String path, String name, String colonOperation, String deleteAuthorizable, File file, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNodeValidateBeforeCall(path, name, colonOperation, deleteAuthorizable, file, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postNodeRw
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postNodeRwCall(String path, String name, String addMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{path}/{name}.rw.html"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addMembers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addMembers", addMembers));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postNodeRwValidateBeforeCall(String path, String name, String addMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postNodeRw(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNodeRw(Async)");
        }
        

        com.squareup.okhttp.Call call = postNodeRwCall(path, name, addMembers, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postNodeRw(String path, String name, String addMembers) throws ApiException {
        postNodeRwWithHttpInfo(path, name, addMembers);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postNodeRwWithHttpInfo(String path, String name, String addMembers) throws ApiException {
        com.squareup.okhttp.Call call = postNodeRwValidateBeforeCall(path, name, addMembers, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postNodeRwAsync(String path, String name, String addMembers, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNodeRwValidateBeforeCall(path, name, addMembers, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postPath
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postPathCall(String path, String jcrColonPrimaryType, String colonName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/{path}/"
            .replaceAll("\\{" + "path" + "\\}", apiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (jcrColonPrimaryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("jcr:primaryType", jcrColonPrimaryType));
        if (colonName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair(":name", colonName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPathValidateBeforeCall(String path, String jcrColonPrimaryType, String colonName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postPath(Async)");
        }
        
        // verify the required parameter 'jcrColonPrimaryType' is set
        if (jcrColonPrimaryType == null) {
            throw new ApiException("Missing the required parameter 'jcrColonPrimaryType' when calling postPath(Async)");
        }
        
        // verify the required parameter 'colonName' is set
        if (colonName == null) {
            throw new ApiException("Missing the required parameter 'colonName' when calling postPath(Async)");
        }
        

        com.squareup.okhttp.Call call = postPathCall(path, jcrColonPrimaryType, colonName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postPath(String path, String jcrColonPrimaryType, String colonName) throws ApiException {
        postPathWithHttpInfo(path, jcrColonPrimaryType, colonName);
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postPathWithHttpInfo(String path, String jcrColonPrimaryType, String colonName) throws ApiException {
        com.squareup.okhttp.Call call = postPathValidateBeforeCall(path, jcrColonPrimaryType, colonName, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param jcrColonPrimaryType  (required)
     * @param colonName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postPathAsync(String path, String jcrColonPrimaryType, String colonName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPathValidateBeforeCall(path, jcrColonPrimaryType, colonName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postQuery
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postQueryCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/bin/querybuilder.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (pLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("p.limit", pLimit));
        if (_1property != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("1_property", _1property));
        if (_1propertyValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("1_property.value", _1propertyValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postQueryValidateBeforeCall(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postQuery(Async)");
        }
        
        // verify the required parameter 'pLimit' is set
        if (pLimit == null) {
            throw new ApiException("Missing the required parameter 'pLimit' when calling postQuery(Async)");
        }
        
        // verify the required parameter '_1property' is set
        if (_1property == null) {
            throw new ApiException("Missing the required parameter '_1property' when calling postQuery(Async)");
        }
        
        // verify the required parameter '_1propertyValue' is set
        if (_1propertyValue == null) {
            throw new ApiException("Missing the required parameter '_1propertyValue' when calling postQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = postQueryCall(path, pLimit, _1property, _1propertyValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postQuery(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        ApiResponse<String> resp = postQueryWithHttpInfo(path, pLimit, _1property, _1propertyValue);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postQueryWithHttpInfo(String path, BigDecimal pLimit, String _1property, String _1propertyValue) throws ApiException {
        com.squareup.okhttp.Call call = postQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param _1property  (required)
     * @param _1propertyValue  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postQueryAsync(String path, BigDecimal pLimit, String _1property, String _1propertyValue, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postQueryValidateBeforeCall(path, pLimit, _1property, _1propertyValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTreeActivation
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTreeActivationCall(Boolean ignoredeactivated, Boolean onlymodified, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/replication/treeactivation.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoredeactivated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignoredeactivated", ignoredeactivated));
        if (onlymodified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onlymodified", onlymodified));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTreeActivationValidateBeforeCall(Boolean ignoredeactivated, Boolean onlymodified, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ignoredeactivated' is set
        if (ignoredeactivated == null) {
            throw new ApiException("Missing the required parameter 'ignoredeactivated' when calling postTreeActivation(Async)");
        }
        
        // verify the required parameter 'onlymodified' is set
        if (onlymodified == null) {
            throw new ApiException("Missing the required parameter 'onlymodified' when calling postTreeActivation(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postTreeActivation(Async)");
        }
        

        com.squareup.okhttp.Call call = postTreeActivationCall(ignoredeactivated, onlymodified, path, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postTreeActivation(Boolean ignoredeactivated, Boolean onlymodified, String path) throws ApiException {
        postTreeActivationWithHttpInfo(ignoredeactivated, onlymodified, path);
    }

    /**
     * 
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postTreeActivationWithHttpInfo(Boolean ignoredeactivated, Boolean onlymodified, String path) throws ApiException {
        com.squareup.okhttp.Call call = postTreeActivationValidateBeforeCall(ignoredeactivated, onlymodified, path, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTreeActivationAsync(Boolean ignoredeactivated, Boolean onlymodified, String path, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTreeActivationValidateBeforeCall(ignoredeactivated, onlymodified, path, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postTruststore
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTruststoreCall(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/libs/granite/security/post/truststore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (colonOperation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair(":operation", colonOperation));
        if (newPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newPassword", newPassword));
        if (rePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rePassword", rePassword));
        if (keyStoreType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyStoreType", keyStoreType));
        if (removeAlias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeAlias", removeAlias));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (certificate != null)
        localVarFormParams.put("certificate", certificate);

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTruststoreValidateBeforeCall(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postTruststoreCall(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional, default to null)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postTruststore(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate) throws ApiException {
        ApiResponse<String> resp = postTruststoreWithHttpInfo(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional, default to null)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postTruststoreWithHttpInfo(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate) throws ApiException {
        com.squareup.okhttp.Call call = postTruststoreValidateBeforeCall(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param colonOperation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTruststoreAsync(String colonOperation, String newPassword, String rePassword, String keyStoreType, String removeAlias, File certificate, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTruststoreValidateBeforeCall(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTruststorePKCS12
     * @param truststoreP12  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTruststorePKCS12Call(File truststoreP12, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/etc/truststore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (truststoreP12 != null)
        localVarFormParams.put("truststore.p12", truststoreP12);

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTruststorePKCS12ValidateBeforeCall(File truststoreP12, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postTruststorePKCS12Call(truststoreP12, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param truststoreP12  (optional, default to null)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postTruststorePKCS12(File truststoreP12) throws ApiException {
        ApiResponse<String> resp = postTruststorePKCS12WithHttpInfo(truststoreP12);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param truststoreP12  (optional, default to null)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postTruststorePKCS12WithHttpInfo(File truststoreP12) throws ApiException {
        com.squareup.okhttp.Call call = postTruststorePKCS12ValidateBeforeCall(truststoreP12, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param truststoreP12  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTruststorePKCS12Async(File truststoreP12, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTruststorePKCS12ValidateBeforeCall(truststoreP12, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
