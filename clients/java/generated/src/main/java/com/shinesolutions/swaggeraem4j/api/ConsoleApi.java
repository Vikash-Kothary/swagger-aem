/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.shinesolutions.swaggeraem4j.api;

import com.shinesolutions.swaggeraem4j.ApiCallback;
import com.shinesolutions.swaggeraem4j.ApiClient;
import com.shinesolutions.swaggeraem4j.ApiException;
import com.shinesolutions.swaggeraem4j.ApiResponse;
import com.shinesolutions.swaggeraem4j.Configuration;
import com.shinesolutions.swaggeraem4j.Pair;
import com.shinesolutions.swaggeraem4j.ProgressRequestBody;
import com.shinesolutions.swaggeraem4j.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.shinesolutions.swaggeraem4j.model.SamlConfigurationInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsoleApi {
    private ApiClient apiClient;

    public ConsoleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConsoleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAemProductInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAemProductInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/system/console/status-productinfo.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAemProductInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAemProductInfoCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getAemProductInfo() throws ApiException {
        ApiResponse<List<String>> resp = getAemProductInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getAemProductInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAemProductInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAemProductInfoAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAemProductInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConfigMgr
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfigMgrCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/system/console/configMgr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfigMgrValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConfigMgrCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getConfigMgr() throws ApiException {
        ApiResponse<String> resp = getConfigMgrWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getConfigMgrWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConfigMgrValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfigMgrAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfigMgrValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBundle
     * @param name  (required)
     * @param action  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postBundleCall(String name, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/system/console/bundles/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBundleValidateBeforeCall(String name, String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postBundle(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling postBundle(Async)");
        }
        

        com.squareup.okhttp.Call call = postBundleCall(name, action, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param name  (required)
     * @param action  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postBundle(String name, String action) throws ApiException {
        postBundleWithHttpInfo(name, action);
    }

    /**
     * 
     * 
     * @param name  (required)
     * @param action  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postBundleWithHttpInfo(String name, String action) throws ApiException {
        com.squareup.okhttp.Call call = postBundleValidateBeforeCall(name, action, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param action  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBundleAsync(String name, String action, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBundleValidateBeforeCall(name, action, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postJmxRepository
     * @param action  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postJmxRepositoryCall(String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
            .replaceAll("\\{" + "action" + "\\}", apiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postJmxRepositoryValidateBeforeCall(String action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling postJmxRepository(Async)");
        }
        

        com.squareup.okhttp.Call call = postJmxRepositoryCall(action, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param action  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postJmxRepository(String action) throws ApiException {
        postJmxRepositoryWithHttpInfo(action);
    }

    /**
     * 
     * 
     * @param action  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postJmxRepositoryWithHttpInfo(String action) throws ApiException {
        com.squareup.okhttp.Call call = postJmxRepositoryValidateBeforeCall(action, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param action  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postJmxRepositoryAsync(String action, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postJmxRepositoryValidateBeforeCall(action, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postSamlConfiguration
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postSamlConfigurationCall(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (post != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("post", post));
        if (apply != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apply", apply));
        if (delete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delete", delete));
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));
        if ($location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$location", $location));
        if (path != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "path", path));
        if (serviceRanking != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service.ranking", serviceRanking));
        if (idpUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpUrl", idpUrl));
        if (idpCertAlias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpCertAlias", idpCertAlias));
        if (idpHttpRedirect != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idpHttpRedirect", idpHttpRedirect));
        if (serviceProviderEntityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceProviderEntityId", serviceProviderEntityId));
        if (assertionConsumerServiceURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assertionConsumerServiceURL", assertionConsumerServiceURL));
        if (spPrivateKeyAlias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("spPrivateKeyAlias", spPrivateKeyAlias));
        if (keyStorePassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyStorePassword", keyStorePassword));
        if (defaultRedirectUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultRedirectUrl", defaultRedirectUrl));
        if (userIDAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userIDAttribute", userIDAttribute));
        if (useEncryption != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useEncryption", useEncryption));
        if (createUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createUser", createUser));
        if (addGroupMemberships != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addGroupMemberships", addGroupMemberships));
        if (groupMembershipAttribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupMembershipAttribute", groupMembershipAttribute));
        if (defaultGroups != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "defaultGroups", defaultGroups));
        if (nameIdFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nameIdFormat", nameIdFormat));
        if (synchronizeAttributes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "synchronizeAttributes", synchronizeAttributes));
        if (handleLogout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("handleLogout", handleLogout));
        if (logoutUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logoutUrl", logoutUrl));
        if (clockTolerance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clockTolerance", clockTolerance));
        if (digestMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("digestMethod", digestMethod));
        if (signatureMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signatureMethod", signatureMethod));
        if (userIntermediatePath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userIntermediatePath", userIntermediatePath));
        if (propertylist != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "propertylist", propertylist));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSamlConfigurationValidateBeforeCall(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = postSamlConfigurationCall(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @return SamlConfigurationInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SamlConfigurationInfo postSamlConfiguration(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist) throws ApiException {
        ApiResponse<SamlConfigurationInfo> resp = postSamlConfigurationWithHttpInfo(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @return ApiResponse&lt;SamlConfigurationInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SamlConfigurationInfo> postSamlConfigurationWithHttpInfo(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist) throws ApiException {
        com.squareup.okhttp.Call call = postSamlConfigurationValidateBeforeCall(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, null, null);
        Type localVarReturnType = new TypeToken<SamlConfigurationInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param post  (optional)
     * @param apply  (optional)
     * @param delete  (optional)
     * @param action  (optional)
     * @param $location  (optional)
     * @param path  (optional)
     * @param serviceRanking  (optional)
     * @param idpUrl  (optional)
     * @param idpCertAlias  (optional)
     * @param idpHttpRedirect  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param keyStorePassword  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param userIDAttribute  (optional)
     * @param useEncryption  (optional)
     * @param createUser  (optional)
     * @param addGroupMemberships  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param defaultGroups  (optional)
     * @param nameIdFormat  (optional)
     * @param synchronizeAttributes  (optional)
     * @param handleLogout  (optional)
     * @param logoutUrl  (optional)
     * @param clockTolerance  (optional)
     * @param digestMethod  (optional)
     * @param signatureMethod  (optional)
     * @param userIntermediatePath  (optional)
     * @param propertylist  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postSamlConfigurationAsync(Boolean post, Boolean apply, Boolean delete, String action, String $location, List<String> path, Integer serviceRanking, String idpUrl, String idpCertAlias, Boolean idpHttpRedirect, String serviceProviderEntityId, String assertionConsumerServiceURL, String spPrivateKeyAlias, String keyStorePassword, String defaultRedirectUrl, String userIDAttribute, Boolean useEncryption, Boolean createUser, Boolean addGroupMemberships, String groupMembershipAttribute, List<String> defaultGroups, String nameIdFormat, List<String> synchronizeAttributes, Boolean handleLogout, String logoutUrl, Integer clockTolerance, String digestMethod, String signatureMethod, String userIntermediatePath, List<String> propertylist, final ApiCallback<SamlConfigurationInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSamlConfigurationValidateBeforeCall(post, apply, delete, action, $location, path, serviceRanking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SamlConfigurationInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
