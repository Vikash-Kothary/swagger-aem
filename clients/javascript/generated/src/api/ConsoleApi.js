/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SamlConfigurationInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SamlConfigurationInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.NodeSwaggerAem) {
      root.NodeSwaggerAem = {};
    }
    root.NodeSwaggerAem.ConsoleApi = factory(root.NodeSwaggerAem.ApiClient, root.NodeSwaggerAem.SamlConfigurationInfo);
  }
}(this, function(ApiClient, SamlConfigurationInfo) {
  'use strict';

  /**
   * Console service.
   * @module api/ConsoleApi
   * @version 0.9.0
   */

  /**
   * Constructs a new ConsoleApi. 
   * @alias module:api/ConsoleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAemProductInfo operation.
     * @callback module:api/ConsoleApi~getAemProductInfoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ConsoleApi~getAemProductInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.getAemProductInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/system/console/status-productinfo.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigMgr operation.
     * @callback module:api/ConsoleApi~getConfigMgrCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ConsoleApi~getConfigMgrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getConfigMgr = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/system/console/configMgr', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBundle operation.
     * @callback module:api/ConsoleApi~postBundleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {String} action 
     * @param {module:api/ConsoleApi~postBundleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postBundle = function(name, action, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postBundle");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling postBundle");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'action': action,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/system/console/bundles/{name}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postJmxRepository operation.
     * @callback module:api/ConsoleApi~postJmxRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} action 
     * @param {module:api/ConsoleApi~postJmxRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postJmxRepository = function(action, callback) {
      var postBody = null;

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling postJmxRepository");
      }


      var pathParams = {
        'action': action
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSamlConfiguration operation.
     * @callback module:api/ConsoleApi~postSamlConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SamlConfigurationInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post 
     * @param {Boolean} opts.apply 
     * @param {Boolean} opts._delete 
     * @param {String} opts.action 
     * @param {String} opts.location 
     * @param {Array.<String>} opts.path 
     * @param {Number} opts.serviceRanking 
     * @param {String} opts.idpUrl 
     * @param {String} opts.idpCertAlias 
     * @param {Boolean} opts.idpHttpRedirect 
     * @param {String} opts.serviceProviderEntityId 
     * @param {String} opts.assertionConsumerServiceURL 
     * @param {String} opts.spPrivateKeyAlias 
     * @param {String} opts.keyStorePassword 
     * @param {String} opts.defaultRedirectUrl 
     * @param {String} opts.userIDAttribute 
     * @param {Boolean} opts.useEncryption 
     * @param {Boolean} opts.createUser 
     * @param {Boolean} opts.addGroupMemberships 
     * @param {String} opts.groupMembershipAttribute 
     * @param {Array.<String>} opts.defaultGroups 
     * @param {String} opts.nameIdFormat 
     * @param {Array.<String>} opts.synchronizeAttributes 
     * @param {Boolean} opts.handleLogout 
     * @param {String} opts.logoutUrl 
     * @param {Number} opts.clockTolerance 
     * @param {String} opts.digestMethod 
     * @param {String} opts.signatureMethod 
     * @param {String} opts.userIntermediatePath 
     * @param {Array.<String>} opts.propertylist 
     * @param {module:api/ConsoleApi~postSamlConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SamlConfigurationInfo}
     */
    this.postSamlConfiguration = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'post': opts['post'],
        'apply': opts['apply'],
        'delete': opts['_delete'],
        'action': opts['action'],
        '$location': opts['location'],
        'service.ranking': opts['serviceRanking'],
        'idpUrl': opts['idpUrl'],
        'idpCertAlias': opts['idpCertAlias'],
        'idpHttpRedirect': opts['idpHttpRedirect'],
        'serviceProviderEntityId': opts['serviceProviderEntityId'],
        'assertionConsumerServiceURL': opts['assertionConsumerServiceURL'],
        'spPrivateKeyAlias': opts['spPrivateKeyAlias'],
        'keyStorePassword': opts['keyStorePassword'],
        'defaultRedirectUrl': opts['defaultRedirectUrl'],
        'userIDAttribute': opts['userIDAttribute'],
        'useEncryption': opts['useEncryption'],
        'createUser': opts['createUser'],
        'addGroupMemberships': opts['addGroupMemberships'],
        'groupMembershipAttribute': opts['groupMembershipAttribute'],
        'nameIdFormat': opts['nameIdFormat'],
        'handleLogout': opts['handleLogout'],
        'logoutUrl': opts['logoutUrl'],
        'clockTolerance': opts['clockTolerance'],
        'digestMethod': opts['digestMethod'],
        'signatureMethod': opts['signatureMethod'],
        'userIntermediatePath': opts['userIntermediatePath'],
      };
      var collectionQueryParams = {
        'path': {
          value: opts['path'],
          collectionFormat: 'multi'
        },
        'defaultGroups': {
          value: opts['defaultGroups'],
          collectionFormat: 'multi'
        },
        'synchronizeAttributes': {
          value: opts['synchronizeAttributes'],
          collectionFormat: 'multi'
        },
        'propertylist': {
          value: opts['propertylist'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['aemAuth'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = SamlConfigurationInfo;

      return this.apiClient.callApi(
        '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
