//
// SamlConfigurationProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


open class SamlConfigurationProperties: JSONEncodable {

    public var path: SamlConfigurationPropertyItemsArray?
    public var serviceRanking: SamlConfigurationPropertyItemsLong?
    public var idpUrl: SamlConfigurationPropertyItemsString?
    public var idpCertAlias: SamlConfigurationPropertyItemsString?
    public var idpHttpRedirect: SamlConfigurationPropertyItemsBoolean?
    public var serviceProviderEntityId: SamlConfigurationPropertyItemsString?
    public var assertionConsumerServiceURL: SamlConfigurationPropertyItemsString?
    public var spPrivateKeyAlias: SamlConfigurationPropertyItemsString?
    public var keyStorePassword: SamlConfigurationPropertyItemsString?
    public var defaultRedirectUrl: SamlConfigurationPropertyItemsString?
    public var userIDAttribute: SamlConfigurationPropertyItemsString?
    public var useEncryption: SamlConfigurationPropertyItemsBoolean?
    public var createUser: SamlConfigurationPropertyItemsBoolean?
    public var addGroupMemberships: SamlConfigurationPropertyItemsBoolean?
    public var groupMembershipAttribute: SamlConfigurationPropertyItemsString?
    public var defaultGroups: SamlConfigurationPropertyItemsArray?
    public var nameIdFormat: SamlConfigurationPropertyItemsString?
    public var synchronizeAttributes: SamlConfigurationPropertyItemsArray?
    public var handleLogout: SamlConfigurationPropertyItemsBoolean?
    public var logoutUrl: SamlConfigurationPropertyItemsString?
    public var clockTolerance: SamlConfigurationPropertyItemsLong?
    public var digestMethod: SamlConfigurationPropertyItemsString?
    public var signatureMethod: SamlConfigurationPropertyItemsString?
    public var userIntermediatePath: SamlConfigurationPropertyItemsString?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["path"] = self.path?.encodeToJSON()
        nillableDictionary["service.ranking"] = self.serviceRanking?.encodeToJSON()
        nillableDictionary["idpUrl"] = self.idpUrl?.encodeToJSON()
        nillableDictionary["idpCertAlias"] = self.idpCertAlias?.encodeToJSON()
        nillableDictionary["idpHttpRedirect"] = self.idpHttpRedirect?.encodeToJSON()
        nillableDictionary["serviceProviderEntityId"] = self.serviceProviderEntityId?.encodeToJSON()
        nillableDictionary["assertionConsumerServiceURL"] = self.assertionConsumerServiceURL?.encodeToJSON()
        nillableDictionary["spPrivateKeyAlias"] = self.spPrivateKeyAlias?.encodeToJSON()
        nillableDictionary["keyStorePassword"] = self.keyStorePassword?.encodeToJSON()
        nillableDictionary["defaultRedirectUrl"] = self.defaultRedirectUrl?.encodeToJSON()
        nillableDictionary["userIDAttribute"] = self.userIDAttribute?.encodeToJSON()
        nillableDictionary["useEncryption"] = self.useEncryption?.encodeToJSON()
        nillableDictionary["createUser"] = self.createUser?.encodeToJSON()
        nillableDictionary["addGroupMemberships"] = self.addGroupMemberships?.encodeToJSON()
        nillableDictionary["groupMembershipAttribute"] = self.groupMembershipAttribute?.encodeToJSON()
        nillableDictionary["defaultGroups"] = self.defaultGroups?.encodeToJSON()
        nillableDictionary["nameIdFormat"] = self.nameIdFormat?.encodeToJSON()
        nillableDictionary["synchronizeAttributes"] = self.synchronizeAttributes?.encodeToJSON()
        nillableDictionary["handleLogout"] = self.handleLogout?.encodeToJSON()
        nillableDictionary["logoutUrl"] = self.logoutUrl?.encodeToJSON()
        nillableDictionary["clockTolerance"] = self.clockTolerance?.encodeToJSON()
        nillableDictionary["digestMethod"] = self.digestMethod?.encodeToJSON()
        nillableDictionary["signatureMethod"] = self.signatureMethod?.encodeToJSON()
        nillableDictionary["userIntermediatePath"] = self.userIntermediatePath?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}

