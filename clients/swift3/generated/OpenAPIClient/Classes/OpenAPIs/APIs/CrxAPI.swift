//
// CrxAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire


open class CrxAPI: APIBase {
    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCrxdeStatus(completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        getCrxdeStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /crx/server/crx.default/jcr:root/.1.json
     - BASIC:
       - type: http
       - name: aemAuth
     - returns: RequestBuilder<String> 
     */
    open class func getCrxdeStatusWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/crx/server/crx.default/jcr:root/.1.json"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInstallStatus(completion: @escaping ((_ data: InstallStatus?, _ error: ErrorResponse?) -> Void)) {
        getInstallStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /crx/packmgr/installstatus.jsp
     - BASIC:
       - type: http
       - name: aemAuth
     - returns: RequestBuilder<InstallStatus> 
     */
    open class func getInstallStatusWithRequestBuilder() -> RequestBuilder<InstallStatus> {
        let path = "/crx/packmgr/installstatus.jsp"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InstallStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPackageManagerServlet(completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getPackageManagerServletWithRequestBuilder().execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     - GET /crx/packmgr/service/script.html
     - BASIC:
       - type: http
       - name: aemAuth
     - returns: RequestBuilder<Void> 
     */
    open class func getPackageManagerServletWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/crx/packmgr/service/script.html"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter cmd: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPackageService(cmd: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        postPackageServiceWithRequestBuilder(cmd: cmd).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /crx/packmgr/service.jsp
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter cmd: (query)  
     - returns: RequestBuilder<String> 
     */
    open class func postPackageServiceWithRequestBuilder(cmd: String) -> RequestBuilder<String> {
        let path = "/crx/packmgr/service.jsp"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cmd": cmd
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter path: (path)  
     - parameter cmd: (query)  
     - parameter groupName: (query)  (optional)
     - parameter packageName: (query)  (optional)
     - parameter packageVersion: (query)  (optional)
     - parameter charset: (query)  (optional)
     - parameter force: (query)  (optional)
     - parameter recursive: (query)  (optional)
     - parameter package: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPackageServiceJson(path: String, cmd: String, groupName: String? = nil, packageName: String? = nil, packageVersion: String? = nil, charset: String? = nil, force: Bool? = nil, recursive: Bool? = nil, package: URL? = nil, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        postPackageServiceJsonWithRequestBuilder(path: path, cmd: cmd, groupName: groupName, packageName: packageName, packageVersion: packageVersion, charset: charset, force: force, recursive: recursive, package: package).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /crx/packmgr/service/.json/{path}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (path)  
     - parameter cmd: (query)  
     - parameter groupName: (query)  (optional)
     - parameter packageName: (query)  (optional)
     - parameter packageVersion: (query)  (optional)
     - parameter charset: (query)  (optional)
     - parameter force: (query)  (optional)
     - parameter recursive: (query)  (optional)
     - parameter package: (form)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func postPackageServiceJsonWithRequestBuilder(path: String, cmd: String, groupName: String? = nil, packageName: String? = nil, packageVersion: String? = nil, charset: String? = nil, force: Bool? = nil, recursive: Bool? = nil, package: URL? = nil) -> RequestBuilder<String> {
        var path = "/crx/packmgr/service/.json/{path}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "package": package
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "cmd": cmd,
            "groupName": groupName,
            "packageName": packageName,
            "packageVersion": packageVersion,
            "_charset_": charset,
            "force": force,
            "recursive": recursive
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter groupName: (query)  
     - parameter packageName: (query)  
     - parameter version: (query)  
     - parameter path: (query)  
     - parameter filter: (query)  (optional)
     - parameter charset: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPackageUpdate(groupName: String, packageName: String, version: String, path: String, filter: String? = nil, charset: String? = nil, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        postPackageUpdateWithRequestBuilder(groupName: groupName, packageName: packageName, version: version, path: path, filter: filter, charset: charset).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /crx/packmgr/update.jsp
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter groupName: (query)  
     - parameter packageName: (query)  
     - parameter version: (query)  
     - parameter path: (query)  
     - parameter filter: (query)  (optional)
     - parameter charset: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func postPackageUpdateWithRequestBuilder(groupName: String, packageName: String, version: String, path: String, filter: String? = nil, charset: String? = nil) -> RequestBuilder<String> {
        let path = "/crx/packmgr/update.jsp"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "groupName": groupName,
            "packageName": packageName,
            "version": version,
            "path": path,
            "filter": filter,
            "_charset_": charset
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter old: (query)  
     - parameter plain: (query)  
     - parameter verify: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSetPassword(old: String, plain: String, verify: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        postSetPasswordWithRequestBuilder(old: old, plain: plain, verify: verify).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /crx/explorer/ui/setpassword.jsp
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter old: (query)  
     - parameter plain: (query)  
     - parameter verify: (query)  
     - returns: RequestBuilder<String> 
     */
    open class func postSetPasswordWithRequestBuilder(old: String, plain: String, verify: String) -> RequestBuilder<String> {
        let path = "/crx/explorer/ui/setpassword.jsp"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "old": old,
            "plain": plain,
            "verify": verify
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
