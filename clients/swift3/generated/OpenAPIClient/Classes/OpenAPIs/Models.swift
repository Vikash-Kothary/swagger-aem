// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [InstallStatus]
        Decoders.addDecoder(clazz: [InstallStatus].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[InstallStatus]> in
            return Decoders.decode(clazz: [InstallStatus].self, source: source)
        }

        // Decoder for InstallStatus
        Decoders.addDecoder(clazz: InstallStatus.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<InstallStatus> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? InstallStatus() : instance as! InstallStatus
                switch Decoders.decodeOptional(clazz: InstallStatusStatus.self, source: sourceDictionary["status"] as AnyObject?) {
                
                case let .success(value): _result.status = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "InstallStatus", actual: "\(source)"))
            }
        }
        // Decoder for [InstallStatusStatus]
        Decoders.addDecoder(clazz: [InstallStatusStatus].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[InstallStatusStatus]> in
            return Decoders.decode(clazz: [InstallStatusStatus].self, source: source)
        }

        // Decoder for InstallStatusStatus
        Decoders.addDecoder(clazz: InstallStatusStatus.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<InstallStatusStatus> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? InstallStatusStatus() : instance as! InstallStatusStatus
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["finished"] as AnyObject?) {
                
                case let .success(value): _result.finished = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["itemCount"] as AnyObject?) {
                
                case let .success(value): _result.itemCount = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "InstallStatusStatus", actual: "\(source)"))
            }
        }
        // Decoder for [KeystoreChainItems]
        Decoders.addDecoder(clazz: [KeystoreChainItems].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[KeystoreChainItems]> in
            return Decoders.decode(clazz: [KeystoreChainItems].self, source: source)
        }

        // Decoder for KeystoreChainItems
        Decoders.addDecoder(clazz: KeystoreChainItems.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<KeystoreChainItems> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? KeystoreChainItems() : instance as! KeystoreChainItems
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?) {
                
                case let .success(value): _result.subject = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuer"] as AnyObject?) {
                
                case let .success(value): _result.issuer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notBefore"] as AnyObject?) {
                
                case let .success(value): _result.notBefore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notAfter"] as AnyObject?) {
                
                case let .success(value): _result.notAfter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["serialNumber"] as AnyObject?) {
                
                case let .success(value): _result.serialNumber = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "KeystoreChainItems", actual: "\(source)"))
            }
        }
        // Decoder for [KeystoreInfo]
        Decoders.addDecoder(clazz: [KeystoreInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[KeystoreInfo]> in
            return Decoders.decode(clazz: [KeystoreInfo].self, source: source)
        }

        // Decoder for KeystoreInfo
        Decoders.addDecoder(clazz: KeystoreInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<KeystoreInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? KeystoreInfo() : instance as! KeystoreInfo
                switch Decoders.decodeOptional(clazz: [KeystoreItems].self, source: sourceDictionary["aliases"] as AnyObject?) {
                
                case let .success(value): _result.aliases = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exists"] as AnyObject?) {
                
                case let .success(value): _result.exists = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "KeystoreInfo", actual: "\(source)"))
            }
        }
        // Decoder for [KeystoreItems]
        Decoders.addDecoder(clazz: [KeystoreItems].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[KeystoreItems]> in
            return Decoders.decode(clazz: [KeystoreItems].self, source: source)
        }

        // Decoder for KeystoreItems
        Decoders.addDecoder(clazz: KeystoreItems.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<KeystoreItems> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? KeystoreItems() : instance as! KeystoreItems
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alias"] as AnyObject?) {
                
                case let .success(value): _result.alias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entryType"] as AnyObject?) {
                
                case let .success(value): _result.entryType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["algorithm"] as AnyObject?) {
                
                case let .success(value): _result.algorithm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"] as AnyObject?) {
                
                case let .success(value): _result.format = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [KeystoreChainItems].self, source: sourceDictionary["chain"] as AnyObject?) {
                
                case let .success(value): _result.chain = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "KeystoreItems", actual: "\(source)"))
            }
        }
        // Decoder for [SamlConfigurationInfo]
        Decoders.addDecoder(clazz: [SamlConfigurationInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SamlConfigurationInfo]> in
            return Decoders.decode(clazz: [SamlConfigurationInfo].self, source: source)
        }

        // Decoder for SamlConfigurationInfo
        Decoders.addDecoder(clazz: SamlConfigurationInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SamlConfigurationInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SamlConfigurationInfo() : instance as! SamlConfigurationInfo
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pid"] as AnyObject?) {
                
                case let .success(value): _result.pid = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bundle_location"] as AnyObject?) {
                
                case let .success(value): _result.bundleLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["service_location"] as AnyObject?) {
                
                case let .success(value): _result.serviceLocation = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationProperties.self, source: sourceDictionary["properties"] as AnyObject?) {
                
                case let .success(value): _result.properties = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SamlConfigurationInfo", actual: "\(source)"))
            }
        }
        // Decoder for [SamlConfigurationProperties]
        Decoders.addDecoder(clazz: [SamlConfigurationProperties].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SamlConfigurationProperties]> in
            return Decoders.decode(clazz: [SamlConfigurationProperties].self, source: source)
        }

        // Decoder for SamlConfigurationProperties
        Decoders.addDecoder(clazz: SamlConfigurationProperties.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SamlConfigurationProperties> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SamlConfigurationProperties() : instance as! SamlConfigurationProperties
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsArray.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): _result.path = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsLong.self, source: sourceDictionary["service.ranking"] as AnyObject?) {
                
                case let .success(value): _result.serviceRanking = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["idpUrl"] as AnyObject?) {
                
                case let .success(value): _result.idpUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["idpCertAlias"] as AnyObject?) {
                
                case let .success(value): _result.idpCertAlias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsBoolean.self, source: sourceDictionary["idpHttpRedirect"] as AnyObject?) {
                
                case let .success(value): _result.idpHttpRedirect = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["serviceProviderEntityId"] as AnyObject?) {
                
                case let .success(value): _result.serviceProviderEntityId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["assertionConsumerServiceURL"] as AnyObject?) {
                
                case let .success(value): _result.assertionConsumerServiceURL = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["spPrivateKeyAlias"] as AnyObject?) {
                
                case let .success(value): _result.spPrivateKeyAlias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["keyStorePassword"] as AnyObject?) {
                
                case let .success(value): _result.keyStorePassword = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["defaultRedirectUrl"] as AnyObject?) {
                
                case let .success(value): _result.defaultRedirectUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["userIDAttribute"] as AnyObject?) {
                
                case let .success(value): _result.userIDAttribute = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsBoolean.self, source: sourceDictionary["useEncryption"] as AnyObject?) {
                
                case let .success(value): _result.useEncryption = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsBoolean.self, source: sourceDictionary["createUser"] as AnyObject?) {
                
                case let .success(value): _result.createUser = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsBoolean.self, source: sourceDictionary["addGroupMemberships"] as AnyObject?) {
                
                case let .success(value): _result.addGroupMemberships = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["groupMembershipAttribute"] as AnyObject?) {
                
                case let .success(value): _result.groupMembershipAttribute = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsArray.self, source: sourceDictionary["defaultGroups"] as AnyObject?) {
                
                case let .success(value): _result.defaultGroups = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["nameIdFormat"] as AnyObject?) {
                
                case let .success(value): _result.nameIdFormat = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsArray.self, source: sourceDictionary["synchronizeAttributes"] as AnyObject?) {
                
                case let .success(value): _result.synchronizeAttributes = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsBoolean.self, source: sourceDictionary["handleLogout"] as AnyObject?) {
                
                case let .success(value): _result.handleLogout = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["logoutUrl"] as AnyObject?) {
                
                case let .success(value): _result.logoutUrl = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsLong.self, source: sourceDictionary["clockTolerance"] as AnyObject?) {
                
                case let .success(value): _result.clockTolerance = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["digestMethod"] as AnyObject?) {
                
                case let .success(value): _result.digestMethod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["signatureMethod"] as AnyObject?) {
                
                case let .success(value): _result.signatureMethod = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SamlConfigurationPropertyItemsString.self, source: sourceDictionary["userIntermediatePath"] as AnyObject?) {
                
                case let .success(value): _result.userIntermediatePath = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SamlConfigurationProperties", actual: "\(source)"))
            }
        }
        // Decoder for [SamlConfigurationPropertyItemsArray]
        Decoders.addDecoder(clazz: [SamlConfigurationPropertyItemsArray].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SamlConfigurationPropertyItemsArray]> in
            return Decoders.decode(clazz: [SamlConfigurationPropertyItemsArray].self, source: source)
        }

        // Decoder for SamlConfigurationPropertyItemsArray
        Decoders.addDecoder(clazz: SamlConfigurationPropertyItemsArray.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SamlConfigurationPropertyItemsArray> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SamlConfigurationPropertyItemsArray() : instance as! SamlConfigurationPropertyItemsArray
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["values"] as AnyObject?) {
                
                case let .success(value): _result.values = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SamlConfigurationPropertyItemsArray", actual: "\(source)"))
            }
        }
        // Decoder for [SamlConfigurationPropertyItemsBoolean]
        Decoders.addDecoder(clazz: [SamlConfigurationPropertyItemsBoolean].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SamlConfigurationPropertyItemsBoolean]> in
            return Decoders.decode(clazz: [SamlConfigurationPropertyItemsBoolean].self, source: source)
        }

        // Decoder for SamlConfigurationPropertyItemsBoolean
        Decoders.addDecoder(clazz: SamlConfigurationPropertyItemsBoolean.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SamlConfigurationPropertyItemsBoolean> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SamlConfigurationPropertyItemsBoolean() : instance as! SamlConfigurationPropertyItemsBoolean
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SamlConfigurationPropertyItemsBoolean", actual: "\(source)"))
            }
        }
        // Decoder for [SamlConfigurationPropertyItemsLong]
        Decoders.addDecoder(clazz: [SamlConfigurationPropertyItemsLong].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SamlConfigurationPropertyItemsLong]> in
            return Decoders.decode(clazz: [SamlConfigurationPropertyItemsLong].self, source: source)
        }

        // Decoder for SamlConfigurationPropertyItemsLong
        Decoders.addDecoder(clazz: SamlConfigurationPropertyItemsLong.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SamlConfigurationPropertyItemsLong> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SamlConfigurationPropertyItemsLong() : instance as! SamlConfigurationPropertyItemsLong
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SamlConfigurationPropertyItemsLong", actual: "\(source)"))
            }
        }
        // Decoder for [SamlConfigurationPropertyItemsString]
        Decoders.addDecoder(clazz: [SamlConfigurationPropertyItemsString].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SamlConfigurationPropertyItemsString]> in
            return Decoders.decode(clazz: [SamlConfigurationPropertyItemsString].self, source: source)
        }

        // Decoder for SamlConfigurationPropertyItemsString
        Decoders.addDecoder(clazz: SamlConfigurationPropertyItemsString.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SamlConfigurationPropertyItemsString> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SamlConfigurationPropertyItemsString() : instance as! SamlConfigurationPropertyItemsString
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["optional"] as AnyObject?) {
                
                case let .success(value): _result._optional = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_set"] as AnyObject?) {
                
                case let .success(value): _result.isSet = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): _result.type = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SamlConfigurationPropertyItemsString", actual: "\(source)"))
            }
        }
        // Decoder for [TruststoreInfo]
        Decoders.addDecoder(clazz: [TruststoreInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TruststoreInfo]> in
            return Decoders.decode(clazz: [TruststoreInfo].self, source: source)
        }

        // Decoder for TruststoreInfo
        Decoders.addDecoder(clazz: TruststoreInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TruststoreInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TruststoreInfo() : instance as! TruststoreInfo
                switch Decoders.decodeOptional(clazz: [TruststoreItems].self, source: sourceDictionary["aliases"] as AnyObject?) {
                
                case let .success(value): _result.aliases = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exists"] as AnyObject?) {
                
                case let .success(value): _result.exists = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TruststoreInfo", actual: "\(source)"))
            }
        }
        // Decoder for [TruststoreItems]
        Decoders.addDecoder(clazz: [TruststoreItems].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TruststoreItems]> in
            return Decoders.decode(clazz: [TruststoreItems].self, source: source)
        }

        // Decoder for TruststoreItems
        Decoders.addDecoder(clazz: TruststoreItems.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TruststoreItems> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TruststoreItems() : instance as! TruststoreItems
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alias"] as AnyObject?) {
                
                case let .success(value): _result.alias = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entryType"] as AnyObject?) {
                
                case let .success(value): _result.entryType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?) {
                
                case let .success(value): _result.subject = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuer"] as AnyObject?) {
                
                case let .success(value): _result.issuer = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notBefore"] as AnyObject?) {
                
                case let .success(value): _result.notBefore = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notAfter"] as AnyObject?) {
                
                case let .success(value): _result.notAfter = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["serialNumber"] as AnyObject?) {
                
                case let .success(value): _result.serialNumber = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TruststoreItems", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
