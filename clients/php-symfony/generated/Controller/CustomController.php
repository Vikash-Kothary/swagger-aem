<?php

/**
 * CustomController
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\CustomApiInterface;

/**
 * CustomController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class CustomController extends Controller
{

    /**
     * Operation getAemHealthCheck
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getAemHealthCheckAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'aemAuth' required
        // HTTP basic authentication required
        $securityaemAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $tags = $request->query->get('tags');
        $combineTagsOr = $request->query->get('combineTagsOr');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        $tags = $this->deserialize($tags, 'string', 'string');
        $combineTagsOr = $this->deserialize($combineTagsOr, 'bool', 'string');

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($tags, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($combineTagsOr, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'aemAuth'
            $handler->setaemAuth($securityaemAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->getAemHealthCheck($tags, $combineTagsOr, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Default response';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 0:
                    $message = 'Default response';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postConfigAemHealthCheckServlet
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postConfigAemHealthCheckServletAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = [];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'aemAuth' required
        // HTTP basic authentication required
        $securityaemAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $bundlesIgnored = $request->query->get('bundlesIgnored');
        $bundlesIgnoredTypeHint = $request->query->get('bundlesIgnoredTypeHint');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        $bundlesIgnored = $this->deserialize($bundlesIgnored, 'array<multi,string>', 'string');
        $bundlesIgnoredTypeHint = $this->deserialize($bundlesIgnoredTypeHint, 'string', 'string');

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string")
        ]);
        $response = $this->validate($bundlesIgnored, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($bundlesIgnoredTypeHint, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'aemAuth'
            $handler->setaemAuth($securityaemAuth);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->postConfigAemHealthCheckServlet($bundlesIgnored, $bundlesIgnoredTypeHint, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Default response';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 0:
                    $message = 'Default response';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postConfigAemPasswordReset
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postConfigAemPasswordResetAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = [];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'aemAuth' required
        // HTTP basic authentication required
        $securityaemAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $pwdresetAuthorizables = $request->query->get('pwdresetAuthorizables');
        $pwdresetAuthorizablesTypeHint = $request->query->get('pwdresetAuthorizablesTypeHint');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        $pwdresetAuthorizables = $this->deserialize($pwdresetAuthorizables, 'array<multi,string>', 'string');
        $pwdresetAuthorizablesTypeHint = $this->deserialize($pwdresetAuthorizablesTypeHint, 'string', 'string');

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string")
        ]);
        $response = $this->validate($pwdresetAuthorizables, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pwdresetAuthorizablesTypeHint, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'aemAuth'
            $handler->setaemAuth($securityaemAuth);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->postConfigAemPasswordReset($pwdresetAuthorizables, $pwdresetAuthorizablesTypeHint, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Default response';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 0:
                    $message = 'Default response';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return CustomApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('custom');
    }
}
