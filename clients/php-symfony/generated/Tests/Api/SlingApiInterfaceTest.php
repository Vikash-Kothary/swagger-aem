<?php
/**
 * SlingApiInterfaceTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * SlingApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class SlingApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deleteAgent
     *
     * .
     *
     */
    public function testDeleteAgent()
    {
        $client = static::createClient();

        $path = '/etc/replication/agents.{runmode}/{name}';
        $pattern = '{runmode}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for deleteNode
     *
     * .
     *
     */
    public function testDeleteNode()
    {
        $client = static::createClient();

        $path = '/{path}/{name}';
        $pattern = '{path}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for getAgent
     *
     * .
     *
     */
    public function testGetAgent()
    {
        $client = static::createClient();

        $path = '/etc/replication/agents.{runmode}/{name}';
        $pattern = '{runmode}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getAgents
     *
     * .
     *
     */
    public function testGetAgents()
    {
        $client = static::createClient();

        $path = '/etc/replication/agents.{runmode}.-1.json';
        $pattern = '{runmode}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getAuthorizableKeystore
     *
     * .
     *
     */
    public function testGetAuthorizableKeystore()
    {
        $client = static::createClient();

        $path = '/{intermediatePath}/{authorizableId}.ks.json';
        $pattern = '{intermediatePath}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{authorizableId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getKeystore
     *
     * .
     *
     */
    public function testGetKeystore()
    {
        $client = static::createClient();

        $path = '/{intermediatePath}/{authorizableId}/keystore/store.p12';
        $pattern = '{intermediatePath}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{authorizableId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getNode
     *
     * .
     *
     */
    public function testGetNode()
    {
        $client = static::createClient();

        $path = '/{path}/{name}';
        $pattern = '{path}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPackage
     *
     * .
     *
     */
    public function testGetPackage()
    {
        $client = static::createClient();

        $path = '/etc/packages/{group}/{name}-{version}.zip';
        $pattern = '{group}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{version}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getPackageFilter
     *
     * .
     *
     */
    public function testGetPackageFilter()
    {
        $client = static::createClient();

        $path = '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json';
        $pattern = '{group}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{version}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getQuery
     *
     * .
     *
     */
    public function testGetQuery()
    {
        $client = static::createClient();

        $path = '/bin/querybuilder.json';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getTruststore
     *
     * .
     *
     */
    public function testGetTruststore()
    {
        $client = static::createClient();

        $path = '/etc/truststore/truststore.p12';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getTruststoreInfo
     *
     * .
     *
     */
    public function testGetTruststoreInfo()
    {
        $client = static::createClient();

        $path = '/libs/granite/security/truststore.json';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for postAgent
     *
     * .
     *
     */
    public function testPostAgent()
    {
        $client = static::createClient();

        $path = '/etc/replication/agents.{runmode}/{name}';
        $pattern = '{runmode}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postAuthorizableKeystore
     *
     * .
     *
     */
    public function testPostAuthorizableKeystore()
    {
        $client = static::createClient();

        $path = '/{intermediatePath}/{authorizableId}.ks.html';
        $pattern = '{intermediatePath}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{authorizableId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postAuthorizables
     *
     * .
     *
     */
    public function testPostAuthorizables()
    {
        $client = static::createClient();

        $path = '/libs/granite/security/post/authorizables';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postConfigAdobeGraniteSamlAuthenticationHandler
     *
     * .
     *
     */
    public function testPostConfigAdobeGraniteSamlAuthenticationHandler()
    {
        $client = static::createClient();

        $path = '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postConfigApacheFelixJettyBasedHttpService
     *
     * .
     *
     */
    public function testPostConfigApacheFelixJettyBasedHttpService()
    {
        $client = static::createClient();

        $path = '/apps/system/config/org.apache.felix.http';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postConfigApacheHttpComponentsProxyConfiguration
     *
     * .
     *
     */
    public function testPostConfigApacheHttpComponentsProxyConfiguration()
    {
        $client = static::createClient();

        $path = '/apps/system/config/org.apache.http.proxyconfigurator.config';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postConfigApacheSlingDavExServlet
     *
     * .
     *
     */
    public function testPostConfigApacheSlingDavExServlet()
    {
        $client = static::createClient();

        $path = '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postConfigApacheSlingGetServlet
     *
     * .
     *
     */
    public function testPostConfigApacheSlingGetServlet()
    {
        $client = static::createClient();

        $path = '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postConfigApacheSlingReferrerFilter
     *
     * .
     *
     */
    public function testPostConfigApacheSlingReferrerFilter()
    {
        $client = static::createClient();

        $path = '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postNode
     *
     * .
     *
     */
    public function testPostNode()
    {
        $client = static::createClient();

        $path = '/{path}/{name}';
        $pattern = '{path}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postNodeRw
     *
     * .
     *
     */
    public function testPostNodeRw()
    {
        $client = static::createClient();

        $path = '/{path}/{name}.rw.html';
        $pattern = '{path}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{name}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postPath
     *
     * .
     *
     */
    public function testPostPath()
    {
        $client = static::createClient();

        $path = '/{path}/';
        $pattern = '{path}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postQuery
     *
     * .
     *
     */
    public function testPostQuery()
    {
        $client = static::createClient();

        $path = '/bin/querybuilder.json';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postTreeActivation
     *
     * .
     *
     */
    public function testPostTreeActivation()
    {
        $client = static::createClient();

        $path = '/etc/replication/treeactivation.html';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postTruststore
     *
     * .
     *
     */
    public function testPostTruststore()
    {
        $client = static::createClient();

        $path = '/libs/granite/security/post/truststore';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for postTruststorePKCS12
     *
     * .
     *
     */
    public function testPostTruststorePKCS12()
    {
        $client = static::createClient();

        $path = '/etc/truststore';

        $crawler = $client->request('POST', $path);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
