<?php
/**
 * SlingApiInterface
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\KeystoreInfo;
use OpenAPI\Server\Model\TruststoreInfo;

/**
 * SlingApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface SlingApiInterface
{

    /**
     * Sets authentication method aemAuth
     *
     * @param string $value Value of the aemAuth authentication method.
     *
     * @return void
     */
    public function setaemAuth($value);

    /**
     * Operation deleteAgent
     *
     * @param  string $runmode   (required)
     * @param  string $name   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function deleteAgent($runmode, $name, &$responseCode, array &$responseHeaders);

    /**
     * Operation deleteNode
     *
     * @param  string $path   (required)
     * @param  string $name   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function deleteNode($path, $name, &$responseCode, array &$responseHeaders);

    /**
     * Operation getAgent
     *
     * @param  string $runmode   (required)
     * @param  string $name   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function getAgent($runmode, $name, &$responseCode, array &$responseHeaders);

    /**
     * Operation getAgents
     *
     * @param  string $runmode   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return string
     *
     */
    public function getAgents($runmode, &$responseCode, array &$responseHeaders);

    /**
     * Operation getAuthorizableKeystore
     *
     * @param  string $intermediatePath   (required)
     * @param  string $authorizableId   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\KeystoreInfo[]
     *
     */
    public function getAuthorizableKeystore($intermediatePath, $authorizableId, &$responseCode, array &$responseHeaders);

    /**
     * Operation getKeystore
     *
     * @param  string $intermediatePath   (required)
     * @param  string $authorizableId   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return UploadedFile[]
     *
     */
    public function getKeystore($intermediatePath, $authorizableId, &$responseCode, array &$responseHeaders);

    /**
     * Operation getNode
     *
     * @param  string $path   (required)
     * @param  string $name   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function getNode($path, $name, &$responseCode, array &$responseHeaders);

    /**
     * Operation getPackage
     *
     * @param  string $group   (required)
     * @param  string $name   (required)
     * @param  string $version   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return UploadedFile[]
     *
     */
    public function getPackage($group, $name, $version, &$responseCode, array &$responseHeaders);

    /**
     * Operation getPackageFilter
     *
     * @param  string $group   (required)
     * @param  string $name   (required)
     * @param  string $version   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return string
     *
     */
    public function getPackageFilter($group, $name, $version, &$responseCode, array &$responseHeaders);

    /**
     * Operation getQuery
     *
     * @param  string $path   (required)
     * @param  float $pLimit   (required)
     * @param  string $_1property   (required)
     * @param  string $_1propertyValue   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return string
     *
     */
    public function getQuery($path, $pLimit, $_1property, $_1propertyValue, &$responseCode, array &$responseHeaders);

    /**
     * Operation getTruststore
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return UploadedFile[]
     *
     */
    public function getTruststore(&$responseCode, array &$responseHeaders);

    /**
     * Operation getTruststoreInfo
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\TruststoreInfo[]
     *
     */
    public function getTruststoreInfo(&$responseCode, array &$responseHeaders);

    /**
     * Operation postAgent
     *
     * @param  string $runmode   (required)
     * @param  string $name   (required)
     * @param  bool $jcrcontentcqdistribute   (optional)
     * @param  string $jcrcontentcqdistributeTypeHint   (optional)
     * @param  string $jcrcontentcqname   (optional)
     * @param  string $jcrcontentcqtemplate   (optional)
     * @param  bool $jcrcontentenabled   (optional)
     * @param  string $jcrcontentjcrdescription   (optional)
     * @param  string $jcrcontentjcrlastModified   (optional)
     * @param  string $jcrcontentjcrlastModifiedBy   (optional)
     * @param  string $jcrcontentjcrmixinTypes   (optional)
     * @param  string $jcrcontentjcrtitle   (optional)
     * @param  string $jcrcontentlogLevel   (optional)
     * @param  bool $jcrcontentnoStatusUpdate   (optional)
     * @param  bool $jcrcontentnoVersioning   (optional)
     * @param  float $jcrcontentprotocolConnectTimeout   (optional)
     * @param  bool $jcrcontentprotocolHTTPConnectionClosed   (optional)
     * @param  string $jcrcontentprotocolHTTPExpired   (optional)
     * @param  string[] $jcrcontentprotocolHTTPHeaders   (optional)
     * @param  string $jcrcontentprotocolHTTPHeadersTypeHint   (optional)
     * @param  string $jcrcontentprotocolHTTPMethod   (optional)
     * @param  bool $jcrcontentprotocolHTTPSRelaxed   (optional)
     * @param  string $jcrcontentprotocolInterface   (optional)
     * @param  float $jcrcontentprotocolSocketTimeout   (optional)
     * @param  string $jcrcontentprotocolVersion   (optional)
     * @param  string $jcrcontentproxyNTLMDomain   (optional)
     * @param  string $jcrcontentproxyNTLMHost   (optional)
     * @param  string $jcrcontentproxyHost   (optional)
     * @param  string $jcrcontentproxyPassword   (optional)
     * @param  float $jcrcontentproxyPort   (optional)
     * @param  string $jcrcontentproxyUser   (optional)
     * @param  float $jcrcontentqueueBatchMaxSize   (optional)
     * @param  string $jcrcontentqueueBatchMode   (optional)
     * @param  float $jcrcontentqueueBatchWaitTime   (optional)
     * @param  string $jcrcontentretryDelay   (optional)
     * @param  bool $jcrcontentreverseReplication   (optional)
     * @param  string $jcrcontentserializationType   (optional)
     * @param  string $jcrcontentslingresourceType   (optional)
     * @param  string $jcrcontentssl   (optional)
     * @param  string $jcrcontenttransportNTLMDomain   (optional)
     * @param  string $jcrcontenttransportNTLMHost   (optional)
     * @param  string $jcrcontenttransportPassword   (optional)
     * @param  string $jcrcontenttransportUri   (optional)
     * @param  string $jcrcontenttransportUser   (optional)
     * @param  bool $jcrcontenttriggerDistribute   (optional)
     * @param  bool $jcrcontenttriggerModified   (optional)
     * @param  bool $jcrcontenttriggerOnOffTime   (optional)
     * @param  bool $jcrcontenttriggerReceive   (optional)
     * @param  bool $jcrcontenttriggerSpecific   (optional)
     * @param  string $jcrcontentuserId   (optional)
     * @param  string $jcrprimaryType   (optional)
     * @param  string $operation   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postAgent($runmode, $name, $jcrcontentcqdistribute = null, $jcrcontentcqdistributeTypeHint = null, $jcrcontentcqname = null, $jcrcontentcqtemplate = null, $jcrcontentenabled = null, $jcrcontentjcrdescription = null, $jcrcontentjcrlastModified = null, $jcrcontentjcrlastModifiedBy = null, $jcrcontentjcrmixinTypes = null, $jcrcontentjcrtitle = null, $jcrcontentlogLevel = null, $jcrcontentnoStatusUpdate = null, $jcrcontentnoVersioning = null, $jcrcontentprotocolConnectTimeout = null, $jcrcontentprotocolHTTPConnectionClosed = null, $jcrcontentprotocolHTTPExpired = null, array $jcrcontentprotocolHTTPHeaders = null, $jcrcontentprotocolHTTPHeadersTypeHint = null, $jcrcontentprotocolHTTPMethod = null, $jcrcontentprotocolHTTPSRelaxed = null, $jcrcontentprotocolInterface = null, $jcrcontentprotocolSocketTimeout = null, $jcrcontentprotocolVersion = null, $jcrcontentproxyNTLMDomain = null, $jcrcontentproxyNTLMHost = null, $jcrcontentproxyHost = null, $jcrcontentproxyPassword = null, $jcrcontentproxyPort = null, $jcrcontentproxyUser = null, $jcrcontentqueueBatchMaxSize = null, $jcrcontentqueueBatchMode = null, $jcrcontentqueueBatchWaitTime = null, $jcrcontentretryDelay = null, $jcrcontentreverseReplication = null, $jcrcontentserializationType = null, $jcrcontentslingresourceType = null, $jcrcontentssl = null, $jcrcontenttransportNTLMDomain = null, $jcrcontenttransportNTLMHost = null, $jcrcontenttransportPassword = null, $jcrcontenttransportUri = null, $jcrcontenttransportUser = null, $jcrcontenttriggerDistribute = null, $jcrcontenttriggerModified = null, $jcrcontenttriggerOnOffTime = null, $jcrcontenttriggerReceive = null, $jcrcontenttriggerSpecific = null, $jcrcontentuserId = null, $jcrprimaryType = null, $operation = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postAuthorizableKeystore
     *
     * @param  string $intermediatePath   (required)
     * @param  string $authorizableId   (required)
     * @param  string $operation   (optional)
     * @param  string $currentPassword   (optional)
     * @param  string $newPassword   (optional)
     * @param  string $rePassword   (optional)
     * @param  string $keyPassword   (optional)
     * @param  string $keyStorePass   (optional)
     * @param  string $alias   (optional)
     * @param  string $newAlias   (optional)
     * @param  string $removeAlias   (optional)
     * @param  UploadedFile $certChain   (optional)
     * @param  UploadedFile $pk   (optional)
     * @param  UploadedFile $keyStore   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\KeystoreInfo[]
     *
     */
    public function postAuthorizableKeystore($intermediatePath, $authorizableId, $operation = null, $currentPassword = null, $newPassword = null, $rePassword = null, $keyPassword = null, $keyStorePass = null, $alias = null, $newAlias = null, $removeAlias = null, UploadedFile $certChain = null, UploadedFile $pk = null, UploadedFile $keyStore = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postAuthorizables
     *
     * @param  string $authorizableId   (required)
     * @param  string $intermediatePath   (required)
     * @param  string $createUser   (optional)
     * @param  string $createGroup   (optional)
     * @param  string $reppassword   (optional)
     * @param  string $profilegivenName   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return string
     *
     */
    public function postAuthorizables($authorizableId, $intermediatePath, $createUser = null, $createGroup = null, $reppassword = null, $profilegivenName = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postConfigAdobeGraniteSamlAuthenticationHandler
     *
     * @param  string $keyStorePassword   (optional)
     * @param  string $keyStorePasswordTypeHint   (optional)
     * @param  int $serviceRanking   (optional)
     * @param  string $serviceRankingTypeHint   (optional)
     * @param  bool $idpHttpRedirect   (optional)
     * @param  string $idpHttpRedirectTypeHint   (optional)
     * @param  bool $createUser   (optional)
     * @param  string $createUserTypeHint   (optional)
     * @param  string $defaultRedirectUrl   (optional)
     * @param  string $defaultRedirectUrlTypeHint   (optional)
     * @param  string $userIDAttribute   (optional)
     * @param  string $userIDAttributeTypeHint   (optional)
     * @param  string[] $defaultGroups   (optional)
     * @param  string $defaultGroupsTypeHint   (optional)
     * @param  string $idpCertAlias   (optional)
     * @param  string $idpCertAliasTypeHint   (optional)
     * @param  bool $addGroupMemberships   (optional)
     * @param  string $addGroupMembershipsTypeHint   (optional)
     * @param  string[] $path   (optional)
     * @param  string $pathTypeHint   (optional)
     * @param  string[] $synchronizeAttributes   (optional)
     * @param  string $synchronizeAttributesTypeHint   (optional)
     * @param  int $clockTolerance   (optional)
     * @param  string $clockToleranceTypeHint   (optional)
     * @param  string $groupMembershipAttribute   (optional)
     * @param  string $groupMembershipAttributeTypeHint   (optional)
     * @param  string $idpUrl   (optional)
     * @param  string $idpUrlTypeHint   (optional)
     * @param  string $logoutUrl   (optional)
     * @param  string $logoutUrlTypeHint   (optional)
     * @param  string $serviceProviderEntityId   (optional)
     * @param  string $serviceProviderEntityIdTypeHint   (optional)
     * @param  string $assertionConsumerServiceURL   (optional)
     * @param  string $assertionConsumerServiceURLTypeHint   (optional)
     * @param  bool $handleLogout   (optional)
     * @param  string $handleLogoutTypeHint   (optional)
     * @param  string $spPrivateKeyAlias   (optional)
     * @param  string $spPrivateKeyAliasTypeHint   (optional)
     * @param  bool $useEncryption   (optional)
     * @param  string $useEncryptionTypeHint   (optional)
     * @param  string $nameIdFormat   (optional)
     * @param  string $nameIdFormatTypeHint   (optional)
     * @param  string $digestMethod   (optional)
     * @param  string $digestMethodTypeHint   (optional)
     * @param  string $signatureMethod   (optional)
     * @param  string $signatureMethodTypeHint   (optional)
     * @param  string $userIntermediatePath   (optional)
     * @param  string $userIntermediatePathTypeHint   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postConfigAdobeGraniteSamlAuthenticationHandler($keyStorePassword = null, $keyStorePasswordTypeHint = null, $serviceRanking = null, $serviceRankingTypeHint = null, $idpHttpRedirect = null, $idpHttpRedirectTypeHint = null, $createUser = null, $createUserTypeHint = null, $defaultRedirectUrl = null, $defaultRedirectUrlTypeHint = null, $userIDAttribute = null, $userIDAttributeTypeHint = null, array $defaultGroups = null, $defaultGroupsTypeHint = null, $idpCertAlias = null, $idpCertAliasTypeHint = null, $addGroupMemberships = null, $addGroupMembershipsTypeHint = null, array $path = null, $pathTypeHint = null, array $synchronizeAttributes = null, $synchronizeAttributesTypeHint = null, $clockTolerance = null, $clockToleranceTypeHint = null, $groupMembershipAttribute = null, $groupMembershipAttributeTypeHint = null, $idpUrl = null, $idpUrlTypeHint = null, $logoutUrl = null, $logoutUrlTypeHint = null, $serviceProviderEntityId = null, $serviceProviderEntityIdTypeHint = null, $assertionConsumerServiceURL = null, $assertionConsumerServiceURLTypeHint = null, $handleLogout = null, $handleLogoutTypeHint = null, $spPrivateKeyAlias = null, $spPrivateKeyAliasTypeHint = null, $useEncryption = null, $useEncryptionTypeHint = null, $nameIdFormat = null, $nameIdFormatTypeHint = null, $digestMethod = null, $digestMethodTypeHint = null, $signatureMethod = null, $signatureMethodTypeHint = null, $userIntermediatePath = null, $userIntermediatePathTypeHint = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postConfigApacheFelixJettyBasedHttpService
     *
     * @param  bool $orgApacheFelixHttpsNio   (optional)
     * @param  string $orgApacheFelixHttpsNioTypeHint   (optional)
     * @param  string $orgApacheFelixHttpsKeystore   (optional)
     * @param  string $orgApacheFelixHttpsKeystoreTypeHint   (optional)
     * @param  string $orgApacheFelixHttpsKeystorePassword   (optional)
     * @param  string $orgApacheFelixHttpsKeystorePasswordTypeHint   (optional)
     * @param  string $orgApacheFelixHttpsKeystoreKey   (optional)
     * @param  string $orgApacheFelixHttpsKeystoreKeyTypeHint   (optional)
     * @param  string $orgApacheFelixHttpsKeystoreKeyPassword   (optional)
     * @param  string $orgApacheFelixHttpsKeystoreKeyPasswordTypeHint   (optional)
     * @param  string $orgApacheFelixHttpsTruststore   (optional)
     * @param  string $orgApacheFelixHttpsTruststoreTypeHint   (optional)
     * @param  string $orgApacheFelixHttpsTruststorePassword   (optional)
     * @param  string $orgApacheFelixHttpsTruststorePasswordTypeHint   (optional)
     * @param  string $orgApacheFelixHttpsClientcertificate   (optional)
     * @param  string $orgApacheFelixHttpsClientcertificateTypeHint   (optional)
     * @param  bool $orgApacheFelixHttpsEnable   (optional)
     * @param  string $orgApacheFelixHttpsEnableTypeHint   (optional)
     * @param  string $orgOsgiServiceHttpPortSecure   (optional)
     * @param  string $orgOsgiServiceHttpPortSecureTypeHint   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postConfigApacheFelixJettyBasedHttpService($orgApacheFelixHttpsNio = null, $orgApacheFelixHttpsNioTypeHint = null, $orgApacheFelixHttpsKeystore = null, $orgApacheFelixHttpsKeystoreTypeHint = null, $orgApacheFelixHttpsKeystorePassword = null, $orgApacheFelixHttpsKeystorePasswordTypeHint = null, $orgApacheFelixHttpsKeystoreKey = null, $orgApacheFelixHttpsKeystoreKeyTypeHint = null, $orgApacheFelixHttpsKeystoreKeyPassword = null, $orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = null, $orgApacheFelixHttpsTruststore = null, $orgApacheFelixHttpsTruststoreTypeHint = null, $orgApacheFelixHttpsTruststorePassword = null, $orgApacheFelixHttpsTruststorePasswordTypeHint = null, $orgApacheFelixHttpsClientcertificate = null, $orgApacheFelixHttpsClientcertificateTypeHint = null, $orgApacheFelixHttpsEnable = null, $orgApacheFelixHttpsEnableTypeHint = null, $orgOsgiServiceHttpPortSecure = null, $orgOsgiServiceHttpPortSecureTypeHint = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postConfigApacheHttpComponentsProxyConfiguration
     *
     * @param  string $proxyHost   (optional)
     * @param  string $proxyHostTypeHint   (optional)
     * @param  int $proxyPort   (optional)
     * @param  string $proxyPortTypeHint   (optional)
     * @param  string[] $proxyExceptions   (optional)
     * @param  string $proxyExceptionsTypeHint   (optional)
     * @param  bool $proxyEnabled   (optional)
     * @param  string $proxyEnabledTypeHint   (optional)
     * @param  string $proxyUser   (optional)
     * @param  string $proxyUserTypeHint   (optional)
     * @param  string $proxyPassword   (optional)
     * @param  string $proxyPasswordTypeHint   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postConfigApacheHttpComponentsProxyConfiguration($proxyHost = null, $proxyHostTypeHint = null, $proxyPort = null, $proxyPortTypeHint = null, array $proxyExceptions = null, $proxyExceptionsTypeHint = null, $proxyEnabled = null, $proxyEnabledTypeHint = null, $proxyUser = null, $proxyUserTypeHint = null, $proxyPassword = null, $proxyPasswordTypeHint = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postConfigApacheSlingDavExServlet
     *
     * @param  string $alias   (optional)
     * @param  string $aliasTypeHint   (optional)
     * @param  bool $davCreateAbsoluteUri   (optional)
     * @param  string $davCreateAbsoluteUriTypeHint   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postConfigApacheSlingDavExServlet($alias = null, $aliasTypeHint = null, $davCreateAbsoluteUri = null, $davCreateAbsoluteUriTypeHint = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postConfigApacheSlingGetServlet
     *
     * @param  string $jsonMaximumresults   (optional)
     * @param  string $jsonMaximumresultsTypeHint   (optional)
     * @param  bool $enableHtml   (optional)
     * @param  string $enableHtmlTypeHint   (optional)
     * @param  bool $enableTxt   (optional)
     * @param  string $enableTxtTypeHint   (optional)
     * @param  bool $enableXml   (optional)
     * @param  string $enableXmlTypeHint   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postConfigApacheSlingGetServlet($jsonMaximumresults = null, $jsonMaximumresultsTypeHint = null, $enableHtml = null, $enableHtmlTypeHint = null, $enableTxt = null, $enableTxtTypeHint = null, $enableXml = null, $enableXmlTypeHint = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postConfigApacheSlingReferrerFilter
     *
     * @param  bool $allowEmpty   (optional)
     * @param  string $allowEmptyTypeHint   (optional)
     * @param  string $allowHosts   (optional)
     * @param  string $allowHostsTypeHint   (optional)
     * @param  string $allowHostsRegexp   (optional)
     * @param  string $allowHostsRegexpTypeHint   (optional)
     * @param  string $filterMethods   (optional)
     * @param  string $filterMethodsTypeHint   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postConfigApacheSlingReferrerFilter($allowEmpty = null, $allowEmptyTypeHint = null, $allowHosts = null, $allowHostsTypeHint = null, $allowHostsRegexp = null, $allowHostsRegexpTypeHint = null, $filterMethods = null, $filterMethodsTypeHint = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postNode
     *
     * @param  string $path   (required)
     * @param  string $name   (required)
     * @param  string $operation   (optional)
     * @param  string $deleteAuthorizable   (optional)
     * @param  UploadedFile $file   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postNode($path, $name, $operation = null, $deleteAuthorizable = null, UploadedFile $file = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postNodeRw
     *
     * @param  string $path   (required)
     * @param  string $name   (required)
     * @param  string $addMembers   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postNodeRw($path, $name, $addMembers = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postPath
     *
     * @param  string $path   (required)
     * @param  string $jcrprimaryType   (required)
     * @param  string $name   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postPath($path, $jcrprimaryType, $name, &$responseCode, array &$responseHeaders);

    /**
     * Operation postQuery
     *
     * @param  string $path   (required)
     * @param  float $pLimit   (required)
     * @param  string $_1property   (required)
     * @param  string $_1propertyValue   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return string
     *
     */
    public function postQuery($path, $pLimit, $_1property, $_1propertyValue, &$responseCode, array &$responseHeaders);

    /**
     * Operation postTreeActivation
     *
     * @param  bool $ignoredeactivated   (required)
     * @param  bool $onlymodified   (required)
     * @param  string $path   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function postTreeActivation($ignoredeactivated, $onlymodified, $path, &$responseCode, array &$responseHeaders);

    /**
     * Operation postTruststore
     *
     * @param  string $operation   (optional)
     * @param  string $newPassword   (optional)
     * @param  string $rePassword   (optional)
     * @param  string $keyStoreType   (optional)
     * @param  string $removeAlias   (optional)
     * @param  UploadedFile $certificate   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return string
     *
     */
    public function postTruststore($operation = null, $newPassword = null, $rePassword = null, $keyStoreType = null, $removeAlias = null, UploadedFile $certificate = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation postTruststorePKCS12
     *
     * @param  UploadedFile $truststoreP12   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return string
     *
     */
    public function postTruststorePKCS12(UploadedFile $truststoreP12 = null, &$responseCode, array &$responseHeaders);
}
