<?php
/**
 * CrxApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use OpenAPIServer\AbstractApiController;

/**
 * CrxApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class CrxApi extends AbstractApiController {

    /**
     * GET getCrxdeStatus
     * Summary: 
     * Notes: 
     * Output-Formats: [plain/text]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getCrxdeStatus($request, $response, $args) {
        $response->write('How about implementing getCrxdeStatus as a GET method ?');
        return $response;
    }
    
    /**
     * GET getInstallStatus
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getInstallStatus($request, $response, $args) {
        $response->write('How about implementing getInstallStatus as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPackageManagerServlet
     * Summary: 
     * Notes: 
     * Output-Formats: [text/html]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPackageManagerServlet($request, $response, $args) {
        $response->write('How about implementing getPackageManagerServlet as a GET method ?');
        return $response;
    }
    
    /**
     * POST postPackageService
     * Summary: 
     * Notes: 
     * Output-Formats: [text/xml]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postPackageService($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $cmd = $request->getQueryParam('cmd');
        $response->write('How about implementing postPackageService as a POST method ?');
        return $response;
    }
    
    /**
     * POST postPackageServiceJson
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postPackageServiceJson($request, $response, $args) {
        $path = $args['path'];
        $queryParams = $request->getQueryParams();
        $cmd = $request->getQueryParam('cmd');
        $groupName = $request->getQueryParam('groupName');
        $packageName = $request->getQueryParam('packageName');
        $packageVersion = $request->getQueryParam('packageVersion');
        $charset = $request->getQueryParam('_charset_');
        $force = $request->getQueryParam('force');
        $recursive = $request->getQueryParam('recursive');
        $package = (key_exists('package', $request->getUploadedFiles())) ? $request->getUploadedFiles()['package'] : null;
        $response->write('How about implementing postPackageServiceJson as a POST method ?');
        return $response;
    }
    
    /**
     * POST postPackageUpdate
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postPackageUpdate($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $groupName = $request->getQueryParam('groupName');
        $packageName = $request->getQueryParam('packageName');
        $version = $request->getQueryParam('version');
        $path = $request->getQueryParam('path');
        $filter = $request->getQueryParam('filter');
        $charset = $request->getQueryParam('_charset_');
        $response->write('How about implementing postPackageUpdate as a POST method ?');
        return $response;
    }
    
    /**
     * POST postSetPassword
     * Summary: 
     * Notes: 
     * Output-Formats: [text/plain]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postSetPassword($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $old = $request->getQueryParam('old');
        $plain = $request->getQueryParam('plain');
        $verify = $request->getQueryParam('verify');
        $response->write('How about implementing postSetPassword as a POST method ?');
        return $response;
    }
    
}
