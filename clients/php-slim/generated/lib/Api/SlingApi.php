<?php
/**
 * SlingApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use OpenAPIServer\AbstractApiController;

/**
 * SlingApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class SlingApi extends AbstractApiController {

    /**
     * DELETE deleteAgent
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function deleteAgent($request, $response, $args) {
        $runmode = $args['runmode'];
        $name = $args['name'];
        $response->write('How about implementing deleteAgent as a DELETE method ?');
        return $response;
    }
    
    /**
     * DELETE deleteNode
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function deleteNode($request, $response, $args) {
        $path = $args['path'];
        $name = $args['name'];
        $response->write('How about implementing deleteNode as a DELETE method ?');
        return $response;
    }
    
    /**
     * GET getAgent
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getAgent($request, $response, $args) {
        $runmode = $args['runmode'];
        $name = $args['name'];
        $response->write('How about implementing getAgent as a GET method ?');
        return $response;
    }
    
    /**
     * GET getAgents
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getAgents($request, $response, $args) {
        $runmode = $args['runmode'];
        $response->write('How about implementing getAgents as a GET method ?');
        return $response;
    }
    
    /**
     * GET getAuthorizableKeystore
     * Summary: 
     * Notes: 
     * Output-Formats: [text/plain]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getAuthorizableKeystore($request, $response, $args) {
        $intermediatePath = $args['intermediatePath'];
        $authorizableId = $args['authorizableId'];
        $response->write('How about implementing getAuthorizableKeystore as a GET method ?');
        return $response;
    }
    
    /**
     * GET getKeystore
     * Summary: 
     * Notes: 
     * Output-Formats: [application/octet-stream]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getKeystore($request, $response, $args) {
        $intermediatePath = $args['intermediatePath'];
        $authorizableId = $args['authorizableId'];
        $response->write('How about implementing getKeystore as a GET method ?');
        return $response;
    }
    
    /**
     * GET getNode
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getNode($request, $response, $args) {
        $path = $args['path'];
        $name = $args['name'];
        $response->write('How about implementing getNode as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPackage
     * Summary: 
     * Notes: 
     * Output-Formats: [application/octet-stream]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPackage($request, $response, $args) {
        $group = $args['group'];
        $name = $args['name'];
        $version = $args['version'];
        $response->write('How about implementing getPackage as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPackageFilter
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPackageFilter($request, $response, $args) {
        $group = $args['group'];
        $name = $args['name'];
        $version = $args['version'];
        $response->write('How about implementing getPackageFilter as a GET method ?');
        return $response;
    }
    
    /**
     * GET getQuery
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getQuery($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $path = $request->getQueryParam('path');
        $pLimit = $request->getQueryParam('p.limit');
        $_1property = $request->getQueryParam('1_property');
        $_1propertyValue = $request->getQueryParam('1_property.value');
        $response->write('How about implementing getQuery as a GET method ?');
        return $response;
    }
    
    /**
     * GET getTruststore
     * Summary: 
     * Notes: 
     * Output-Formats: [application/octet-stream]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getTruststore($request, $response, $args) {
        $response->write('How about implementing getTruststore as a GET method ?');
        return $response;
    }
    
    /**
     * GET getTruststoreInfo
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getTruststoreInfo($request, $response, $args) {
        $response->write('How about implementing getTruststoreInfo as a GET method ?');
        return $response;
    }
    
    /**
     * POST postAgent
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postAgent($request, $response, $args) {
        $runmode = $args['runmode'];
        $name = $args['name'];
        $queryParams = $request->getQueryParams();
        $jcrcontentcqdistribute = $request->getQueryParam('jcr:content/cq:distribute');
        $jcrcontentcqdistributeTypeHint = $request->getQueryParam('jcr:content/cq:distribute@TypeHint');
        $jcrcontentcqname = $request->getQueryParam('jcr:content/cq:name');
        $jcrcontentcqtemplate = $request->getQueryParam('jcr:content/cq:template');
        $jcrcontentenabled = $request->getQueryParam('jcr:content/enabled');
        $jcrcontentjcrdescription = $request->getQueryParam('jcr:content/jcr:description');
        $jcrcontentjcrlastModified = $request->getQueryParam('jcr:content/jcr:lastModified');
        $jcrcontentjcrlastModifiedBy = $request->getQueryParam('jcr:content/jcr:lastModifiedBy');
        $jcrcontentjcrmixinTypes = $request->getQueryParam('jcr:content/jcr:mixinTypes');
        $jcrcontentjcrtitle = $request->getQueryParam('jcr:content/jcr:title');
        $jcrcontentlogLevel = $request->getQueryParam('jcr:content/logLevel');
        $jcrcontentnoStatusUpdate = $request->getQueryParam('jcr:content/noStatusUpdate');
        $jcrcontentnoVersioning = $request->getQueryParam('jcr:content/noVersioning');
        $jcrcontentprotocolConnectTimeout = $request->getQueryParam('jcr:content/protocolConnectTimeout');
        $jcrcontentprotocolHTTPConnectionClosed = $request->getQueryParam('jcr:content/protocolHTTPConnectionClosed');
        $jcrcontentprotocolHTTPExpired = $request->getQueryParam('jcr:content/protocolHTTPExpired');
        $jcrcontentprotocolHTTPHeaders = $request->getQueryParam('jcr:content/protocolHTTPHeaders');
        $jcrcontentprotocolHTTPHeadersTypeHint = $request->getQueryParam('jcr:content/protocolHTTPHeaders@TypeHint');
        $jcrcontentprotocolHTTPMethod = $request->getQueryParam('jcr:content/protocolHTTPMethod');
        $jcrcontentprotocolHTTPSRelaxed = $request->getQueryParam('jcr:content/protocolHTTPSRelaxed');
        $jcrcontentprotocolInterface = $request->getQueryParam('jcr:content/protocolInterface');
        $jcrcontentprotocolSocketTimeout = $request->getQueryParam('jcr:content/protocolSocketTimeout');
        $jcrcontentprotocolVersion = $request->getQueryParam('jcr:content/protocolVersion');
        $jcrcontentproxyNTLMDomain = $request->getQueryParam('jcr:content/proxyNTLMDomain');
        $jcrcontentproxyNTLMHost = $request->getQueryParam('jcr:content/proxyNTLMHost');
        $jcrcontentproxyHost = $request->getQueryParam('jcr:content/proxyHost');
        $jcrcontentproxyPassword = $request->getQueryParam('jcr:content/proxyPassword');
        $jcrcontentproxyPort = $request->getQueryParam('jcr:content/proxyPort');
        $jcrcontentproxyUser = $request->getQueryParam('jcr:content/proxyUser');
        $jcrcontentqueueBatchMaxSize = $request->getQueryParam('jcr:content/queueBatchMaxSize');
        $jcrcontentqueueBatchMode = $request->getQueryParam('jcr:content/queueBatchMode');
        $jcrcontentqueueBatchWaitTime = $request->getQueryParam('jcr:content/queueBatchWaitTime');
        $jcrcontentretryDelay = $request->getQueryParam('jcr:content/retryDelay');
        $jcrcontentreverseReplication = $request->getQueryParam('jcr:content/reverseReplication');
        $jcrcontentserializationType = $request->getQueryParam('jcr:content/serializationType');
        $jcrcontentslingresourceType = $request->getQueryParam('jcr:content/sling:resourceType');
        $jcrcontentssl = $request->getQueryParam('jcr:content/ssl');
        $jcrcontenttransportNTLMDomain = $request->getQueryParam('jcr:content/transportNTLMDomain');
        $jcrcontenttransportNTLMHost = $request->getQueryParam('jcr:content/transportNTLMHost');
        $jcrcontenttransportPassword = $request->getQueryParam('jcr:content/transportPassword');
        $jcrcontenttransportUri = $request->getQueryParam('jcr:content/transportUri');
        $jcrcontenttransportUser = $request->getQueryParam('jcr:content/transportUser');
        $jcrcontenttriggerDistribute = $request->getQueryParam('jcr:content/triggerDistribute');
        $jcrcontenttriggerModified = $request->getQueryParam('jcr:content/triggerModified');
        $jcrcontenttriggerOnOffTime = $request->getQueryParam('jcr:content/triggerOnOffTime');
        $jcrcontenttriggerReceive = $request->getQueryParam('jcr:content/triggerReceive');
        $jcrcontenttriggerSpecific = $request->getQueryParam('jcr:content/triggerSpecific');
        $jcrcontentuserId = $request->getQueryParam('jcr:content/userId');
        $jcrprimaryType = $request->getQueryParam('jcr:primaryType');
        $operation = $request->getQueryParam(':operation');
        $response->write('How about implementing postAgent as a POST method ?');
        return $response;
    }
    
    /**
     * POST postAuthorizableKeystore
     * Summary: 
     * Notes: 
     * Output-Formats: [text/plain]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postAuthorizableKeystore($request, $response, $args) {
        $intermediatePath = $args['intermediatePath'];
        $authorizableId = $args['authorizableId'];
        $queryParams = $request->getQueryParams();
        $operation = $request->getQueryParam(':operation');
        $currentPassword = $request->getQueryParam('currentPassword');
        $newPassword = $request->getQueryParam('newPassword');
        $rePassword = $request->getQueryParam('rePassword');
        $keyPassword = $request->getQueryParam('keyPassword');
        $keyStorePass = $request->getQueryParam('keyStorePass');
        $alias = $request->getQueryParam('alias');
        $newAlias = $request->getQueryParam('newAlias');
        $removeAlias = $request->getQueryParam('removeAlias');
        $certChain = (key_exists('cert-chain', $request->getUploadedFiles())) ? $request->getUploadedFiles()['cert-chain'] : null;
        $pk = (key_exists('pk', $request->getUploadedFiles())) ? $request->getUploadedFiles()['pk'] : null;
        $keyStore = (key_exists('keyStore', $request->getUploadedFiles())) ? $request->getUploadedFiles()['keyStore'] : null;
        $response->write('How about implementing postAuthorizableKeystore as a POST method ?');
        return $response;
    }
    
    /**
     * POST postAuthorizables
     * Summary: 
     * Notes: 
     * Output-Formats: [text/html]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postAuthorizables($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $authorizableId = $request->getQueryParam('authorizableId');
        $intermediatePath = $request->getQueryParam('intermediatePath');
        $createUser = $request->getQueryParam('createUser');
        $createGroup = $request->getQueryParam('createGroup');
        $reppassword = $request->getQueryParam('rep:password');
        $profilegivenName = $request->getQueryParam('profile/givenName');
        $response->write('How about implementing postAuthorizables as a POST method ?');
        return $response;
    }
    
    /**
     * POST postConfigAdobeGraniteSamlAuthenticationHandler
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postConfigAdobeGraniteSamlAuthenticationHandler($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $keyStorePassword = $request->getQueryParam('keyStorePassword');
        $keyStorePasswordTypeHint = $request->getQueryParam('keyStorePassword@TypeHint');
        $serviceRanking = $request->getQueryParam('service.ranking');
        $serviceRankingTypeHint = $request->getQueryParam('service.ranking@TypeHint');
        $idpHttpRedirect = $request->getQueryParam('idpHttpRedirect');
        $idpHttpRedirectTypeHint = $request->getQueryParam('idpHttpRedirect@TypeHint');
        $createUser = $request->getQueryParam('createUser');
        $createUserTypeHint = $request->getQueryParam('createUser@TypeHint');
        $defaultRedirectUrl = $request->getQueryParam('defaultRedirectUrl');
        $defaultRedirectUrlTypeHint = $request->getQueryParam('defaultRedirectUrl@TypeHint');
        $userIDAttribute = $request->getQueryParam('userIDAttribute');
        $userIDAttributeTypeHint = $request->getQueryParam('userIDAttribute@TypeHint');
        $defaultGroups = $request->getQueryParam('defaultGroups');
        $defaultGroupsTypeHint = $request->getQueryParam('defaultGroups@TypeHint');
        $idpCertAlias = $request->getQueryParam('idpCertAlias');
        $idpCertAliasTypeHint = $request->getQueryParam('idpCertAlias@TypeHint');
        $addGroupMemberships = $request->getQueryParam('addGroupMemberships');
        $addGroupMembershipsTypeHint = $request->getQueryParam('addGroupMemberships@TypeHint');
        $path = $request->getQueryParam('path');
        $pathTypeHint = $request->getQueryParam('path@TypeHint');
        $synchronizeAttributes = $request->getQueryParam('synchronizeAttributes');
        $synchronizeAttributesTypeHint = $request->getQueryParam('synchronizeAttributes@TypeHint');
        $clockTolerance = $request->getQueryParam('clockTolerance');
        $clockToleranceTypeHint = $request->getQueryParam('clockTolerance@TypeHint');
        $groupMembershipAttribute = $request->getQueryParam('groupMembershipAttribute');
        $groupMembershipAttributeTypeHint = $request->getQueryParam('groupMembershipAttribute@TypeHint');
        $idpUrl = $request->getQueryParam('idpUrl');
        $idpUrlTypeHint = $request->getQueryParam('idpUrl@TypeHint');
        $logoutUrl = $request->getQueryParam('logoutUrl');
        $logoutUrlTypeHint = $request->getQueryParam('logoutUrl@TypeHint');
        $serviceProviderEntityId = $request->getQueryParam('serviceProviderEntityId');
        $serviceProviderEntityIdTypeHint = $request->getQueryParam('serviceProviderEntityId@TypeHint');
        $assertionConsumerServiceURL = $request->getQueryParam('assertionConsumerServiceURL');
        $assertionConsumerServiceURLTypeHint = $request->getQueryParam('assertionConsumerServiceURL@TypeHint');
        $handleLogout = $request->getQueryParam('handleLogout');
        $handleLogoutTypeHint = $request->getQueryParam('handleLogout@TypeHint');
        $spPrivateKeyAlias = $request->getQueryParam('spPrivateKeyAlias');
        $spPrivateKeyAliasTypeHint = $request->getQueryParam('spPrivateKeyAlias@TypeHint');
        $useEncryption = $request->getQueryParam('useEncryption');
        $useEncryptionTypeHint = $request->getQueryParam('useEncryption@TypeHint');
        $nameIdFormat = $request->getQueryParam('nameIdFormat');
        $nameIdFormatTypeHint = $request->getQueryParam('nameIdFormat@TypeHint');
        $digestMethod = $request->getQueryParam('digestMethod');
        $digestMethodTypeHint = $request->getQueryParam('digestMethod@TypeHint');
        $signatureMethod = $request->getQueryParam('signatureMethod');
        $signatureMethodTypeHint = $request->getQueryParam('signatureMethod@TypeHint');
        $userIntermediatePath = $request->getQueryParam('userIntermediatePath');
        $userIntermediatePathTypeHint = $request->getQueryParam('userIntermediatePath@TypeHint');
        $response->write('How about implementing postConfigAdobeGraniteSamlAuthenticationHandler as a POST method ?');
        return $response;
    }
    
    /**
     * POST postConfigApacheFelixJettyBasedHttpService
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postConfigApacheFelixJettyBasedHttpService($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $orgApacheFelixHttpsNio = $request->getQueryParam('org.apache.felix.https.nio');
        $orgApacheFelixHttpsNioTypeHint = $request->getQueryParam('org.apache.felix.https.nio@TypeHint');
        $orgApacheFelixHttpsKeystore = $request->getQueryParam('org.apache.felix.https.keystore');
        $orgApacheFelixHttpsKeystoreTypeHint = $request->getQueryParam('org.apache.felix.https.keystore@TypeHint');
        $orgApacheFelixHttpsKeystorePassword = $request->getQueryParam('org.apache.felix.https.keystore.password');
        $orgApacheFelixHttpsKeystorePasswordTypeHint = $request->getQueryParam('org.apache.felix.https.keystore.password@TypeHint');
        $orgApacheFelixHttpsKeystoreKey = $request->getQueryParam('org.apache.felix.https.keystore.key');
        $orgApacheFelixHttpsKeystoreKeyTypeHint = $request->getQueryParam('org.apache.felix.https.keystore.key@TypeHint');
        $orgApacheFelixHttpsKeystoreKeyPassword = $request->getQueryParam('org.apache.felix.https.keystore.key.password');
        $orgApacheFelixHttpsKeystoreKeyPasswordTypeHint = $request->getQueryParam('org.apache.felix.https.keystore.key.password@TypeHint');
        $orgApacheFelixHttpsTruststore = $request->getQueryParam('org.apache.felix.https.truststore');
        $orgApacheFelixHttpsTruststoreTypeHint = $request->getQueryParam('org.apache.felix.https.truststore@TypeHint');
        $orgApacheFelixHttpsTruststorePassword = $request->getQueryParam('org.apache.felix.https.truststore.password');
        $orgApacheFelixHttpsTruststorePasswordTypeHint = $request->getQueryParam('org.apache.felix.https.truststore.password@TypeHint');
        $orgApacheFelixHttpsClientcertificate = $request->getQueryParam('org.apache.felix.https.clientcertificate');
        $orgApacheFelixHttpsClientcertificateTypeHint = $request->getQueryParam('org.apache.felix.https.clientcertificate@TypeHint');
        $orgApacheFelixHttpsEnable = $request->getQueryParam('org.apache.felix.https.enable');
        $orgApacheFelixHttpsEnableTypeHint = $request->getQueryParam('org.apache.felix.https.enable@TypeHint');
        $orgOsgiServiceHttpPortSecure = $request->getQueryParam('org.osgi.service.http.port.secure');
        $orgOsgiServiceHttpPortSecureTypeHint = $request->getQueryParam('org.osgi.service.http.port.secure@TypeHint');
        $response->write('How about implementing postConfigApacheFelixJettyBasedHttpService as a POST method ?');
        return $response;
    }
    
    /**
     * POST postConfigApacheHttpComponentsProxyConfiguration
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postConfigApacheHttpComponentsProxyConfiguration($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $proxyHost = $request->getQueryParam('proxy.host');
        $proxyHostTypeHint = $request->getQueryParam('proxy.host@TypeHint');
        $proxyPort = $request->getQueryParam('proxy.port');
        $proxyPortTypeHint = $request->getQueryParam('proxy.port@TypeHint');
        $proxyExceptions = $request->getQueryParam('proxy.exceptions');
        $proxyExceptionsTypeHint = $request->getQueryParam('proxy.exceptions@TypeHint');
        $proxyEnabled = $request->getQueryParam('proxy.enabled');
        $proxyEnabledTypeHint = $request->getQueryParam('proxy.enabled@TypeHint');
        $proxyUser = $request->getQueryParam('proxy.user');
        $proxyUserTypeHint = $request->getQueryParam('proxy.user@TypeHint');
        $proxyPassword = $request->getQueryParam('proxy.password');
        $proxyPasswordTypeHint = $request->getQueryParam('proxy.password@TypeHint');
        $response->write('How about implementing postConfigApacheHttpComponentsProxyConfiguration as a POST method ?');
        return $response;
    }
    
    /**
     * POST postConfigApacheSlingDavExServlet
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postConfigApacheSlingDavExServlet($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $alias = $request->getQueryParam('alias');
        $aliasTypeHint = $request->getQueryParam('alias@TypeHint');
        $davCreateAbsoluteUri = $request->getQueryParam('dav.create-absolute-uri');
        $davCreateAbsoluteUriTypeHint = $request->getQueryParam('dav.create-absolute-uri@TypeHint');
        $response->write('How about implementing postConfigApacheSlingDavExServlet as a POST method ?');
        return $response;
    }
    
    /**
     * POST postConfigApacheSlingGetServlet
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postConfigApacheSlingGetServlet($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $jsonMaximumresults = $request->getQueryParam('json.maximumresults');
        $jsonMaximumresultsTypeHint = $request->getQueryParam('json.maximumresults@TypeHint');
        $enableHtml = $request->getQueryParam('enable.html');
        $enableHtmlTypeHint = $request->getQueryParam('enable.html@TypeHint');
        $enableTxt = $request->getQueryParam('enable.txt');
        $enableTxtTypeHint = $request->getQueryParam('enable.txt@TypeHint');
        $enableXml = $request->getQueryParam('enable.xml');
        $enableXmlTypeHint = $request->getQueryParam('enable.xml@TypeHint');
        $response->write('How about implementing postConfigApacheSlingGetServlet as a POST method ?');
        return $response;
    }
    
    /**
     * POST postConfigApacheSlingReferrerFilter
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postConfigApacheSlingReferrerFilter($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $allowEmpty = $request->getQueryParam('allow.empty');
        $allowEmptyTypeHint = $request->getQueryParam('allow.empty@TypeHint');
        $allowHosts = $request->getQueryParam('allow.hosts');
        $allowHostsTypeHint = $request->getQueryParam('allow.hosts@TypeHint');
        $allowHostsRegexp = $request->getQueryParam('allow.hosts.regexp');
        $allowHostsRegexpTypeHint = $request->getQueryParam('allow.hosts.regexp@TypeHint');
        $filterMethods = $request->getQueryParam('filter.methods');
        $filterMethodsTypeHint = $request->getQueryParam('filter.methods@TypeHint');
        $response->write('How about implementing postConfigApacheSlingReferrerFilter as a POST method ?');
        return $response;
    }
    
    /**
     * POST postNode
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postNode($request, $response, $args) {
        $path = $args['path'];
        $name = $args['name'];
        $queryParams = $request->getQueryParams();
        $operation = $request->getQueryParam(':operation');
        $deleteAuthorizable = $request->getQueryParam('deleteAuthorizable');
        $file = (key_exists('file', $request->getUploadedFiles())) ? $request->getUploadedFiles()['file'] : null;
        $response->write('How about implementing postNode as a POST method ?');
        return $response;
    }
    
    /**
     * POST postNodeRw
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postNodeRw($request, $response, $args) {
        $path = $args['path'];
        $name = $args['name'];
        $queryParams = $request->getQueryParams();
        $addMembers = $request->getQueryParam('addMembers');
        $response->write('How about implementing postNodeRw as a POST method ?');
        return $response;
    }
    
    /**
     * POST postPath
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postPath($request, $response, $args) {
        $path = $args['path'];
        $queryParams = $request->getQueryParams();
        $jcrprimaryType = $request->getQueryParam('jcr:primaryType');
        $name = $request->getQueryParam(':name');
        $response->write('How about implementing postPath as a POST method ?');
        return $response;
    }
    
    /**
     * POST postQuery
     * Summary: 
     * Notes: 
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postQuery($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $path = $request->getQueryParam('path');
        $pLimit = $request->getQueryParam('p.limit');
        $_1property = $request->getQueryParam('1_property');
        $_1propertyValue = $request->getQueryParam('1_property.value');
        $response->write('How about implementing postQuery as a POST method ?');
        return $response;
    }
    
    /**
     * POST postTreeActivation
     * Summary: 
     * Notes: 
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postTreeActivation($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $ignoredeactivated = $request->getQueryParam('ignoredeactivated');
        $onlymodified = $request->getQueryParam('onlymodified');
        $path = $request->getQueryParam('path');
        $response->write('How about implementing postTreeActivation as a POST method ?');
        return $response;
    }
    
    /**
     * POST postTruststore
     * Summary: 
     * Notes: 
     * Output-Formats: [text/plain]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postTruststore($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $operation = $request->getQueryParam(':operation');
        $newPassword = $request->getQueryParam('newPassword');
        $rePassword = $request->getQueryParam('rePassword');
        $keyStoreType = $request->getQueryParam('keyStoreType');
        $removeAlias = $request->getQueryParam('removeAlias');
        $certificate = (key_exists('certificate', $request->getUploadedFiles())) ? $request->getUploadedFiles()['certificate'] : null;
        $response->write('How about implementing postTruststore as a POST method ?');
        return $response;
    }
    
    /**
     * POST postTruststorePKCS12
     * Summary: 
     * Notes: 
     * Output-Formats: [text/plain]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postTruststorePKCS12($request, $response, $args) {
        $truststoreP12 = (key_exists('truststore.p12', $request->getUploadedFiles())) ? $request->getUploadedFiles()['truststore.p12'] : null;
        $response->write('How about implementing postTruststorePKCS12 as a POST method ?');
        return $response;
    }
    
}
