<?php
/**
 * SlimRouter
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/** 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use OpenAPIServer\Api\ConsoleApi;
use OpenAPIServer\Api\CqApi;
use OpenAPIServer\Api\CrxApi;
use OpenAPIServer\Api\CustomApi;
use OpenAPIServer\Api\SlingApi;
use Slim\App;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Tuupola\Middleware\HttpBasicAuthentication;

/**
 * SlimRouter Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class SlimRouter {

    /**
     * @var $slimApp Slim\App instance
     */
    private $slimApp;

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $container Either a ContainerInterface or an associative array of app settings
     * @throws InvalidArgumentException when no container is provided that implements ContainerInterface
     */
    public function __construct($container = []) {
        $app = new App($container);

        $basicAuth = new HttpBasicAuthentication([
            "secure" => false,
            "authenticator" => function ($arguments) {
                $user = $arguments["user"];
                $password = $arguments["password"];
                return false;
            }
        ]);

        $app->GET(
            '//system/console/status-productinfo.json', ConsoleApi::class . ':getAemProductInfo'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//system/console/configMgr', ConsoleApi::class . ':getConfigMgr'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler', ConsoleApi::class . ':postSamlConfiguration'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//system/console/bundles/{name}', ConsoleApi::class . ':postBundle'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//system/console/jmx/com.adobe.granite:type=Repository/op/{action}', ConsoleApi::class . ':postJmxRepository'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//libs/granite/core/content/login.html', CqApi::class . ':getLoginPage'
        );
        $app->POST(
            '//.cqactions.html', CqApi::class . ':postCqActions'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//crx/server/crx.default/jcr:root/.1.json', CrxApi::class . ':getCrxdeStatus'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//crx/packmgr/installstatus.jsp', CrxApi::class . ':getInstallStatus'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//crx/packmgr/service/script.html', CrxApi::class . ':getPackageManagerServlet'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//crx/packmgr/service.jsp', CrxApi::class . ':postPackageService'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//crx/packmgr/update.jsp', CrxApi::class . ':postPackageUpdate'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//crx/explorer/ui/setpassword.jsp', CrxApi::class . ':postSetPassword'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//crx/packmgr/service/.json/{path}', CrxApi::class . ':postPackageServiceJson'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//system/health', CustomApi::class . ':getAemHealthCheck'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck', CustomApi::class . ':postConfigAemHealthCheckServlet'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/com.shinesolutions.aem.passwordreset.Activator', CustomApi::class . ':postConfigAemPasswordReset'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//bin/querybuilder.json', SlingApi::class . ':getQuery'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//etc/truststore/truststore.p12', SlingApi::class . ':getTruststore'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//libs/granite/security/truststore.json', SlingApi::class . ':getTruststoreInfo'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//libs/granite/security/post/authorizables', SlingApi::class . ':postAuthorizables'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config', SlingApi::class . ':postConfigAdobeGraniteSamlAuthenticationHandler'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/org.apache.felix.http', SlingApi::class . ':postConfigApacheFelixJettyBasedHttpService'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/org.apache.http.proxyconfigurator.config', SlingApi::class . ':postConfigApacheHttpComponentsProxyConfiguration'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet', SlingApi::class . ':postConfigApacheSlingDavExServlet'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet', SlingApi::class . ':postConfigApacheSlingGetServlet'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//apps/system/config/org.apache.sling.security.impl.ReferrerFilter', SlingApi::class . ':postConfigApacheSlingReferrerFilter'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//bin/querybuilder.json', SlingApi::class . ':postQuery'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//etc/replication/treeactivation.html', SlingApi::class . ':postTreeActivation'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//libs/granite/security/post/truststore', SlingApi::class . ':postTruststore'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//etc/truststore', SlingApi::class . ':postTruststorePKCS12'
        )->add(
            $basicAuth
        );
        $app->DELETE(
            '//etc/replication/agents.{runmode}/{name}', SlingApi::class . ':deleteAgent'
        )->add(
            $basicAuth
        );
        $app->DELETE(
            '//{path}/{name}', SlingApi::class . ':deleteNode'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//etc/replication/agents.{runmode}/{name}', SlingApi::class . ':getAgent'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//etc/replication/agents.{runmode}.-1.json', SlingApi::class . ':getAgents'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//{intermediatePath}/{authorizableId}.ks.json', SlingApi::class . ':getAuthorizableKeystore'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//{intermediatePath}/{authorizableId}/keystore/store.p12', SlingApi::class . ':getKeystore'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//{path}/{name}', SlingApi::class . ':getNode'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//etc/packages/{group}/{name}-{version}.zip', SlingApi::class . ':getPackage'
        )->add(
            $basicAuth
        );
        $app->GET(
            '//etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json', SlingApi::class . ':getPackageFilter'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//etc/replication/agents.{runmode}/{name}', SlingApi::class . ':postAgent'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//{intermediatePath}/{authorizableId}.ks.html', SlingApi::class . ':postAuthorizableKeystore'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//{path}/{name}', SlingApi::class . ':postNode'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//{path}/{name}.rw.html', SlingApi::class . ':postNodeRw'
        )->add(
            $basicAuth
        );
        $app->POST(
            '//{path}/', SlingApi::class . ':postPath'
        )->add(
            $basicAuth
        );

        $this->slimApp = $app;
    }

    /**
     * Returns Slim Framework instance
     * @return App
     */
    public function getSlimApp() {
        return $this->slimApp;
    }
}
