note
 description:"[
		Adobe Experience Manager (AEM) API
 		Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
  		OpenAPI spec version: 3.2.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CUSTOM_API

inherit

    API_I


feature -- API Access


	aem_health_check (tags: STRING_32; combine_tags_or: BOOLEAN): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: tags  (optional)
			-- 
			-- argument: combine_tags_or  (optional)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/system/health"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "tags", tags));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "combineTagsOr", combine_tags_or));


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_config_aem_health_check_servlet (bundles_ignored: detachable LIST [STRING_32]; bundles_ignored_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: bundles_ignored  (optional)
			-- 
			-- argument: bundles_ignored_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "bundles.ignored", bundles_ignored));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "bundles.ignored@TypeHint", bundles_ignored_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_config_aem_password_reset (pwdreset_authorizables: detachable LIST [STRING_32]; pwdreset_authorizables_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: pwdreset_authorizables  (optional)
			-- 
			-- argument: pwdreset_authorizables_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "pwdreset.authorizables", pwdreset_authorizables));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pwdreset.authorizables@TypeHint", pwdreset_authorizables_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	


end
