note
 description:"[
		Adobe Experience Manager (AEM) API
 		Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
  		OpenAPI spec version: 3.2.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CONSOLE_API

inherit

    API_I


feature -- API Access


	aem_product_info : detachable LIST [STRING_32]
			-- 
			-- 
			-- 
			-- 
			-- Result LIST [STRING_32]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/system/console/status-productinfo.json"


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [STRING_32] } l_response.data ({ LIST [STRING_32] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	config_mgr : detachable STRING_32
			-- 
			-- 
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/system/console/configMgr"


			if attached {STRING} api_client.select_header_accept (<<"text/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_bundle (name: STRING_32; action: STRING_32)
			-- 
			-- 
			-- 
			-- argument: name  (required)
			-- 
			-- argument: action  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/system/console/bundles/{name}"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "action", action));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_jmx_repository (action: STRING_32)
			-- 
			-- 
			-- 
			-- argument: action  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
			l_path.replace_substring_all ("{"+"action"+"}", api_client.url_encode (action.out))


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_saml_configuration (post: BOOLEAN; apply: BOOLEAN; delete: BOOLEAN; action: STRING_32; location: STRING_32; path: detachable LIST [STRING_32]; service_ranking: INTEGER_32; idp_url: STRING_32; idp_cert_alias: STRING_32; idp_http_redirect: BOOLEAN; service_provider_entity_id: STRING_32; assertion_consumer_service_ur_l: STRING_32; sp_private_key_alias: STRING_32; key_store_password: STRING_32; default_redirect_url: STRING_32; user_id_attribute: STRING_32; use_encryption: BOOLEAN; create_user: BOOLEAN; add_group_memberships: BOOLEAN; group_membership_attribute: STRING_32; default_groups: detachable LIST [STRING_32]; name_id_format: STRING_32; synchronize_attributes: detachable LIST [STRING_32]; handle_logout: BOOLEAN; logout_url: STRING_32; clock_tolerance: INTEGER_32; digest_method: STRING_32; signature_method: STRING_32; user_intermediate_path: STRING_32; propertylist: detachable LIST [STRING_32]): detachable SAML_CONFIGURATION_INFO
			-- 
			-- 
			-- 
			-- argument: post  (optional)
			-- 
			-- argument: apply  (optional)
			-- 
			-- argument: delete  (optional)
			-- 
			-- argument: action  (optional)
			-- 
			-- argument: location  (optional)
			-- 
			-- argument: path  (optional)
			-- 
			-- argument: service_ranking  (optional)
			-- 
			-- argument: idp_url  (optional)
			-- 
			-- argument: idp_cert_alias  (optional)
			-- 
			-- argument: idp_http_redirect  (optional)
			-- 
			-- argument: service_provider_entity_id  (optional)
			-- 
			-- argument: assertion_consumer_service_ur_l  (optional)
			-- 
			-- argument: sp_private_key_alias  (optional)
			-- 
			-- argument: key_store_password  (optional)
			-- 
			-- argument: default_redirect_url  (optional)
			-- 
			-- argument: user_id_attribute  (optional)
			-- 
			-- argument: use_encryption  (optional)
			-- 
			-- argument: create_user  (optional)
			-- 
			-- argument: add_group_memberships  (optional)
			-- 
			-- argument: group_membership_attribute  (optional)
			-- 
			-- argument: default_groups  (optional)
			-- 
			-- argument: name_id_format  (optional)
			-- 
			-- argument: synchronize_attributes  (optional)
			-- 
			-- argument: handle_logout  (optional)
			-- 
			-- argument: logout_url  (optional)
			-- 
			-- argument: clock_tolerance  (optional)
			-- 
			-- argument: digest_method  (optional)
			-- 
			-- argument: signature_method  (optional)
			-- 
			-- argument: user_intermediate_path  (optional)
			-- 
			-- argument: propertylist  (optional)
			-- 
			-- 
			-- Result SAML_CONFIGURATION_INFO
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "post", post));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "apply", apply));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "delete", delete));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "action", action));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "$location", location));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "path", path));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "service.ranking", service_ranking));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpUrl", idp_url));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpCertAlias", idp_cert_alias));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpHttpRedirect", idp_http_redirect));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "serviceProviderEntityId", service_provider_entity_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "assertionConsumerServiceURL", assertion_consumer_service_ur_l));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "spPrivateKeyAlias", sp_private_key_alias));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keyStorePassword", key_store_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "defaultRedirectUrl", default_redirect_url));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "userIDAttribute", user_id_attribute));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "useEncryption", use_encryption));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "createUser", create_user));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "addGroupMemberships", add_group_memberships));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groupMembershipAttribute", group_membership_attribute));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "defaultGroups", default_groups));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "nameIdFormat", name_id_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "synchronizeAttributes", synchronize_attributes));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "handleLogout", handle_logout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "logoutUrl", logout_url));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "clockTolerance", clock_tolerance));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "digestMethod", digest_method));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "signatureMethod", signature_method));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "userIntermediatePath", user_intermediate_path));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "propertylist", propertylist));


			if attached {STRING} api_client.select_header_accept (<<"text/plain">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SAML_CONFIGURATION_INFO } l_response.data ({ SAML_CONFIGURATION_INFO }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
