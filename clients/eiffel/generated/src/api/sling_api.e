note
 description:"[
		Adobe Experience Manager (AEM) API
 		Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
  		OpenAPI spec version: 3.2.0-pre.0
 	    Contact: opensource@shinesolutions.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	SLING_API

inherit

    API_I


feature -- API Access


	agent (runmode: STRING_32; name: STRING_32)
			-- 
			-- 
			-- 
			-- argument: runmode  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/replication/agents.{runmode}/{name}"
			l_path.replace_substring_all ("{"+"runmode"+"}", api_client.url_encode (runmode.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	agents (runmode: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: runmode  (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/replication/agents.{runmode}.-1.json"
			l_path.replace_substring_all ("{"+"runmode"+"}", api_client.url_encode (runmode.out))


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	authorizable_keystore (intermediate_path: STRING_32; authorizable_id: STRING_32): detachable KEYSTORE_INFO
			-- 
			-- 
			-- 
			-- argument: intermediate_path  (required)
			-- 
			-- argument: authorizable_id  (required)
			-- 
			-- 
			-- Result KEYSTORE_INFO
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{intermediatePath}/{authorizableId}.ks.json"
			l_path.replace_substring_all ("{"+"intermediatePath"+"}", api_client.url_encode (intermediate_path.out))
			l_path.replace_substring_all ("{"+"authorizableId"+"}", api_client.url_encode (authorizable_id.out))


			if attached {STRING} api_client.select_header_accept (<<"text/plain">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { KEYSTORE_INFO } l_response.data ({ KEYSTORE_INFO }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	delete_agent (runmode: STRING_32; name: STRING_32)
			-- 
			-- 
			-- 
			-- argument: runmode  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/replication/agents.{runmode}/{name}"
			l_path.replace_substring_all ("{"+"runmode"+"}", api_client.url_encode (runmode.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	delete_node (path: STRING_32; name: STRING_32)
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{path}/{name}"
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	keystore (intermediate_path: STRING_32; authorizable_id: STRING_32): detachable FILE
			-- 
			-- 
			-- 
			-- argument: intermediate_path  (required)
			-- 
			-- argument: authorizable_id  (required)
			-- 
			-- 
			-- Result FILE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{intermediatePath}/{authorizableId}/keystore/store.p12"
			l_path.replace_substring_all ("{"+"intermediatePath"+"}", api_client.url_encode (intermediate_path.out))
			l_path.replace_substring_all ("{"+"authorizableId"+"}", api_client.url_encode (authorizable_id.out))


			if attached {STRING} api_client.select_header_accept (<<"application/octet-stream">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FILE } l_response.data ({ FILE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	node (path: STRING_32; name: STRING_32)
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{path}/{name}"
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	package (group: STRING_32; name: STRING_32; version: STRING_32): detachable FILE
			-- 
			-- 
			-- 
			-- argument: group  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- argument: version  (required)
			-- 
			-- 
			-- Result FILE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/packages/{group}/{name}-{version}.zip"
			l_path.replace_substring_all ("{"+"group"+"}", api_client.url_encode (group.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept (<<"application/octet-stream">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FILE } l_response.data ({ FILE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	package_filter (group: STRING_32; name: STRING_32; version: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: group  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- argument: version  (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json"
			l_path.replace_substring_all ("{"+"group"+"}", api_client.url_encode (group.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_agent (runmode: STRING_32; name: STRING_32; jcrcontentcqdistribute: BOOLEAN; jcrcontentcqdistribute_type_hint: STRING_32; jcrcontentcqname: STRING_32; jcrcontentcqtemplate: STRING_32; jcrcontentenabled: BOOLEAN; jcrcontentjcrdescription: STRING_32; jcrcontentjcrlast_modified: STRING_32; jcrcontentjcrlast_modified_by: STRING_32; jcrcontentjcrmixin_types: STRING_32; jcrcontentjcrtitle: STRING_32; jcrcontentlog_level: STRING_32; jcrcontentno_status_update: BOOLEAN; jcrcontentno_versioning: BOOLEAN; jcrcontentprotocol_connect_timeout: REAL_32; jcrcontentprotocol_ht_tp_connection_closed: BOOLEAN; jcrcontentprotocol_ht_tp_expired: STRING_32; jcrcontentprotocol_ht_tp_headers: detachable LIST [STRING_32]; jcrcontentprotocol_ht_tp_headers_type_hint: STRING_32; jcrcontentprotocol_ht_tp_method: STRING_32; jcrcontentprotocol_ht_tp_srelaxed: BOOLEAN; jcrcontentprotocol_interface: STRING_32; jcrcontentprotocol_socket_timeout: REAL_32; jcrcontentprotocol_version: STRING_32; jcrcontentproxy_nt_lm_domain: STRING_32; jcrcontentproxy_nt_lm_host: STRING_32; jcrcontentproxy_host: STRING_32; jcrcontentproxy_password: STRING_32; jcrcontentproxy_port: REAL_32; jcrcontentproxy_user: STRING_32; jcrcontentqueue_batch_max_size: REAL_32; jcrcontentqueue_batch_mode: STRING_32; jcrcontentqueue_batch_wait_time: REAL_32; jcrcontentretry_delay: STRING_32; jcrcontentreverse_replication: BOOLEAN; jcrcontentserialization_type: STRING_32; jcrcontentslingresource_type: STRING_32; jcrcontentssl: STRING_32; jcrcontenttransport_nt_lm_domain: STRING_32; jcrcontenttransport_nt_lm_host: STRING_32; jcrcontenttransport_password: STRING_32; jcrcontenttransport_uri: STRING_32; jcrcontenttransport_user: STRING_32; jcrcontenttrigger_distribute: BOOLEAN; jcrcontenttrigger_modified: BOOLEAN; jcrcontenttrigger_on_off_time: BOOLEAN; jcrcontenttrigger_receive: BOOLEAN; jcrcontenttrigger_specific: BOOLEAN; jcrcontentuser_id: STRING_32; jcrprimary_type: STRING_32; operation: STRING_32)
			-- 
			-- 
			-- 
			-- argument: runmode  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- argument: jcrcontentcqdistribute  (optional)
			-- 
			-- argument: jcrcontentcqdistribute_type_hint  (optional)
			-- 
			-- argument: jcrcontentcqname  (optional)
			-- 
			-- argument: jcrcontentcqtemplate  (optional)
			-- 
			-- argument: jcrcontentenabled  (optional)
			-- 
			-- argument: jcrcontentjcrdescription  (optional)
			-- 
			-- argument: jcrcontentjcrlast_modified  (optional)
			-- 
			-- argument: jcrcontentjcrlast_modified_by  (optional)
			-- 
			-- argument: jcrcontentjcrmixin_types  (optional)
			-- 
			-- argument: jcrcontentjcrtitle  (optional)
			-- 
			-- argument: jcrcontentlog_level  (optional)
			-- 
			-- argument: jcrcontentno_status_update  (optional)
			-- 
			-- argument: jcrcontentno_versioning  (optional)
			-- 
			-- argument: jcrcontentprotocol_connect_timeout  (optional)
			-- 
			-- argument: jcrcontentprotocol_ht_tp_connection_closed  (optional)
			-- 
			-- argument: jcrcontentprotocol_ht_tp_expired  (optional)
			-- 
			-- argument: jcrcontentprotocol_ht_tp_headers  (optional)
			-- 
			-- argument: jcrcontentprotocol_ht_tp_headers_type_hint  (optional)
			-- 
			-- argument: jcrcontentprotocol_ht_tp_method  (optional)
			-- 
			-- argument: jcrcontentprotocol_ht_tp_srelaxed  (optional)
			-- 
			-- argument: jcrcontentprotocol_interface  (optional)
			-- 
			-- argument: jcrcontentprotocol_socket_timeout  (optional)
			-- 
			-- argument: jcrcontentprotocol_version  (optional)
			-- 
			-- argument: jcrcontentproxy_nt_lm_domain  (optional)
			-- 
			-- argument: jcrcontentproxy_nt_lm_host  (optional)
			-- 
			-- argument: jcrcontentproxy_host  (optional)
			-- 
			-- argument: jcrcontentproxy_password  (optional)
			-- 
			-- argument: jcrcontentproxy_port  (optional)
			-- 
			-- argument: jcrcontentproxy_user  (optional)
			-- 
			-- argument: jcrcontentqueue_batch_max_size  (optional)
			-- 
			-- argument: jcrcontentqueue_batch_mode  (optional)
			-- 
			-- argument: jcrcontentqueue_batch_wait_time  (optional)
			-- 
			-- argument: jcrcontentretry_delay  (optional)
			-- 
			-- argument: jcrcontentreverse_replication  (optional)
			-- 
			-- argument: jcrcontentserialization_type  (optional)
			-- 
			-- argument: jcrcontentslingresource_type  (optional)
			-- 
			-- argument: jcrcontentssl  (optional)
			-- 
			-- argument: jcrcontenttransport_nt_lm_domain  (optional)
			-- 
			-- argument: jcrcontenttransport_nt_lm_host  (optional)
			-- 
			-- argument: jcrcontenttransport_password  (optional)
			-- 
			-- argument: jcrcontenttransport_uri  (optional)
			-- 
			-- argument: jcrcontenttransport_user  (optional)
			-- 
			-- argument: jcrcontenttrigger_distribute  (optional)
			-- 
			-- argument: jcrcontenttrigger_modified  (optional)
			-- 
			-- argument: jcrcontenttrigger_on_off_time  (optional)
			-- 
			-- argument: jcrcontenttrigger_receive  (optional)
			-- 
			-- argument: jcrcontenttrigger_specific  (optional)
			-- 
			-- argument: jcrcontentuser_id  (optional)
			-- 
			-- argument: jcrprimary_type  (optional)
			-- 
			-- argument: operation  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/replication/agents.{runmode}/{name}"
			l_path.replace_substring_all ("{"+"runmode"+"}", api_client.url_encode (runmode.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/cq:distribute", jcrcontentcqdistribute));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/cq:distribute@TypeHint", jcrcontentcqdistribute_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/cq:name", jcrcontentcqname));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/cq:template", jcrcontentcqtemplate));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/enabled", jcrcontentenabled));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/jcr:description", jcrcontentjcrdescription));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/jcr:lastModified", jcrcontentjcrlast_modified));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/jcr:lastModifiedBy", jcrcontentjcrlast_modified_by));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/jcr:mixinTypes", jcrcontentjcrmixin_types));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/jcr:title", jcrcontentjcrtitle));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/logLevel", jcrcontentlog_level));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/noStatusUpdate", jcrcontentno_status_update));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/noVersioning", jcrcontentno_versioning));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolConnectTimeout", jcrcontentprotocol_connect_timeout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolHTTPConnectionClosed", jcrcontentprotocol_ht_tp_connection_closed));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolHTTPExpired", jcrcontentprotocol_ht_tp_expired));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "jcr:content/protocolHTTPHeaders", jcrcontentprotocol_ht_tp_headers));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolHTTPHeaders@TypeHint", jcrcontentprotocol_ht_tp_headers_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolHTTPMethod", jcrcontentprotocol_ht_tp_method));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolHTTPSRelaxed", jcrcontentprotocol_ht_tp_srelaxed));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolInterface", jcrcontentprotocol_interface));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolSocketTimeout", jcrcontentprotocol_socket_timeout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/protocolVersion", jcrcontentprotocol_version));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/proxyNTLMDomain", jcrcontentproxy_nt_lm_domain));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/proxyNTLMHost", jcrcontentproxy_nt_lm_host));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/proxyHost", jcrcontentproxy_host));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/proxyPassword", jcrcontentproxy_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/proxyPort", jcrcontentproxy_port));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/proxyUser", jcrcontentproxy_user));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/queueBatchMaxSize", jcrcontentqueue_batch_max_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/queueBatchMode", jcrcontentqueue_batch_mode));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/queueBatchWaitTime", jcrcontentqueue_batch_wait_time));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/retryDelay", jcrcontentretry_delay));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/reverseReplication", jcrcontentreverse_replication));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/serializationType", jcrcontentserialization_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/sling:resourceType", jcrcontentslingresource_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/ssl", jcrcontentssl));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/transportNTLMDomain", jcrcontenttransport_nt_lm_domain));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/transportNTLMHost", jcrcontenttransport_nt_lm_host));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/transportPassword", jcrcontenttransport_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/transportUri", jcrcontenttransport_uri));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/transportUser", jcrcontenttransport_user));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/triggerDistribute", jcrcontenttrigger_distribute));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/triggerModified", jcrcontenttrigger_modified));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/triggerOnOffTime", jcrcontenttrigger_on_off_time));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/triggerReceive", jcrcontenttrigger_receive));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/triggerSpecific", jcrcontenttrigger_specific));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:content/userId", jcrcontentuser_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:primaryType", jcrprimary_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", ":operation", operation));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_authorizable_keystore (intermediate_path: STRING_32; authorizable_id: STRING_32; operation: STRING_32; current_password: STRING_32; new_password: STRING_32; re_password: STRING_32; key_password: STRING_32; key_store_pass: STRING_32; var_alias: STRING_32; new_alias: STRING_32; remove_alias: STRING_32; cert_chain: FILE; pk: FILE; key_store: FILE): detachable KEYSTORE_INFO
			-- 
			-- 
			-- 
			-- argument: intermediate_path  (required)
			-- 
			-- argument: authorizable_id  (required)
			-- 
			-- argument: operation  (optional)
			-- 
			-- argument: current_password  (optional)
			-- 
			-- argument: new_password  (optional)
			-- 
			-- argument: re_password  (optional)
			-- 
			-- argument: key_password  (optional)
			-- 
			-- argument: key_store_pass  (optional)
			-- 
			-- argument: var_alias  (optional)
			-- 
			-- argument: new_alias  (optional)
			-- 
			-- argument: remove_alias  (optional)
			-- 
			-- argument: cert_chain  (optional, default to null)
			-- 
			-- argument: pk  (optional, default to null)
			-- 
			-- argument: key_store  (optional, default to null)
			-- 
			-- 
			-- Result KEYSTORE_INFO
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{intermediatePath}/{authorizableId}.ks.html"
			l_path.replace_substring_all ("{"+"intermediatePath"+"}", api_client.url_encode (intermediate_path.out))
			l_path.replace_substring_all ("{"+"authorizableId"+"}", api_client.url_encode (authorizable_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", ":operation", operation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "currentPassword", current_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "newPassword", new_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "rePassword", re_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keyPassword", key_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keyStorePass", key_store_pass));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "alias", var_alias));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "newAlias", new_alias));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "removeAlias", remove_alias));

			if attached cert_chain as l_cert_chain then
				l_request.add_form(l_cert_chain,"cert-chain");
			end
			if attached pk as l_pk then
				l_request.add_form(l_pk,"pk");
			end
			if attached key_store as l_key_store then
				l_request.add_form(l_key_store,"keyStore");
			end

			if attached {STRING} api_client.select_header_accept (<<"text/plain">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { KEYSTORE_INFO } l_response.data ({ KEYSTORE_INFO }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_authorizables (authorizable_id: STRING_32; intermediate_path: STRING_32; create_user: STRING_32; create_group: STRING_32; reppassword: STRING_32; profilegiven_name: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: authorizable_id  (required)
			-- 
			-- argument: intermediate_path  (required)
			-- 
			-- argument: create_user  (optional)
			-- 
			-- argument: create_group  (optional)
			-- 
			-- argument: reppassword  (optional)
			-- 
			-- argument: profilegiven_name  (optional)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/libs/granite/security/post/authorizables"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "authorizableId", authorizable_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "intermediatePath", intermediate_path));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "createUser", create_user));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "createGroup", create_group));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "rep:password", reppassword));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "profile/givenName", profilegiven_name));


			if attached {STRING} api_client.select_header_accept (<<"text/html">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_config_adobe_granite_saml_authentication_handler (key_store_password: STRING_32; key_store_password_type_hint: STRING_32; service_ranking: INTEGER_32; service_ranking_type_hint: STRING_32; idp_http_redirect: BOOLEAN; idp_http_redirect_type_hint: STRING_32; create_user: BOOLEAN; create_user_type_hint: STRING_32; default_redirect_url: STRING_32; default_redirect_url_type_hint: STRING_32; user_id_attribute: STRING_32; user_id_attribute_type_hint: STRING_32; default_groups: detachable LIST [STRING_32]; default_groups_type_hint: STRING_32; idp_cert_alias: STRING_32; idp_cert_alias_type_hint: STRING_32; add_group_memberships: BOOLEAN; add_group_memberships_type_hint: STRING_32; path: detachable LIST [STRING_32]; path_type_hint: STRING_32; synchronize_attributes: detachable LIST [STRING_32]; synchronize_attributes_type_hint: STRING_32; clock_tolerance: INTEGER_32; clock_tolerance_type_hint: STRING_32; group_membership_attribute: STRING_32; group_membership_attribute_type_hint: STRING_32; idp_url: STRING_32; idp_url_type_hint: STRING_32; logout_url: STRING_32; logout_url_type_hint: STRING_32; service_provider_entity_id: STRING_32; service_provider_entity_id_type_hint: STRING_32; assertion_consumer_service_ur_l: STRING_32; assertion_consumer_service_ur_ltype_hint: STRING_32; handle_logout: BOOLEAN; handle_logout_type_hint: STRING_32; sp_private_key_alias: STRING_32; sp_private_key_alias_type_hint: STRING_32; use_encryption: BOOLEAN; use_encryption_type_hint: STRING_32; name_id_format: STRING_32; name_id_format_type_hint: STRING_32; digest_method: STRING_32; digest_method_type_hint: STRING_32; signature_method: STRING_32; signature_method_type_hint: STRING_32; user_intermediate_path: STRING_32; user_intermediate_path_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: key_store_password  (optional)
			-- 
			-- argument: key_store_password_type_hint  (optional)
			-- 
			-- argument: service_ranking  (optional)
			-- 
			-- argument: service_ranking_type_hint  (optional)
			-- 
			-- argument: idp_http_redirect  (optional)
			-- 
			-- argument: idp_http_redirect_type_hint  (optional)
			-- 
			-- argument: create_user  (optional)
			-- 
			-- argument: create_user_type_hint  (optional)
			-- 
			-- argument: default_redirect_url  (optional)
			-- 
			-- argument: default_redirect_url_type_hint  (optional)
			-- 
			-- argument: user_id_attribute  (optional)
			-- 
			-- argument: user_id_attribute_type_hint  (optional)
			-- 
			-- argument: default_groups  (optional)
			-- 
			-- argument: default_groups_type_hint  (optional)
			-- 
			-- argument: idp_cert_alias  (optional)
			-- 
			-- argument: idp_cert_alias_type_hint  (optional)
			-- 
			-- argument: add_group_memberships  (optional)
			-- 
			-- argument: add_group_memberships_type_hint  (optional)
			-- 
			-- argument: path  (optional)
			-- 
			-- argument: path_type_hint  (optional)
			-- 
			-- argument: synchronize_attributes  (optional)
			-- 
			-- argument: synchronize_attributes_type_hint  (optional)
			-- 
			-- argument: clock_tolerance  (optional)
			-- 
			-- argument: clock_tolerance_type_hint  (optional)
			-- 
			-- argument: group_membership_attribute  (optional)
			-- 
			-- argument: group_membership_attribute_type_hint  (optional)
			-- 
			-- argument: idp_url  (optional)
			-- 
			-- argument: idp_url_type_hint  (optional)
			-- 
			-- argument: logout_url  (optional)
			-- 
			-- argument: logout_url_type_hint  (optional)
			-- 
			-- argument: service_provider_entity_id  (optional)
			-- 
			-- argument: service_provider_entity_id_type_hint  (optional)
			-- 
			-- argument: assertion_consumer_service_ur_l  (optional)
			-- 
			-- argument: assertion_consumer_service_ur_ltype_hint  (optional)
			-- 
			-- argument: handle_logout  (optional)
			-- 
			-- argument: handle_logout_type_hint  (optional)
			-- 
			-- argument: sp_private_key_alias  (optional)
			-- 
			-- argument: sp_private_key_alias_type_hint  (optional)
			-- 
			-- argument: use_encryption  (optional)
			-- 
			-- argument: use_encryption_type_hint  (optional)
			-- 
			-- argument: name_id_format  (optional)
			-- 
			-- argument: name_id_format_type_hint  (optional)
			-- 
			-- argument: digest_method  (optional)
			-- 
			-- argument: digest_method_type_hint  (optional)
			-- 
			-- argument: signature_method  (optional)
			-- 
			-- argument: signature_method_type_hint  (optional)
			-- 
			-- argument: user_intermediate_path  (optional)
			-- 
			-- argument: user_intermediate_path_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keyStorePassword", key_store_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keyStorePassword@TypeHint", key_store_password_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "service.ranking", service_ranking));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "service.ranking@TypeHint", service_ranking_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpHttpRedirect", idp_http_redirect));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpHttpRedirect@TypeHint", idp_http_redirect_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "createUser", create_user));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "createUser@TypeHint", create_user_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "defaultRedirectUrl", default_redirect_url));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "defaultRedirectUrl@TypeHint", default_redirect_url_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "userIDAttribute", user_id_attribute));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "userIDAttribute@TypeHint", user_id_attribute_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "defaultGroups", default_groups));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "defaultGroups@TypeHint", default_groups_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpCertAlias", idp_cert_alias));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpCertAlias@TypeHint", idp_cert_alias_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "addGroupMemberships", add_group_memberships));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "addGroupMemberships@TypeHint", add_group_memberships_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "path", path));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path@TypeHint", path_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "synchronizeAttributes", synchronize_attributes));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "synchronizeAttributes@TypeHint", synchronize_attributes_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "clockTolerance", clock_tolerance));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "clockTolerance@TypeHint", clock_tolerance_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groupMembershipAttribute", group_membership_attribute));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "groupMembershipAttribute@TypeHint", group_membership_attribute_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpUrl", idp_url));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "idpUrl@TypeHint", idp_url_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "logoutUrl", logout_url));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "logoutUrl@TypeHint", logout_url_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "serviceProviderEntityId", service_provider_entity_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "serviceProviderEntityId@TypeHint", service_provider_entity_id_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "assertionConsumerServiceURL", assertion_consumer_service_ur_l));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "assertionConsumerServiceURL@TypeHint", assertion_consumer_service_ur_ltype_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "handleLogout", handle_logout));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "handleLogout@TypeHint", handle_logout_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "spPrivateKeyAlias", sp_private_key_alias));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "spPrivateKeyAlias@TypeHint", sp_private_key_alias_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "useEncryption", use_encryption));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "useEncryption@TypeHint", use_encryption_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "nameIdFormat", name_id_format));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "nameIdFormat@TypeHint", name_id_format_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "digestMethod", digest_method));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "digestMethod@TypeHint", digest_method_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "signatureMethod", signature_method));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "signatureMethod@TypeHint", signature_method_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "userIntermediatePath", user_intermediate_path));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "userIntermediatePath@TypeHint", user_intermediate_path_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_config_apache_felix_jetty_based_http_service (org_apache_felix_https_nio: BOOLEAN; org_apache_felix_https_nio_type_hint: STRING_32; org_apache_felix_https_keystore: STRING_32; org_apache_felix_https_keystore_type_hint: STRING_32; org_apache_felix_https_keystore_password: STRING_32; org_apache_felix_https_keystore_password_type_hint: STRING_32; org_apache_felix_https_keystore_key: STRING_32; org_apache_felix_https_keystore_key_type_hint: STRING_32; org_apache_felix_https_keystore_key_password: STRING_32; org_apache_felix_https_keystore_key_password_type_hint: STRING_32; org_apache_felix_https_truststore: STRING_32; org_apache_felix_https_truststore_type_hint: STRING_32; org_apache_felix_https_truststore_password: STRING_32; org_apache_felix_https_truststore_password_type_hint: STRING_32; org_apache_felix_https_clientcertificate: STRING_32; org_apache_felix_https_clientcertificate_type_hint: STRING_32; org_apache_felix_https_enable: BOOLEAN; org_apache_felix_https_enable_type_hint: STRING_32; org_osgi_service_http_port_secure: STRING_32; org_osgi_service_http_port_secure_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: org_apache_felix_https_nio  (optional)
			-- 
			-- argument: org_apache_felix_https_nio_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore_password  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore_password_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore_key  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore_key_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore_key_password  (optional)
			-- 
			-- argument: org_apache_felix_https_keystore_key_password_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_truststore  (optional)
			-- 
			-- argument: org_apache_felix_https_truststore_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_truststore_password  (optional)
			-- 
			-- argument: org_apache_felix_https_truststore_password_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_clientcertificate  (optional)
			-- 
			-- argument: org_apache_felix_https_clientcertificate_type_hint  (optional)
			-- 
			-- argument: org_apache_felix_https_enable  (optional)
			-- 
			-- argument: org_apache_felix_https_enable_type_hint  (optional)
			-- 
			-- argument: org_osgi_service_http_port_secure  (optional)
			-- 
			-- argument: org_osgi_service_http_port_secure_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/org.apache.felix.http"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.nio", org_apache_felix_https_nio));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.nio@TypeHint", org_apache_felix_https_nio_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore", org_apache_felix_https_keystore));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore@TypeHint", org_apache_felix_https_keystore_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore.password", org_apache_felix_https_keystore_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore.password@TypeHint", org_apache_felix_https_keystore_password_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore.key", org_apache_felix_https_keystore_key));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore.key@TypeHint", org_apache_felix_https_keystore_key_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore.key.password", org_apache_felix_https_keystore_key_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.keystore.key.password@TypeHint", org_apache_felix_https_keystore_key_password_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.truststore", org_apache_felix_https_truststore));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.truststore@TypeHint", org_apache_felix_https_truststore_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.truststore.password", org_apache_felix_https_truststore_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.truststore.password@TypeHint", org_apache_felix_https_truststore_password_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.clientcertificate", org_apache_felix_https_clientcertificate));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.clientcertificate@TypeHint", org_apache_felix_https_clientcertificate_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.enable", org_apache_felix_https_enable));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.apache.felix.https.enable@TypeHint", org_apache_felix_https_enable_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.osgi.service.http.port.secure", org_osgi_service_http_port_secure));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "org.osgi.service.http.port.secure@TypeHint", org_osgi_service_http_port_secure_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_config_apache_http_components_proxy_configuration (proxy_host: STRING_32; proxy_host_type_hint: STRING_32; proxy_port: INTEGER_32; proxy_port_type_hint: STRING_32; proxy_exceptions: detachable LIST [STRING_32]; proxy_exceptions_type_hint: STRING_32; proxy_enabled: BOOLEAN; proxy_enabled_type_hint: STRING_32; proxy_user: STRING_32; proxy_user_type_hint: STRING_32; proxy_password: STRING_32; proxy_password_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: proxy_host  (optional)
			-- 
			-- argument: proxy_host_type_hint  (optional)
			-- 
			-- argument: proxy_port  (optional)
			-- 
			-- argument: proxy_port_type_hint  (optional)
			-- 
			-- argument: proxy_exceptions  (optional)
			-- 
			-- argument: proxy_exceptions_type_hint  (optional)
			-- 
			-- argument: proxy_enabled  (optional)
			-- 
			-- argument: proxy_enabled_type_hint  (optional)
			-- 
			-- argument: proxy_user  (optional)
			-- 
			-- argument: proxy_user_type_hint  (optional)
			-- 
			-- argument: proxy_password  (optional)
			-- 
			-- argument: proxy_password_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/org.apache.http.proxyconfigurator.config"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.host", proxy_host));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.host@TypeHint", proxy_host_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.port", proxy_port));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.port@TypeHint", proxy_port_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "proxy.exceptions", proxy_exceptions));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.exceptions@TypeHint", proxy_exceptions_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.enabled", proxy_enabled));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.enabled@TypeHint", proxy_enabled_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.user", proxy_user));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.user@TypeHint", proxy_user_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.password", proxy_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "proxy.password@TypeHint", proxy_password_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_config_apache_sling_dav_ex_servlet (var_alias: STRING_32; alias_type_hint: STRING_32; dav_create_absolute_uri: BOOLEAN; dav_create_absolute_uri_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: var_alias  (optional)
			-- 
			-- argument: alias_type_hint  (optional)
			-- 
			-- argument: dav_create_absolute_uri  (optional)
			-- 
			-- argument: dav_create_absolute_uri_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "alias", var_alias));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "alias@TypeHint", alias_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dav.create-absolute-uri", dav_create_absolute_uri));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dav.create-absolute-uri@TypeHint", dav_create_absolute_uri_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_config_apache_sling_get_servlet (json_maximumresults: STRING_32; json_maximumresults_type_hint: STRING_32; enable_html: BOOLEAN; enable_html_type_hint: STRING_32; enable_txt: BOOLEAN; enable_txt_type_hint: STRING_32; enable_xml: BOOLEAN; enable_xml_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: json_maximumresults  (optional)
			-- 
			-- argument: json_maximumresults_type_hint  (optional)
			-- 
			-- argument: enable_html  (optional)
			-- 
			-- argument: enable_html_type_hint  (optional)
			-- 
			-- argument: enable_txt  (optional)
			-- 
			-- argument: enable_txt_type_hint  (optional)
			-- 
			-- argument: enable_xml  (optional)
			-- 
			-- argument: enable_xml_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "json.maximumresults", json_maximumresults));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "json.maximumresults@TypeHint", json_maximumresults_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable.html", enable_html));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable.html@TypeHint", enable_html_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable.txt", enable_txt));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable.txt@TypeHint", enable_txt_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable.xml", enable_xml));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable.xml@TypeHint", enable_xml_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_config_apache_sling_referrer_filter (allow_empty: BOOLEAN; allow_empty_type_hint: STRING_32; allow_hosts: STRING_32; allow_hosts_type_hint: STRING_32; allow_hosts_regexp: STRING_32; allow_hosts_regexp_type_hint: STRING_32; filter_methods: STRING_32; filter_methods_type_hint: STRING_32)
			-- 
			-- 
			-- 
			-- argument: allow_empty  (optional)
			-- 
			-- argument: allow_empty_type_hint  (optional)
			-- 
			-- argument: allow_hosts  (optional)
			-- 
			-- argument: allow_hosts_type_hint  (optional)
			-- 
			-- argument: allow_hosts_regexp  (optional)
			-- 
			-- argument: allow_hosts_regexp_type_hint  (optional)
			-- 
			-- argument: filter_methods  (optional)
			-- 
			-- argument: filter_methods_type_hint  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allow.empty", allow_empty));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allow.empty@TypeHint", allow_empty_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allow.hosts", allow_hosts));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allow.hosts@TypeHint", allow_hosts_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allow.hosts.regexp", allow_hosts_regexp));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "allow.hosts.regexp@TypeHint", allow_hosts_regexp_type_hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter.methods", filter_methods));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter.methods@TypeHint", filter_methods_type_hint));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_node (path: STRING_32; name: STRING_32; operation: STRING_32; delete_authorizable: STRING_32; file: FILE)
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- argument: operation  (optional)
			-- 
			-- argument: delete_authorizable  (optional)
			-- 
			-- argument: file  (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{path}/{name}"
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", ":operation", operation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "deleteAuthorizable", delete_authorizable));

			if attached file as l_file then
				l_request.add_form(l_file,"file");
			end

			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_node_rw (path: STRING_32; name: STRING_32; add_members: STRING_32)
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- argument: add_members  (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{path}/{name}.rw.html"
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "addMembers", add_members));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_path (path: STRING_32; jcrprimary_type: STRING_32; name: STRING_32)
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: jcrprimary_type  (required)
			-- 
			-- argument: name  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/{path}/"
			l_path.replace_substring_all ("{"+"path"+"}", api_client.url_encode (path.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "jcr:primaryType", jcrprimary_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", ":name", name));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_query (path: STRING_32; p_limit: REAL_32; var_1_property: STRING_32; var_1_property_value: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: p_limit  (required)
			-- 
			-- argument: var_1_property  (required)
			-- 
			-- argument: var_1_property_value  (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/bin/querybuilder.json"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "p.limit", p_limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "1_property", var_1_property));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "1_property.value", var_1_property_value));


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_tree_activation (ignoredeactivated: BOOLEAN; onlymodified: BOOLEAN; path: STRING_32)
			-- 
			-- 
			-- 
			-- argument: ignoredeactivated  (required)
			-- 
			-- argument: onlymodified  (required)
			-- 
			-- argument: path  (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/replication/treeactivation.html"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ignoredeactivated", ignoredeactivated));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "onlymodified", onlymodified));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));


			if attached {STRING} api_client.select_header_accept (<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	post_truststore (operation: STRING_32; new_password: STRING_32; re_password: STRING_32; key_store_type: STRING_32; remove_alias: STRING_32; certificate: FILE): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: operation  (optional)
			-- 
			-- argument: new_password  (optional)
			-- 
			-- argument: re_password  (optional)
			-- 
			-- argument: key_store_type  (optional)
			-- 
			-- argument: remove_alias  (optional)
			-- 
			-- argument: certificate  (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/libs/granite/security/post/truststore"
			l_request.fill_query_params(api_client.parameter_to_tuple("", ":operation", operation));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "newPassword", new_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "rePassword", re_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "keyStoreType", key_store_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "removeAlias", remove_alias));

			if attached certificate as l_certificate then
				l_request.add_form(l_certificate,"certificate");
			end

			if attached {STRING} api_client.select_header_accept (<<"text/plain">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	post_truststore_pk_cs12 (truststore_p12: FILE): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: truststore_p12  (optional, default to null)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/truststore"

			if attached truststore_p12 as l_truststore_p12 then
				l_request.add_form(l_truststore_p12,"truststore.p12");
			end

			if attached {STRING} api_client.select_header_accept (<<"text/plain">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	query (path: STRING_32; p_limit: REAL_32; var_1_property: STRING_32; var_1_property_value: STRING_32): detachable STRING_32
			-- 
			-- 
			-- 
			-- argument: path  (required)
			-- 
			-- argument: p_limit  (required)
			-- 
			-- argument: var_1_property  (required)
			-- 
			-- argument: var_1_property_value  (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/bin/querybuilder.json"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "path", path));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "p.limit", p_limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "1_property", var_1_property));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "1_property.value", var_1_property_value));


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	truststore : detachable FILE
			-- 
			-- 
			-- 
			-- 
			-- Result FILE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/etc/truststore/truststore.p12"


			if attached {STRING} api_client.select_header_accept (<<"application/octet-stream">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FILE } l_response.data ({ FILE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	truststore_info : detachable TRUSTSTORE_INFO
			-- 
			-- 
			-- 
			-- 
			-- Result TRUSTSTORE_INFO
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/libs/granite/security/truststore.json"


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"aemAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { TRUSTSTORE_INFO } l_response.data ({ TRUSTSTORE_INFO }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
