/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class SlingApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpDelete]
        [Route("//etc/replication/agents.{runmode}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAgent")]
        public virtual IActionResult DeleteAgent([FromRoute][Required]string runmode, [FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpDelete]
        [Route("//{path}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteNode")]
        public virtual IActionResult DeleteNode([FromRoute][Required]string path, [FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//etc/replication/agents.{runmode}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetAgent")]
        public virtual IActionResult GetAgent([FromRoute][Required]string runmode, [FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//etc/replication/agents.{runmode}.-1.json")]
        [ValidateModelState]
        [SwaggerOperation("GetAgents")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetAgents([FromRoute][Required]string runmode)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <response code="200">Retrieved Authorizable Keystore info</response>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//{intermediatePath}/{authorizableId}.ks.json")]
        [ValidateModelState]
        [SwaggerOperation("GetAuthorizableKeystore")]
        [SwaggerResponse(statusCode: 200, type: typeof(KeystoreInfo), description: "Retrieved Authorizable Keystore info")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetAuthorizableKeystore([FromRoute][Required]string intermediatePath, [FromRoute][Required]string authorizableId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KeystoreInfo));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KeystoreInfo>(exampleJson)
            : default(KeystoreInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//{intermediatePath}/{authorizableId}/keystore/store.p12")]
        [ValidateModelState]
        [SwaggerOperation("GetKeystore")]
        [SwaggerResponse(statusCode: 0, type: typeof(System.IO.Stream), description: "Default response")]
        public virtual IActionResult GetKeystore([FromRoute][Required]string intermediatePath, [FromRoute][Required]string authorizableId)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(System.IO.Stream));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//{path}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetNode")]
        public virtual IActionResult GetNode([FromRoute][Required]string path, [FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//etc/packages/{group}/{name}-{version}.zip")]
        [ValidateModelState]
        [SwaggerOperation("GetPackage")]
        [SwaggerResponse(statusCode: 0, type: typeof(System.IO.Stream), description: "Default response")]
        public virtual IActionResult GetPackage([FromRoute][Required]string group, [FromRoute][Required]string name, [FromRoute][Required]string version)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(System.IO.Stream));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="group"></param>
        /// <param name="name"></param>
        /// <param name="version"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json")]
        [ValidateModelState]
        [SwaggerOperation("GetPackageFilter")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetPackageFilter([FromRoute][Required]string group, [FromRoute][Required]string name, [FromRoute][Required]string version)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//bin/querybuilder.json")]
        [ValidateModelState]
        [SwaggerOperation("GetQuery")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetQuery([FromQuery][Required()]string path, [FromQuery][Required()]decimal? pLimit, [FromQuery][Required()]string _1property, [FromQuery][Required()]string _1propertyValue)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//etc/truststore/truststore.p12")]
        [ValidateModelState]
        [SwaggerOperation("GetTruststore")]
        [SwaggerResponse(statusCode: 0, type: typeof(System.IO.Stream), description: "Default response")]
        public virtual IActionResult GetTruststore()
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(System.IO.Stream));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">Retrieved AEM Truststore info</response>
        /// <response code="0">Default response</response>
        [HttpGet]
        [Route("//libs/granite/security/truststore.json")]
        [ValidateModelState]
        [SwaggerOperation("GetTruststoreInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(TruststoreInfo), description: "Retrieved AEM Truststore info")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult GetTruststoreInfo()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TruststoreInfo));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            exampleJson = "{\n  \"aliases\" : [ {\n    \"entryType\" : \"entryType\",\n    \"notAfter\" : \"notAfter\",\n    \"serialNumber\" : 0,\n    \"subject\" : \"subject\",\n    \"alias\" : \"alias\",\n    \"issuer\" : \"issuer\",\n    \"notBefore\" : \"notBefore\"\n  }, {\n    \"entryType\" : \"entryType\",\n    \"notAfter\" : \"notAfter\",\n    \"serialNumber\" : 0,\n    \"subject\" : \"subject\",\n    \"alias\" : \"alias\",\n    \"issuer\" : \"issuer\",\n    \"notBefore\" : \"notBefore\"\n  } ],\n  \"exists\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TruststoreInfo>(exampleJson)
            : default(TruststoreInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="runmode"></param>
        /// <param name="name"></param>
        /// <param name="jcrcontentcqdistribute"></param>
        /// <param name="jcrcontentcqdistributeTypeHint"></param>
        /// <param name="jcrcontentcqname"></param>
        /// <param name="jcrcontentcqtemplate"></param>
        /// <param name="jcrcontentenabled"></param>
        /// <param name="jcrcontentjcrdescription"></param>
        /// <param name="jcrcontentjcrlastModified"></param>
        /// <param name="jcrcontentjcrlastModifiedBy"></param>
        /// <param name="jcrcontentjcrmixinTypes"></param>
        /// <param name="jcrcontentjcrtitle"></param>
        /// <param name="jcrcontentlogLevel"></param>
        /// <param name="jcrcontentnoStatusUpdate"></param>
        /// <param name="jcrcontentnoVersioning"></param>
        /// <param name="jcrcontentprotocolConnectTimeout"></param>
        /// <param name="jcrcontentprotocolHTTPConnectionClosed"></param>
        /// <param name="jcrcontentprotocolHTTPExpired"></param>
        /// <param name="jcrcontentprotocolHTTPHeaders"></param>
        /// <param name="jcrcontentprotocolHTTPHeadersTypeHint"></param>
        /// <param name="jcrcontentprotocolHTTPMethod"></param>
        /// <param name="jcrcontentprotocolHTTPSRelaxed"></param>
        /// <param name="jcrcontentprotocolInterface"></param>
        /// <param name="jcrcontentprotocolSocketTimeout"></param>
        /// <param name="jcrcontentprotocolVersion"></param>
        /// <param name="jcrcontentproxyNTLMDomain"></param>
        /// <param name="jcrcontentproxyNTLMHost"></param>
        /// <param name="jcrcontentproxyHost"></param>
        /// <param name="jcrcontentproxyPassword"></param>
        /// <param name="jcrcontentproxyPort"></param>
        /// <param name="jcrcontentproxyUser"></param>
        /// <param name="jcrcontentqueueBatchMaxSize"></param>
        /// <param name="jcrcontentqueueBatchMode"></param>
        /// <param name="jcrcontentqueueBatchWaitTime"></param>
        /// <param name="jcrcontentretryDelay"></param>
        /// <param name="jcrcontentreverseReplication"></param>
        /// <param name="jcrcontentserializationType"></param>
        /// <param name="jcrcontentslingresourceType"></param>
        /// <param name="jcrcontentssl"></param>
        /// <param name="jcrcontenttransportNTLMDomain"></param>
        /// <param name="jcrcontenttransportNTLMHost"></param>
        /// <param name="jcrcontenttransportPassword"></param>
        /// <param name="jcrcontenttransportUri"></param>
        /// <param name="jcrcontenttransportUser"></param>
        /// <param name="jcrcontenttriggerDistribute"></param>
        /// <param name="jcrcontenttriggerModified"></param>
        /// <param name="jcrcontenttriggerOnOffTime"></param>
        /// <param name="jcrcontenttriggerReceive"></param>
        /// <param name="jcrcontenttriggerSpecific"></param>
        /// <param name="jcrcontentuserId"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="operation"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//etc/replication/agents.{runmode}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PostAgent")]
        public virtual IActionResult PostAgent([FromRoute][Required]string runmode, [FromRoute][Required]string name, [FromQuery]bool? jcrcontentcqdistribute, [FromQuery]string jcrcontentcqdistributeTypeHint, [FromQuery]string jcrcontentcqname, [FromQuery]string jcrcontentcqtemplate, [FromQuery]bool? jcrcontentenabled, [FromQuery]string jcrcontentjcrdescription, [FromQuery]string jcrcontentjcrlastModified, [FromQuery]string jcrcontentjcrlastModifiedBy, [FromQuery]string jcrcontentjcrmixinTypes, [FromQuery]string jcrcontentjcrtitle, [FromQuery]string jcrcontentlogLevel, [FromQuery]bool? jcrcontentnoStatusUpdate, [FromQuery]bool? jcrcontentnoVersioning, [FromQuery]decimal? jcrcontentprotocolConnectTimeout, [FromQuery]bool? jcrcontentprotocolHTTPConnectionClosed, [FromQuery]string jcrcontentprotocolHTTPExpired, [FromQuery]List<string> jcrcontentprotocolHTTPHeaders, [FromQuery]string jcrcontentprotocolHTTPHeadersTypeHint, [FromQuery]string jcrcontentprotocolHTTPMethod, [FromQuery]bool? jcrcontentprotocolHTTPSRelaxed, [FromQuery]string jcrcontentprotocolInterface, [FromQuery]decimal? jcrcontentprotocolSocketTimeout, [FromQuery]string jcrcontentprotocolVersion, [FromQuery]string jcrcontentproxyNTLMDomain, [FromQuery]string jcrcontentproxyNTLMHost, [FromQuery]string jcrcontentproxyHost, [FromQuery]string jcrcontentproxyPassword, [FromQuery]decimal? jcrcontentproxyPort, [FromQuery]string jcrcontentproxyUser, [FromQuery]decimal? jcrcontentqueueBatchMaxSize, [FromQuery]string jcrcontentqueueBatchMode, [FromQuery]decimal? jcrcontentqueueBatchWaitTime, [FromQuery]string jcrcontentretryDelay, [FromQuery]bool? jcrcontentreverseReplication, [FromQuery]string jcrcontentserializationType, [FromQuery]string jcrcontentslingresourceType, [FromQuery]string jcrcontentssl, [FromQuery]string jcrcontenttransportNTLMDomain, [FromQuery]string jcrcontenttransportNTLMHost, [FromQuery]string jcrcontenttransportPassword, [FromQuery]string jcrcontenttransportUri, [FromQuery]string jcrcontenttransportUser, [FromQuery]bool? jcrcontenttriggerDistribute, [FromQuery]bool? jcrcontenttriggerModified, [FromQuery]bool? jcrcontenttriggerOnOffTime, [FromQuery]bool? jcrcontenttriggerReceive, [FromQuery]bool? jcrcontenttriggerSpecific, [FromQuery]string jcrcontentuserId, [FromQuery]string jcrprimaryType, [FromQuery]string operation)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="intermediatePath"></param>
        /// <param name="authorizableId"></param>
        /// <param name="operation"></param>
        /// <param name="currentPassword"></param>
        /// <param name="newPassword"></param>
        /// <param name="rePassword"></param>
        /// <param name="keyPassword"></param>
        /// <param name="keyStorePass"></param>
        /// <param name="alias"></param>
        /// <param name="newAlias"></param>
        /// <param name="removeAlias"></param>
        /// <param name="certChain"></param>
        /// <param name="pk"></param>
        /// <param name="keyStore"></param>
        /// <response code="200">Retrieved Authorizable Keystore info</response>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//{intermediatePath}/{authorizableId}.ks.html")]
        [ValidateModelState]
        [SwaggerOperation("PostAuthorizableKeystore")]
        [SwaggerResponse(statusCode: 200, type: typeof(KeystoreInfo), description: "Retrieved Authorizable Keystore info")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostAuthorizableKeystore([FromRoute][Required]string intermediatePath, [FromRoute][Required]string authorizableId, [FromQuery]string operation, [FromQuery]string currentPassword, [FromQuery]string newPassword, [FromQuery]string rePassword, [FromQuery]string keyPassword, [FromQuery]string keyStorePass, [FromQuery]string alias, [FromQuery]string newAlias, [FromQuery]string removeAlias, [FromForm]System.IO.Stream certChain, [FromForm]System.IO.Stream pk, [FromForm]System.IO.Stream keyStore)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KeystoreInfo));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KeystoreInfo>(exampleJson)
            : default(KeystoreInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="authorizableId"></param>
        /// <param name="intermediatePath"></param>
        /// <param name="createUser"></param>
        /// <param name="createGroup"></param>
        /// <param name="reppassword"></param>
        /// <param name="profilegivenName"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//libs/granite/security/post/authorizables")]
        [ValidateModelState]
        [SwaggerOperation("PostAuthorizables")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostAuthorizables([FromQuery][Required()]string authorizableId, [FromQuery][Required()]string intermediatePath, [FromQuery]string createUser, [FromQuery]string createGroup, [FromQuery]string reppassword, [FromQuery]string profilegivenName)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="keyStorePassword"></param>
        /// <param name="keyStorePasswordTypeHint"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="serviceRankingTypeHint"></param>
        /// <param name="idpHttpRedirect"></param>
        /// <param name="idpHttpRedirectTypeHint"></param>
        /// <param name="createUser"></param>
        /// <param name="createUserTypeHint"></param>
        /// <param name="defaultRedirectUrl"></param>
        /// <param name="defaultRedirectUrlTypeHint"></param>
        /// <param name="userIDAttribute"></param>
        /// <param name="userIDAttributeTypeHint"></param>
        /// <param name="defaultGroups"></param>
        /// <param name="defaultGroupsTypeHint"></param>
        /// <param name="idpCertAlias"></param>
        /// <param name="idpCertAliasTypeHint"></param>
        /// <param name="addGroupMemberships"></param>
        /// <param name="addGroupMembershipsTypeHint"></param>
        /// <param name="path"></param>
        /// <param name="pathTypeHint"></param>
        /// <param name="synchronizeAttributes"></param>
        /// <param name="synchronizeAttributesTypeHint"></param>
        /// <param name="clockTolerance"></param>
        /// <param name="clockToleranceTypeHint"></param>
        /// <param name="groupMembershipAttribute"></param>
        /// <param name="groupMembershipAttributeTypeHint"></param>
        /// <param name="idpUrl"></param>
        /// <param name="idpUrlTypeHint"></param>
        /// <param name="logoutUrl"></param>
        /// <param name="logoutUrlTypeHint"></param>
        /// <param name="serviceProviderEntityId"></param>
        /// <param name="serviceProviderEntityIdTypeHint"></param>
        /// <param name="assertionConsumerServiceURL"></param>
        /// <param name="assertionConsumerServiceURLTypeHint"></param>
        /// <param name="handleLogout"></param>
        /// <param name="handleLogoutTypeHint"></param>
        /// <param name="spPrivateKeyAlias"></param>
        /// <param name="spPrivateKeyAliasTypeHint"></param>
        /// <param name="useEncryption"></param>
        /// <param name="useEncryptionTypeHint"></param>
        /// <param name="nameIdFormat"></param>
        /// <param name="nameIdFormatTypeHint"></param>
        /// <param name="digestMethod"></param>
        /// <param name="digestMethodTypeHint"></param>
        /// <param name="signatureMethod"></param>
        /// <param name="signatureMethodTypeHint"></param>
        /// <param name="userIntermediatePath"></param>
        /// <param name="userIntermediatePathTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigAdobeGraniteSamlAuthenticationHandler")]
        public virtual IActionResult PostConfigAdobeGraniteSamlAuthenticationHandler([FromQuery]string keyStorePassword, [FromQuery]string keyStorePasswordTypeHint, [FromQuery]int? serviceRanking, [FromQuery]string serviceRankingTypeHint, [FromQuery]bool? idpHttpRedirect, [FromQuery]string idpHttpRedirectTypeHint, [FromQuery]bool? createUser, [FromQuery]string createUserTypeHint, [FromQuery]string defaultRedirectUrl, [FromQuery]string defaultRedirectUrlTypeHint, [FromQuery]string userIDAttribute, [FromQuery]string userIDAttributeTypeHint, [FromQuery]List<string> defaultGroups, [FromQuery]string defaultGroupsTypeHint, [FromQuery]string idpCertAlias, [FromQuery]string idpCertAliasTypeHint, [FromQuery]bool? addGroupMemberships, [FromQuery]string addGroupMembershipsTypeHint, [FromQuery]List<string> path, [FromQuery]string pathTypeHint, [FromQuery]List<string> synchronizeAttributes, [FromQuery]string synchronizeAttributesTypeHint, [FromQuery]int? clockTolerance, [FromQuery]string clockToleranceTypeHint, [FromQuery]string groupMembershipAttribute, [FromQuery]string groupMembershipAttributeTypeHint, [FromQuery]string idpUrl, [FromQuery]string idpUrlTypeHint, [FromQuery]string logoutUrl, [FromQuery]string logoutUrlTypeHint, [FromQuery]string serviceProviderEntityId, [FromQuery]string serviceProviderEntityIdTypeHint, [FromQuery]string assertionConsumerServiceURL, [FromQuery]string assertionConsumerServiceURLTypeHint, [FromQuery]bool? handleLogout, [FromQuery]string handleLogoutTypeHint, [FromQuery]string spPrivateKeyAlias, [FromQuery]string spPrivateKeyAliasTypeHint, [FromQuery]bool? useEncryption, [FromQuery]string useEncryptionTypeHint, [FromQuery]string nameIdFormat, [FromQuery]string nameIdFormatTypeHint, [FromQuery]string digestMethod, [FromQuery]string digestMethodTypeHint, [FromQuery]string signatureMethod, [FromQuery]string signatureMethodTypeHint, [FromQuery]string userIntermediatePath, [FromQuery]string userIntermediatePathTypeHint)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="orgApacheFelixHttpsNio"></param>
        /// <param name="orgApacheFelixHttpsNioTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystore"></param>
        /// <param name="orgApacheFelixHttpsKeystoreTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"></param>
        /// <param name="orgApacheFelixHttpsKeystorePasswordTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKey"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyTypeHint"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPasswordTypeHint"></param>
        /// <param name="orgApacheFelixHttpsTruststore"></param>
        /// <param name="orgApacheFelixHttpsTruststoreTypeHint"></param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"></param>
        /// <param name="orgApacheFelixHttpsTruststorePasswordTypeHint"></param>
        /// <param name="orgApacheFelixHttpsClientcertificate"></param>
        /// <param name="orgApacheFelixHttpsClientcertificateTypeHint"></param>
        /// <param name="orgApacheFelixHttpsEnable"></param>
        /// <param name="orgApacheFelixHttpsEnableTypeHint"></param>
        /// <param name="orgOsgiServiceHttpPortSecure"></param>
        /// <param name="orgOsgiServiceHttpPortSecureTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//apps/system/config/org.apache.felix.http")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheFelixJettyBasedHttpService")]
        public virtual IActionResult PostConfigApacheFelixJettyBasedHttpService([FromQuery]bool? orgApacheFelixHttpsNio, [FromQuery]string orgApacheFelixHttpsNioTypeHint, [FromQuery]string orgApacheFelixHttpsKeystore, [FromQuery]string orgApacheFelixHttpsKeystoreTypeHint, [FromQuery]string orgApacheFelixHttpsKeystorePassword, [FromQuery]string orgApacheFelixHttpsKeystorePasswordTypeHint, [FromQuery]string orgApacheFelixHttpsKeystoreKey, [FromQuery]string orgApacheFelixHttpsKeystoreKeyTypeHint, [FromQuery]string orgApacheFelixHttpsKeystoreKeyPassword, [FromQuery]string orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, [FromQuery]string orgApacheFelixHttpsTruststore, [FromQuery]string orgApacheFelixHttpsTruststoreTypeHint, [FromQuery]string orgApacheFelixHttpsTruststorePassword, [FromQuery]string orgApacheFelixHttpsTruststorePasswordTypeHint, [FromQuery]string orgApacheFelixHttpsClientcertificate, [FromQuery]string orgApacheFelixHttpsClientcertificateTypeHint, [FromQuery]bool? orgApacheFelixHttpsEnable, [FromQuery]string orgApacheFelixHttpsEnableTypeHint, [FromQuery]string orgOsgiServiceHttpPortSecure, [FromQuery]string orgOsgiServiceHttpPortSecureTypeHint)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="proxyHost"></param>
        /// <param name="proxyHostTypeHint"></param>
        /// <param name="proxyPort"></param>
        /// <param name="proxyPortTypeHint"></param>
        /// <param name="proxyExceptions"></param>
        /// <param name="proxyExceptionsTypeHint"></param>
        /// <param name="proxyEnabled"></param>
        /// <param name="proxyEnabledTypeHint"></param>
        /// <param name="proxyUser"></param>
        /// <param name="proxyUserTypeHint"></param>
        /// <param name="proxyPassword"></param>
        /// <param name="proxyPasswordTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//apps/system/config/org.apache.http.proxyconfigurator.config")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheHttpComponentsProxyConfiguration")]
        public virtual IActionResult PostConfigApacheHttpComponentsProxyConfiguration([FromQuery]string proxyHost, [FromQuery]string proxyHostTypeHint, [FromQuery]int? proxyPort, [FromQuery]string proxyPortTypeHint, [FromQuery]List<string> proxyExceptions, [FromQuery]string proxyExceptionsTypeHint, [FromQuery]bool? proxyEnabled, [FromQuery]string proxyEnabledTypeHint, [FromQuery]string proxyUser, [FromQuery]string proxyUserTypeHint, [FromQuery]string proxyPassword, [FromQuery]string proxyPasswordTypeHint)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="alias"></param>
        /// <param name="aliasTypeHint"></param>
        /// <param name="davCreateAbsoluteUri"></param>
        /// <param name="davCreateAbsoluteUriTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheSlingDavExServlet")]
        public virtual IActionResult PostConfigApacheSlingDavExServlet([FromQuery]string alias, [FromQuery]string aliasTypeHint, [FromQuery]bool? davCreateAbsoluteUri, [FromQuery]string davCreateAbsoluteUriTypeHint)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="jsonMaximumresults"></param>
        /// <param name="jsonMaximumresultsTypeHint"></param>
        /// <param name="enableHtml"></param>
        /// <param name="enableHtmlTypeHint"></param>
        /// <param name="enableTxt"></param>
        /// <param name="enableTxtTypeHint"></param>
        /// <param name="enableXml"></param>
        /// <param name="enableXmlTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheSlingGetServlet")]
        public virtual IActionResult PostConfigApacheSlingGetServlet([FromQuery]string jsonMaximumresults, [FromQuery]string jsonMaximumresultsTypeHint, [FromQuery]bool? enableHtml, [FromQuery]string enableHtmlTypeHint, [FromQuery]bool? enableTxt, [FromQuery]string enableTxtTypeHint, [FromQuery]bool? enableXml, [FromQuery]string enableXmlTypeHint)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="allowEmpty"></param>
        /// <param name="allowEmptyTypeHint"></param>
        /// <param name="allowHosts"></param>
        /// <param name="allowHostsTypeHint"></param>
        /// <param name="allowHostsRegexp"></param>
        /// <param name="allowHostsRegexpTypeHint"></param>
        /// <param name="filterMethods"></param>
        /// <param name="filterMethodsTypeHint"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//apps/system/config/org.apache.sling.security.impl.ReferrerFilter")]
        [ValidateModelState]
        [SwaggerOperation("PostConfigApacheSlingReferrerFilter")]
        public virtual IActionResult PostConfigApacheSlingReferrerFilter([FromQuery]bool? allowEmpty, [FromQuery]string allowEmptyTypeHint, [FromQuery]string allowHosts, [FromQuery]string allowHostsTypeHint, [FromQuery]string allowHostsRegexp, [FromQuery]string allowHostsRegexpTypeHint, [FromQuery]string filterMethods, [FromQuery]string filterMethodsTypeHint)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="operation"></param>
        /// <param name="deleteAuthorizable"></param>
        /// <param name="file"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//{path}/{name}")]
        [ValidateModelState]
        [SwaggerOperation("PostNode")]
        public virtual IActionResult PostNode([FromRoute][Required]string path, [FromRoute][Required]string name, [FromQuery]string operation, [FromQuery]string deleteAuthorizable, [FromForm]System.IO.Stream file)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="name"></param>
        /// <param name="addMembers"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//{path}/{name}.rw.html")]
        [ValidateModelState]
        [SwaggerOperation("PostNodeRw")]
        public virtual IActionResult PostNodeRw([FromRoute][Required]string path, [FromRoute][Required]string name, [FromQuery]string addMembers)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="jcrprimaryType"></param>
        /// <param name="name"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//{path}/")]
        [ValidateModelState]
        [SwaggerOperation("PostPath")]
        public virtual IActionResult PostPath([FromRoute][Required]string path, [FromQuery][Required()]string jcrprimaryType, [FromQuery][Required()]string name)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"></param>
        /// <param name="pLimit"></param>
        /// <param name="_1property"></param>
        /// <param name="_1propertyValue"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//bin/querybuilder.json")]
        [ValidateModelState]
        [SwaggerOperation("PostQuery")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostQuery([FromQuery][Required()]string path, [FromQuery][Required()]decimal? pLimit, [FromQuery][Required()]string _1property, [FromQuery][Required()]string _1propertyValue)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="ignoredeactivated"></param>
        /// <param name="onlymodified"></param>
        /// <param name="path"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//etc/replication/treeactivation.html")]
        [ValidateModelState]
        [SwaggerOperation("PostTreeActivation")]
        public virtual IActionResult PostTreeActivation([FromQuery][Required()]bool? ignoredeactivated, [FromQuery][Required()]bool? onlymodified, [FromQuery][Required()]string path)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="operation"></param>
        /// <param name="newPassword"></param>
        /// <param name="rePassword"></param>
        /// <param name="keyStoreType"></param>
        /// <param name="removeAlias"></param>
        /// <param name="certificate"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//libs/granite/security/post/truststore")]
        [ValidateModelState]
        [SwaggerOperation("PostTruststore")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostTruststore([FromQuery]string operation, [FromQuery]string newPassword, [FromQuery]string rePassword, [FromQuery]string keyStoreType, [FromQuery]string removeAlias, [FromForm]System.IO.Stream certificate)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="truststoreP12"></param>
        /// <response code="0">Default response</response>
        [HttpPost]
        [Route("//etc/truststore")]
        [ValidateModelState]
        [SwaggerOperation("PostTruststorePKCS12")]
        [SwaggerResponse(statusCode: 0, type: typeof(string), description: "Default response")]
        public virtual IActionResult PostTruststorePKCS12([FromForm]System.IO.Stream truststoreP12)
        { 
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(string));

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
