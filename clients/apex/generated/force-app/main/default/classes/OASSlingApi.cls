/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

public class OASSlingApi {
    OASClient client;

    public OASSlingApi(OASClient client) {
        this.client = client;
    }

    public OASSlingApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void deleteAgent(Map<String, Object> params) {
        client.assertNotNull(params.get('runmode'), 'runmode');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/etc/replication/agents.{runmode}/{name}', '',
            query, form,
            new Map<String, Object>{
                'runmode' => (String) params.get('runmode'),
                'name' => (String) params.get('name')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void deleteNode(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/{path}/{name}', '',
            query, form,
            new Map<String, Object>{
                'path' => (String) params.get('path'),
                'name' => (String) params.get('name')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void getAgent(Map<String, Object> params) {
        client.assertNotNull(params.get('runmode'), 'runmode');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/etc/replication/agents.{runmode}/{name}', '',
            query, form,
            new Map<String, Object>{
                'runmode' => (String) params.get('runmode'),
                'name' => (String) params.get('name')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param runmode  (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getAgents(Map<String, Object> params) {
        client.assertNotNull(params.get('runmode'), 'runmode');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/etc/replication/agents.{runmode}.-1.json', '',
            query, form,
            new Map<String, Object>{
                'runmode' => (String) params.get('runmode')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return OASKeystoreInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASKeystoreInfo getAuthorizableKeystore(Map<String, Object> params) {
        client.assertNotNull(params.get('intermediatePath'), 'intermediatePath');
        client.assertNotNull(params.get('authorizableId'), 'authorizableId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASKeystoreInfo) client.invoke(
            'GET', '/{intermediatePath}/{authorizableId}.ks.json', '',
            query, form,
            new Map<String, Object>{
                'intermediatePath' => (String) params.get('intermediatePath'),
                'authorizableId' => (String) params.get('authorizableId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASKeystoreInfo.class
        );
    }
    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob getKeystore(Map<String, Object> params) {
        client.assertNotNull(params.get('intermediatePath'), 'intermediatePath');
        client.assertNotNull(params.get('authorizableId'), 'authorizableId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'GET', '/{intermediatePath}/{authorizableId}/keystore/store.p12', '',
            query, form,
            new Map<String, Object>{
                'intermediatePath' => (String) params.get('intermediatePath'),
                'authorizableId' => (String) params.get('authorizableId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/octet-stream' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            Blob.class
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void getNode(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/{path}/{name}', '',
            query, form,
            new Map<String, Object>{
                'path' => (String) params.get('path'),
                'name' => (String) params.get('name')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param r_group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob getPackage(Map<String, Object> params) {
        client.assertNotNull(params.get('r_group'), 'r_group');
        client.assertNotNull(params.get('name'), 'name');
        client.assertNotNull(params.get('version'), 'version');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'GET', '/etc/packages/{group}/{name}-{version}.zip', '',
            query, form,
            new Map<String, Object>{
                'group' => (String) params.get('r_group'),
                'name' => (String) params.get('name'),
                'version' => (String) params.get('version')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/octet-stream' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            Blob.class
        );
    }
    /**
     * 
     * 
     * @param r_group  (required)
     * @param name  (required)
     * @param version  (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getPackageFilter(Map<String, Object> params) {
        client.assertNotNull(params.get('r_group'), 'r_group');
        client.assertNotNull(params.get('name'), 'name');
        client.assertNotNull(params.get('version'), 'version');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json', '',
            query, form,
            new Map<String, Object>{
                'group' => (String) params.get('r_group'),
                'name' => (String) params.get('name'),
                'version' => (String) params.get('version')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param r_1property  (required)
     * @param r_1propertyValue  (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getQuery(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('pLimit'), 'pLimit');
        client.assertNotNull(params.get('r_1property'), 'r_1property');
        client.assertNotNull(params.get('r_1propertyValue'), 'r_1propertyValue');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('p.limit', (Double) params.get('pLimit')));
        query.addAll(client.makeParam('1_property', (String) params.get('r_1property')));
        query.addAll(client.makeParam('1_property.value', (String) params.get('r_1propertyValue')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/bin/querybuilder.json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob getTruststore() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'GET', '/etc/truststore/truststore.p12', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/octet-stream' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            Blob.class
        );
    }
    /**
     * 
     * 
     * @return OASTruststoreInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASTruststoreInfo getTruststoreInfo() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASTruststoreInfo) client.invoke(
            'GET', '/libs/granite/security/truststore.json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            OASTruststoreInfo.class
        );
    }
    /**
     * 
     * 
     * @param runmode  (required)
     * @param name  (required)
     * @param jcrcontentcqdistribute  (optional)
     * @param jcrcontentcqdistributeTypeHint  (optional)
     * @param jcrcontentcqname  (optional)
     * @param jcrcontentcqtemplate  (optional)
     * @param jcrcontentenabled  (optional)
     * @param jcrcontentjcrdescription  (optional)
     * @param jcrcontentjcrlastModified  (optional)
     * @param jcrcontentjcrlastModifiedBy  (optional)
     * @param jcrcontentjcrmixinTypes  (optional)
     * @param jcrcontentjcrtitle  (optional)
     * @param jcrcontentlogLevel  (optional)
     * @param jcrcontentnoStatusUpdate  (optional)
     * @param jcrcontentnoVersioning  (optional)
     * @param jcrcontentprotocolConnectTimeout  (optional)
     * @param jcrcontentprotocolHTTPConnectionClosed  (optional)
     * @param jcrcontentprotocolHTTPExpired  (optional)
     * @param jcrcontentprotocolHTTPHeaders  (optional)
     * @param jcrcontentprotocolHTTPHeadersTypeHint  (optional)
     * @param jcrcontentprotocolHTTPMethod  (optional)
     * @param jcrcontentprotocolHTTPSRelaxed  (optional)
     * @param jcrcontentprotocolInterface  (optional)
     * @param jcrcontentprotocolSocketTimeout  (optional)
     * @param jcrcontentprotocolVersion  (optional)
     * @param jcrcontentproxyNTLMDomain  (optional)
     * @param jcrcontentproxyNTLMHost  (optional)
     * @param jcrcontentproxyHost  (optional)
     * @param jcrcontentproxyPassword  (optional)
     * @param jcrcontentproxyPort  (optional)
     * @param jcrcontentproxyUser  (optional)
     * @param jcrcontentqueueBatchMaxSize  (optional)
     * @param jcrcontentqueueBatchMode  (optional)
     * @param jcrcontentqueueBatchWaitTime  (optional)
     * @param jcrcontentretryDelay  (optional)
     * @param jcrcontentreverseReplication  (optional)
     * @param jcrcontentserializationType  (optional)
     * @param jcrcontentslingresourceType  (optional)
     * @param jcrcontentssl  (optional)
     * @param jcrcontenttransportNTLMDomain  (optional)
     * @param jcrcontenttransportNTLMHost  (optional)
     * @param jcrcontenttransportPassword  (optional)
     * @param jcrcontenttransportUri  (optional)
     * @param jcrcontenttransportUser  (optional)
     * @param jcrcontenttriggerDistribute  (optional)
     * @param jcrcontenttriggerModified  (optional)
     * @param jcrcontenttriggerOnOffTime  (optional)
     * @param jcrcontenttriggerReceive  (optional)
     * @param jcrcontenttriggerSpecific  (optional)
     * @param jcrcontentuserId  (optional)
     * @param jcrprimaryType  (optional)
     * @param operation  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postAgent(Map<String, Object> params) {
        client.assertNotNull(params.get('runmode'), 'runmode');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('jcr:content/cq:distribute', (Boolean) params.get('jcrcontentcqdistribute')));
        query.addAll(client.makeParam('jcr:content/cq:distribute@TypeHint', (String) params.get('jcrcontentcqdistributeTypeHint')));
        query.addAll(client.makeParam('jcr:content/cq:name', (String) params.get('jcrcontentcqname')));
        query.addAll(client.makeParam('jcr:content/cq:template', (String) params.get('jcrcontentcqtemplate')));
        query.addAll(client.makeParam('jcr:content/enabled', (Boolean) params.get('jcrcontentenabled')));
        query.addAll(client.makeParam('jcr:content/jcr:description', (String) params.get('jcrcontentjcrdescription')));
        query.addAll(client.makeParam('jcr:content/jcr:lastModified', (String) params.get('jcrcontentjcrlastModified')));
        query.addAll(client.makeParam('jcr:content/jcr:lastModifiedBy', (String) params.get('jcrcontentjcrlastModifiedBy')));
        query.addAll(client.makeParam('jcr:content/jcr:mixinTypes', (String) params.get('jcrcontentjcrmixinTypes')));
        query.addAll(client.makeParam('jcr:content/jcr:title', (String) params.get('jcrcontentjcrtitle')));
        query.addAll(client.makeParam('jcr:content/logLevel', (String) params.get('jcrcontentlogLevel')));
        query.addAll(client.makeParam('jcr:content/noStatusUpdate', (Boolean) params.get('jcrcontentnoStatusUpdate')));
        query.addAll(client.makeParam('jcr:content/noVersioning', (Boolean) params.get('jcrcontentnoVersioning')));
        query.addAll(client.makeParam('jcr:content/protocolConnectTimeout', (Double) params.get('jcrcontentprotocolConnectTimeout')));
        query.addAll(client.makeParam('jcr:content/protocolHTTPConnectionClosed', (Boolean) params.get('jcrcontentprotocolHTTPConnectionClosed')));
        query.addAll(client.makeParam('jcr:content/protocolHTTPExpired', (String) params.get('jcrcontentprotocolHTTPExpired')));
        query.addAll(client.makeParams('jcr:content/protocolHTTPHeaders', (List<String>) params.get('jcrcontentprotocolHTTPHeaders')));
        query.addAll(client.makeParam('jcr:content/protocolHTTPHeaders@TypeHint', (String) params.get('jcrcontentprotocolHTTPHeadersTypeHint')));
        query.addAll(client.makeParam('jcr:content/protocolHTTPMethod', (String) params.get('jcrcontentprotocolHTTPMethod')));
        query.addAll(client.makeParam('jcr:content/protocolHTTPSRelaxed', (Boolean) params.get('jcrcontentprotocolHTTPSRelaxed')));
        query.addAll(client.makeParam('jcr:content/protocolInterface', (String) params.get('jcrcontentprotocolInterface')));
        query.addAll(client.makeParam('jcr:content/protocolSocketTimeout', (Double) params.get('jcrcontentprotocolSocketTimeout')));
        query.addAll(client.makeParam('jcr:content/protocolVersion', (String) params.get('jcrcontentprotocolVersion')));
        query.addAll(client.makeParam('jcr:content/proxyNTLMDomain', (String) params.get('jcrcontentproxyNTLMDomain')));
        query.addAll(client.makeParam('jcr:content/proxyNTLMHost', (String) params.get('jcrcontentproxyNTLMHost')));
        query.addAll(client.makeParam('jcr:content/proxyHost', (String) params.get('jcrcontentproxyHost')));
        query.addAll(client.makeParam('jcr:content/proxyPassword', (String) params.get('jcrcontentproxyPassword')));
        query.addAll(client.makeParam('jcr:content/proxyPort', (Double) params.get('jcrcontentproxyPort')));
        query.addAll(client.makeParam('jcr:content/proxyUser', (String) params.get('jcrcontentproxyUser')));
        query.addAll(client.makeParam('jcr:content/queueBatchMaxSize', (Double) params.get('jcrcontentqueueBatchMaxSize')));
        query.addAll(client.makeParam('jcr:content/queueBatchMode', (String) params.get('jcrcontentqueueBatchMode')));
        query.addAll(client.makeParam('jcr:content/queueBatchWaitTime', (Double) params.get('jcrcontentqueueBatchWaitTime')));
        query.addAll(client.makeParam('jcr:content/retryDelay', (String) params.get('jcrcontentretryDelay')));
        query.addAll(client.makeParam('jcr:content/reverseReplication', (Boolean) params.get('jcrcontentreverseReplication')));
        query.addAll(client.makeParam('jcr:content/serializationType', (String) params.get('jcrcontentserializationType')));
        query.addAll(client.makeParam('jcr:content/sling:resourceType', (String) params.get('jcrcontentslingresourceType')));
        query.addAll(client.makeParam('jcr:content/ssl', (String) params.get('jcrcontentssl')));
        query.addAll(client.makeParam('jcr:content/transportNTLMDomain', (String) params.get('jcrcontenttransportNTLMDomain')));
        query.addAll(client.makeParam('jcr:content/transportNTLMHost', (String) params.get('jcrcontenttransportNTLMHost')));
        query.addAll(client.makeParam('jcr:content/transportPassword', (String) params.get('jcrcontenttransportPassword')));
        query.addAll(client.makeParam('jcr:content/transportUri', (String) params.get('jcrcontenttransportUri')));
        query.addAll(client.makeParam('jcr:content/transportUser', (String) params.get('jcrcontenttransportUser')));
        query.addAll(client.makeParam('jcr:content/triggerDistribute', (Boolean) params.get('jcrcontenttriggerDistribute')));
        query.addAll(client.makeParam('jcr:content/triggerModified', (Boolean) params.get('jcrcontenttriggerModified')));
        query.addAll(client.makeParam('jcr:content/triggerOnOffTime', (Boolean) params.get('jcrcontenttriggerOnOffTime')));
        query.addAll(client.makeParam('jcr:content/triggerReceive', (Boolean) params.get('jcrcontenttriggerReceive')));
        query.addAll(client.makeParam('jcr:content/triggerSpecific', (Boolean) params.get('jcrcontenttriggerSpecific')));
        query.addAll(client.makeParam('jcr:content/userId', (String) params.get('jcrcontentuserId')));
        query.addAll(client.makeParam('jcr:primaryType', (String) params.get('jcrprimaryType')));
        query.addAll(client.makeParam(':operation', (String) params.get('operation')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/etc/replication/agents.{runmode}/{name}', '',
            query, form,
            new Map<String, Object>{
                'runmode' => (String) params.get('runmode'),
                'name' => (String) params.get('name')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param intermediatePath  (required)
     * @param authorizableId  (required)
     * @param operation  (optional)
     * @param currentPassword  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyPassword  (optional)
     * @param keyStorePass  (optional)
     * @param alias  (optional)
     * @param newAlias  (optional)
     * @param removeAlias  (optional)
     * @param certChain  (optional)
     * @param pk  (optional)
     * @param keyStore  (optional)
     * @return OASKeystoreInfo
     * @throws OAS.ApiException if fails to make API call
     */
    public OASKeystoreInfo postAuthorizableKeystore(Map<String, Object> params) {
        client.assertNotNull(params.get('intermediatePath'), 'intermediatePath');
        client.assertNotNull(params.get('authorizableId'), 'authorizableId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam(':operation', (String) params.get('operation')));
        query.addAll(client.makeParam('currentPassword', (String) params.get('currentPassword')));
        query.addAll(client.makeParam('newPassword', (String) params.get('newPassword')));
        query.addAll(client.makeParam('rePassword', (String) params.get('rePassword')));
        query.addAll(client.makeParam('keyPassword', (String) params.get('keyPassword')));
        query.addAll(client.makeParam('keyStorePass', (String) params.get('keyStorePass')));
        query.addAll(client.makeParam('alias', (String) params.get('alias')));
        query.addAll(client.makeParam('newAlias', (String) params.get('newAlias')));
        query.addAll(client.makeParam('removeAlias', (String) params.get('removeAlias')));

        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('cert-chain', (Blob) params.get('certChain')));
        form.addAll(client.makeParam('pk', (Blob) params.get('pk')));
        form.addAll(client.makeParam('keyStore', (Blob) params.get('keyStore')));

        return (OASKeystoreInfo) client.invoke(
            'POST', '/{intermediatePath}/{authorizableId}.ks.html', '',
            query, form,
            new Map<String, Object>{
                'intermediatePath' => (String) params.get('intermediatePath'),
                'authorizableId' => (String) params.get('authorizableId')
            },
            new Map<String, Object>(),
            new List<String>{ 'text/plain' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'aemAuth' },
            OASKeystoreInfo.class
        );
    }
    /**
     * 
     * 
     * @param authorizableId  (required)
     * @param intermediatePath  (required)
     * @param createUser  (optional)
     * @param createGroup  (optional)
     * @param reppassword  (optional)
     * @param profilegivenName  (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postAuthorizables(Map<String, Object> params) {
        client.assertNotNull(params.get('authorizableId'), 'authorizableId');
        client.assertNotNull(params.get('intermediatePath'), 'intermediatePath');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('authorizableId', (String) params.get('authorizableId')));
        query.addAll(client.makeParam('intermediatePath', (String) params.get('intermediatePath')));
        query.addAll(client.makeParam('createUser', (String) params.get('createUser')));
        query.addAll(client.makeParam('createGroup', (String) params.get('createGroup')));
        query.addAll(client.makeParam('rep:password', (String) params.get('reppassword')));
        query.addAll(client.makeParam('profile/givenName', (String) params.get('profilegivenName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'POST', '/libs/granite/security/post/authorizables', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/html' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param keyStorePassword  (optional)
     * @param keyStorePasswordTypeHint  (optional)
     * @param serviceRanking  (optional)
     * @param serviceRankingTypeHint  (optional)
     * @param idpHttpRedirect  (optional)
     * @param idpHttpRedirectTypeHint  (optional)
     * @param createUser  (optional)
     * @param createUserTypeHint  (optional)
     * @param defaultRedirectUrl  (optional)
     * @param defaultRedirectUrlTypeHint  (optional)
     * @param userIDAttribute  (optional)
     * @param userIDAttributeTypeHint  (optional)
     * @param defaultGroups  (optional)
     * @param defaultGroupsTypeHint  (optional)
     * @param idpCertAlias  (optional)
     * @param idpCertAliasTypeHint  (optional)
     * @param addGroupMemberships  (optional)
     * @param addGroupMembershipsTypeHint  (optional)
     * @param path  (optional)
     * @param pathTypeHint  (optional)
     * @param synchronizeAttributes  (optional)
     * @param synchronizeAttributesTypeHint  (optional)
     * @param clockTolerance  (optional)
     * @param clockToleranceTypeHint  (optional)
     * @param groupMembershipAttribute  (optional)
     * @param groupMembershipAttributeTypeHint  (optional)
     * @param idpUrl  (optional)
     * @param idpUrlTypeHint  (optional)
     * @param logoutUrl  (optional)
     * @param logoutUrlTypeHint  (optional)
     * @param serviceProviderEntityId  (optional)
     * @param serviceProviderEntityIdTypeHint  (optional)
     * @param assertionConsumerServiceURL  (optional)
     * @param assertionConsumerServiceURLTypeHint  (optional)
     * @param handleLogout  (optional)
     * @param handleLogoutTypeHint  (optional)
     * @param spPrivateKeyAlias  (optional)
     * @param spPrivateKeyAliasTypeHint  (optional)
     * @param useEncryption  (optional)
     * @param useEncryptionTypeHint  (optional)
     * @param nameIdFormat  (optional)
     * @param nameIdFormatTypeHint  (optional)
     * @param digestMethod  (optional)
     * @param digestMethodTypeHint  (optional)
     * @param signatureMethod  (optional)
     * @param signatureMethodTypeHint  (optional)
     * @param userIntermediatePath  (optional)
     * @param userIntermediatePathTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigAdobeGraniteSamlAuthenticationHandler(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('keyStorePassword', (String) params.get('keyStorePassword')));
        query.addAll(client.makeParam('keyStorePassword@TypeHint', (String) params.get('keyStorePasswordTypeHint')));
        query.addAll(client.makeParam('service.ranking', (Integer) params.get('serviceRanking')));
        query.addAll(client.makeParam('service.ranking@TypeHint', (String) params.get('serviceRankingTypeHint')));
        query.addAll(client.makeParam('idpHttpRedirect', (Boolean) params.get('idpHttpRedirect')));
        query.addAll(client.makeParam('idpHttpRedirect@TypeHint', (String) params.get('idpHttpRedirectTypeHint')));
        query.addAll(client.makeParam('createUser', (Boolean) params.get('createUser')));
        query.addAll(client.makeParam('createUser@TypeHint', (String) params.get('createUserTypeHint')));
        query.addAll(client.makeParam('defaultRedirectUrl', (String) params.get('defaultRedirectUrl')));
        query.addAll(client.makeParam('defaultRedirectUrl@TypeHint', (String) params.get('defaultRedirectUrlTypeHint')));
        query.addAll(client.makeParam('userIDAttribute', (String) params.get('userIDAttribute')));
        query.addAll(client.makeParam('userIDAttribute@TypeHint', (String) params.get('userIDAttributeTypeHint')));
        query.addAll(client.makeParams('defaultGroups', (List<String>) params.get('defaultGroups')));
        query.addAll(client.makeParam('defaultGroups@TypeHint', (String) params.get('defaultGroupsTypeHint')));
        query.addAll(client.makeParam('idpCertAlias', (String) params.get('idpCertAlias')));
        query.addAll(client.makeParam('idpCertAlias@TypeHint', (String) params.get('idpCertAliasTypeHint')));
        query.addAll(client.makeParam('addGroupMemberships', (Boolean) params.get('addGroupMemberships')));
        query.addAll(client.makeParam('addGroupMemberships@TypeHint', (String) params.get('addGroupMembershipsTypeHint')));
        query.addAll(client.makeParams('path', (List<String>) params.get('path')));
        query.addAll(client.makeParam('path@TypeHint', (String) params.get('pathTypeHint')));
        query.addAll(client.makeParams('synchronizeAttributes', (List<String>) params.get('synchronizeAttributes')));
        query.addAll(client.makeParam('synchronizeAttributes@TypeHint', (String) params.get('synchronizeAttributesTypeHint')));
        query.addAll(client.makeParam('clockTolerance', (Integer) params.get('clockTolerance')));
        query.addAll(client.makeParam('clockTolerance@TypeHint', (String) params.get('clockToleranceTypeHint')));
        query.addAll(client.makeParam('groupMembershipAttribute', (String) params.get('groupMembershipAttribute')));
        query.addAll(client.makeParam('groupMembershipAttribute@TypeHint', (String) params.get('groupMembershipAttributeTypeHint')));
        query.addAll(client.makeParam('idpUrl', (String) params.get('idpUrl')));
        query.addAll(client.makeParam('idpUrl@TypeHint', (String) params.get('idpUrlTypeHint')));
        query.addAll(client.makeParam('logoutUrl', (String) params.get('logoutUrl')));
        query.addAll(client.makeParam('logoutUrl@TypeHint', (String) params.get('logoutUrlTypeHint')));
        query.addAll(client.makeParam('serviceProviderEntityId', (String) params.get('serviceProviderEntityId')));
        query.addAll(client.makeParam('serviceProviderEntityId@TypeHint', (String) params.get('serviceProviderEntityIdTypeHint')));
        query.addAll(client.makeParam('assertionConsumerServiceURL', (String) params.get('assertionConsumerServiceURL')));
        query.addAll(client.makeParam('assertionConsumerServiceURL@TypeHint', (String) params.get('assertionConsumerServiceURLTypeHint')));
        query.addAll(client.makeParam('handleLogout', (Boolean) params.get('handleLogout')));
        query.addAll(client.makeParam('handleLogout@TypeHint', (String) params.get('handleLogoutTypeHint')));
        query.addAll(client.makeParam('spPrivateKeyAlias', (String) params.get('spPrivateKeyAlias')));
        query.addAll(client.makeParam('spPrivateKeyAlias@TypeHint', (String) params.get('spPrivateKeyAliasTypeHint')));
        query.addAll(client.makeParam('useEncryption', (Boolean) params.get('useEncryption')));
        query.addAll(client.makeParam('useEncryption@TypeHint', (String) params.get('useEncryptionTypeHint')));
        query.addAll(client.makeParam('nameIdFormat', (String) params.get('nameIdFormat')));
        query.addAll(client.makeParam('nameIdFormat@TypeHint', (String) params.get('nameIdFormatTypeHint')));
        query.addAll(client.makeParam('digestMethod', (String) params.get('digestMethod')));
        query.addAll(client.makeParam('digestMethod@TypeHint', (String) params.get('digestMethodTypeHint')));
        query.addAll(client.makeParam('signatureMethod', (String) params.get('signatureMethod')));
        query.addAll(client.makeParam('signatureMethod@TypeHint', (String) params.get('signatureMethodTypeHint')));
        query.addAll(client.makeParam('userIntermediatePath', (String) params.get('userIntermediatePath')));
        query.addAll(client.makeParam('userIntermediatePath@TypeHint', (String) params.get('userIntermediatePathTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param orgApacheFelixHttpsNio  (optional)
     * @param orgApacheFelixHttpsNioTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystore  (optional)
     * @param orgApacheFelixHttpsKeystoreTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystorePassword  (optional)
     * @param orgApacheFelixHttpsKeystorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKey  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyTypeHint  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
     * @param orgApacheFelixHttpsKeystoreKeyPasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststore  (optional)
     * @param orgApacheFelixHttpsTruststoreTypeHint  (optional)
     * @param orgApacheFelixHttpsTruststorePassword  (optional)
     * @param orgApacheFelixHttpsTruststorePasswordTypeHint  (optional)
     * @param orgApacheFelixHttpsClientcertificate  (optional)
     * @param orgApacheFelixHttpsClientcertificateTypeHint  (optional)
     * @param orgApacheFelixHttpsEnable  (optional)
     * @param orgApacheFelixHttpsEnableTypeHint  (optional)
     * @param orgOsgiServiceHttpPortSecure  (optional)
     * @param orgOsgiServiceHttpPortSecureTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigApacheFelixJettyBasedHttpService(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('org.apache.felix.https.nio', (Boolean) params.get('orgApacheFelixHttpsNio')));
        query.addAll(client.makeParam('org.apache.felix.https.nio@TypeHint', (String) params.get('orgApacheFelixHttpsNioTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore', (String) params.get('orgApacheFelixHttpsKeystore')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore@TypeHint', (String) params.get('orgApacheFelixHttpsKeystoreTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.password', (String) params.get('orgApacheFelixHttpsKeystorePassword')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.password@TypeHint', (String) params.get('orgApacheFelixHttpsKeystorePasswordTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.key', (String) params.get('orgApacheFelixHttpsKeystoreKey')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.key@TypeHint', (String) params.get('orgApacheFelixHttpsKeystoreKeyTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.key.password', (String) params.get('orgApacheFelixHttpsKeystoreKeyPassword')));
        query.addAll(client.makeParam('org.apache.felix.https.keystore.key.password@TypeHint', (String) params.get('orgApacheFelixHttpsKeystoreKeyPasswordTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.truststore', (String) params.get('orgApacheFelixHttpsTruststore')));
        query.addAll(client.makeParam('org.apache.felix.https.truststore@TypeHint', (String) params.get('orgApacheFelixHttpsTruststoreTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.truststore.password', (String) params.get('orgApacheFelixHttpsTruststorePassword')));
        query.addAll(client.makeParam('org.apache.felix.https.truststore.password@TypeHint', (String) params.get('orgApacheFelixHttpsTruststorePasswordTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.clientcertificate', (String) params.get('orgApacheFelixHttpsClientcertificate')));
        query.addAll(client.makeParam('org.apache.felix.https.clientcertificate@TypeHint', (String) params.get('orgApacheFelixHttpsClientcertificateTypeHint')));
        query.addAll(client.makeParam('org.apache.felix.https.enable', (Boolean) params.get('orgApacheFelixHttpsEnable')));
        query.addAll(client.makeParam('org.apache.felix.https.enable@TypeHint', (String) params.get('orgApacheFelixHttpsEnableTypeHint')));
        query.addAll(client.makeParam('org.osgi.service.http.port.secure', (String) params.get('orgOsgiServiceHttpPortSecure')));
        query.addAll(client.makeParam('org.osgi.service.http.port.secure@TypeHint', (String) params.get('orgOsgiServiceHttpPortSecureTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/org.apache.felix.http', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param proxyHost  (optional)
     * @param proxyHostTypeHint  (optional)
     * @param proxyPort  (optional)
     * @param proxyPortTypeHint  (optional)
     * @param proxyExceptions  (optional)
     * @param proxyExceptionsTypeHint  (optional)
     * @param proxyEnabled  (optional)
     * @param proxyEnabledTypeHint  (optional)
     * @param proxyUser  (optional)
     * @param proxyUserTypeHint  (optional)
     * @param proxyPassword  (optional)
     * @param proxyPasswordTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigApacheHttpComponentsProxyConfiguration(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('proxy.host', (String) params.get('proxyHost')));
        query.addAll(client.makeParam('proxy.host@TypeHint', (String) params.get('proxyHostTypeHint')));
        query.addAll(client.makeParam('proxy.port', (Integer) params.get('proxyPort')));
        query.addAll(client.makeParam('proxy.port@TypeHint', (String) params.get('proxyPortTypeHint')));
        query.addAll(client.makeParams('proxy.exceptions', (List<String>) params.get('proxyExceptions')));
        query.addAll(client.makeParam('proxy.exceptions@TypeHint', (String) params.get('proxyExceptionsTypeHint')));
        query.addAll(client.makeParam('proxy.enabled', (Boolean) params.get('proxyEnabled')));
        query.addAll(client.makeParam('proxy.enabled@TypeHint', (String) params.get('proxyEnabledTypeHint')));
        query.addAll(client.makeParam('proxy.user', (String) params.get('proxyUser')));
        query.addAll(client.makeParam('proxy.user@TypeHint', (String) params.get('proxyUserTypeHint')));
        query.addAll(client.makeParam('proxy.password', (String) params.get('proxyPassword')));
        query.addAll(client.makeParam('proxy.password@TypeHint', (String) params.get('proxyPasswordTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/org.apache.http.proxyconfigurator.config', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param alias  (optional)
     * @param aliasTypeHint  (optional)
     * @param davCreateAbsoluteUri  (optional)
     * @param davCreateAbsoluteUriTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigApacheSlingDavExServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('alias', (String) params.get('alias')));
        query.addAll(client.makeParam('alias@TypeHint', (String) params.get('aliasTypeHint')));
        query.addAll(client.makeParam('dav.create-absolute-uri', (Boolean) params.get('davCreateAbsoluteUri')));
        query.addAll(client.makeParam('dav.create-absolute-uri@TypeHint', (String) params.get('davCreateAbsoluteUriTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param jsonMaximumresults  (optional)
     * @param jsonMaximumresultsTypeHint  (optional)
     * @param enableHtml  (optional)
     * @param enableHtmlTypeHint  (optional)
     * @param enableTxt  (optional)
     * @param enableTxtTypeHint  (optional)
     * @param enableXml  (optional)
     * @param enableXmlTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigApacheSlingGetServlet(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('json.maximumresults', (String) params.get('jsonMaximumresults')));
        query.addAll(client.makeParam('json.maximumresults@TypeHint', (String) params.get('jsonMaximumresultsTypeHint')));
        query.addAll(client.makeParam('enable.html', (Boolean) params.get('enableHtml')));
        query.addAll(client.makeParam('enable.html@TypeHint', (String) params.get('enableHtmlTypeHint')));
        query.addAll(client.makeParam('enable.txt', (Boolean) params.get('enableTxt')));
        query.addAll(client.makeParam('enable.txt@TypeHint', (String) params.get('enableTxtTypeHint')));
        query.addAll(client.makeParam('enable.xml', (Boolean) params.get('enableXml')));
        query.addAll(client.makeParam('enable.xml@TypeHint', (String) params.get('enableXmlTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param allowEmpty  (optional)
     * @param allowEmptyTypeHint  (optional)
     * @param allowHosts  (optional)
     * @param allowHostsTypeHint  (optional)
     * @param allowHostsRegexp  (optional)
     * @param allowHostsRegexpTypeHint  (optional)
     * @param filterMethods  (optional)
     * @param filterMethodsTypeHint  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postConfigApacheSlingReferrerFilter(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('allow.empty', (Boolean) params.get('allowEmpty')));
        query.addAll(client.makeParam('allow.empty@TypeHint', (String) params.get('allowEmptyTypeHint')));
        query.addAll(client.makeParam('allow.hosts', (String) params.get('allowHosts')));
        query.addAll(client.makeParam('allow.hosts@TypeHint', (String) params.get('allowHostsTypeHint')));
        query.addAll(client.makeParam('allow.hosts.regexp', (String) params.get('allowHostsRegexp')));
        query.addAll(client.makeParam('allow.hosts.regexp@TypeHint', (String) params.get('allowHostsRegexpTypeHint')));
        query.addAll(client.makeParam('filter.methods', (String) params.get('filterMethods')));
        query.addAll(client.makeParam('filter.methods@TypeHint', (String) params.get('filterMethodsTypeHint')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param operation  (optional)
     * @param deleteAuthorizable  (optional)
     * @param file  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postNode(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam(':operation', (String) params.get('operation')));
        query.addAll(client.makeParam('deleteAuthorizable', (String) params.get('deleteAuthorizable')));

        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('file', (Blob) params.get('file')));

        client.invoke(
            'POST', '/{path}/{name}', '',
            query, form,
            new Map<String, Object>{
                'path' => (String) params.get('path'),
                'name' => (String) params.get('name')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param name  (required)
     * @param addMembers  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postNodeRw(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('addMembers', (String) params.get('addMembers')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/{path}/{name}.rw.html', '',
            query, form,
            new Map<String, Object>{
                'path' => (String) params.get('path'),
                'name' => (String) params.get('name')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param jcrprimaryType  (required)
     * @param name  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postPath(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('jcrprimaryType'), 'jcrprimaryType');
        client.assertNotNull(params.get('name'), 'name');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('jcr:primaryType', (String) params.get('jcrprimaryType')));
        query.addAll(client.makeParam(':name', (String) params.get('name')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/{path}/', '',
            query, form,
            new Map<String, Object>{
                'path' => (String) params.get('path')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param path  (required)
     * @param pLimit  (required)
     * @param r_1property  (required)
     * @param r_1propertyValue  (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postQuery(Map<String, Object> params) {
        client.assertNotNull(params.get('path'), 'path');
        client.assertNotNull(params.get('pLimit'), 'pLimit');
        client.assertNotNull(params.get('r_1property'), 'r_1property');
        client.assertNotNull(params.get('r_1propertyValue'), 'r_1propertyValue');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('path', (String) params.get('path')));
        query.addAll(client.makeParam('p.limit', (Double) params.get('pLimit')));
        query.addAll(client.makeParam('1_property', (String) params.get('r_1property')));
        query.addAll(client.makeParam('1_property.value', (String) params.get('r_1propertyValue')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'POST', '/bin/querybuilder.json', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param ignoredeactivated  (required)
     * @param onlymodified  (required)
     * @param path  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void postTreeActivation(Map<String, Object> params) {
        client.assertNotNull(params.get('ignoredeactivated'), 'ignoredeactivated');
        client.assertNotNull(params.get('onlymodified'), 'onlymodified');
        client.assertNotNull(params.get('path'), 'path');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ignoredeactivated', (Boolean) params.get('ignoredeactivated')));
        query.addAll(client.makeParam('onlymodified', (Boolean) params.get('onlymodified')));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/etc/replication/treeactivation.html', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'aemAuth' },
            null
        );
    }
    /**
     * 
     * 
     * @param operation  (optional)
     * @param newPassword  (optional)
     * @param rePassword  (optional)
     * @param keyStoreType  (optional)
     * @param removeAlias  (optional)
     * @param certificate  (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postTruststore(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam(':operation', (String) params.get('operation')));
        query.addAll(client.makeParam('newPassword', (String) params.get('newPassword')));
        query.addAll(client.makeParam('rePassword', (String) params.get('rePassword')));
        query.addAll(client.makeParam('keyStoreType', (String) params.get('keyStoreType')));
        query.addAll(client.makeParam('removeAlias', (String) params.get('removeAlias')));

        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('certificate', (Blob) params.get('certificate')));

        return (String) client.invoke(
            'POST', '/libs/granite/security/post/truststore', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'aemAuth' },
            String.class
        );
    }
    /**
     * 
     * 
     * @param truststoreP12  (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String postTruststorePKCS12(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('truststore.p12', (Blob) params.get('truststoreP12')));

        return (String) client.invoke(
            'POST', '/etc/truststore', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'aemAuth' },
            String.class
        );
    }
}
