//
// SlingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class SlingAPI {
    /**

     - parameter runmode: (path)  
     - parameter name: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAgent(runmode: String, name: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAgentWithRequestBuilder(runmode: runmode, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /etc/replication/agents.{runmode}/{name}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter runmode: (path)  
     - parameter name: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAgentWithRequestBuilder(runmode: String, name: String) -> RequestBuilder<Void> {
        var path = "/etc/replication/agents.{runmode}/{name}"
        let runmodePreEscape = "\(runmode)"
        let runmodePostEscape = runmodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runmode}", with: runmodePostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter path: (path)  
     - parameter name: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteNode(path: String, name: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteNodeWithRequestBuilder(path: path, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /{path}/{name}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (path)  
     - parameter name: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteNodeWithRequestBuilder(path: String, name: String) -> RequestBuilder<Void> {
        var path = "/{path}/{name}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter runmode: (path)  
     - parameter name: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAgent(runmode: String, name: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAgentWithRequestBuilder(runmode: runmode, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /etc/replication/agents.{runmode}/{name}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter runmode: (path)  
     - parameter name: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getAgentWithRequestBuilder(runmode: String, name: String) -> RequestBuilder<Void> {
        var path = "/etc/replication/agents.{runmode}/{name}"
        let runmodePreEscape = "\(runmode)"
        let runmodePostEscape = runmodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runmode}", with: runmodePostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter runmode: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAgents(runmode: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getAgentsWithRequestBuilder(runmode: runmode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /etc/replication/agents.{runmode}.-1.json
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter runmode: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func getAgentsWithRequestBuilder(runmode: String) -> RequestBuilder<String> {
        var path = "/etc/replication/agents.{runmode}.-1.json"
        let runmodePreEscape = "\(runmode)"
        let runmodePostEscape = runmodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runmode}", with: runmodePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter intermediatePath: (path)  
     - parameter authorizableId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizableKeystore(intermediatePath: String, authorizableId: String, completion: @escaping ((_ data: KeystoreInfo?,_ error: Error?) -> Void)) {
        getAuthorizableKeystoreWithRequestBuilder(intermediatePath: intermediatePath, authorizableId: authorizableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /{intermediatePath}/{authorizableId}.ks.json
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter intermediatePath: (path)  
     - parameter authorizableId: (path)  
     - returns: RequestBuilder<KeystoreInfo> 
     */
    open class func getAuthorizableKeystoreWithRequestBuilder(intermediatePath: String, authorizableId: String) -> RequestBuilder<KeystoreInfo> {
        var path = "/{intermediatePath}/{authorizableId}.ks.json"
        let intermediatePathPreEscape = "\(intermediatePath)"
        let intermediatePathPostEscape = intermediatePathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{intermediatePath}", with: intermediatePathPostEscape, options: .literal, range: nil)
        let authorizableIdPreEscape = "\(authorizableId)"
        let authorizableIdPostEscape = authorizableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authorizableId}", with: authorizableIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KeystoreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter intermediatePath: (path)  
     - parameter authorizableId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKeystore(intermediatePath: String, authorizableId: String, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getKeystoreWithRequestBuilder(intermediatePath: intermediatePath, authorizableId: authorizableId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /{intermediatePath}/{authorizableId}/keystore/store.p12
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter intermediatePath: (path)  
     - parameter authorizableId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func getKeystoreWithRequestBuilder(intermediatePath: String, authorizableId: String) -> RequestBuilder<URL> {
        var path = "/{intermediatePath}/{authorizableId}/keystore/store.p12"
        let intermediatePathPreEscape = "\(intermediatePath)"
        let intermediatePathPostEscape = intermediatePathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{intermediatePath}", with: intermediatePathPostEscape, options: .literal, range: nil)
        let authorizableIdPreEscape = "\(authorizableId)"
        let authorizableIdPostEscape = authorizableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authorizableId}", with: authorizableIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter path: (path)  
     - parameter name: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNode(path: String, name: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getNodeWithRequestBuilder(path: path, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /{path}/{name}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (path)  
     - parameter name: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getNodeWithRequestBuilder(path: String, name: String) -> RequestBuilder<Void> {
        var path = "/{path}/{name}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter group: (path)  
     - parameter name: (path)  
     - parameter version: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPackage(group: String, name: String, version: String, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getPackageWithRequestBuilder(group: group, name: name, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /etc/packages/{group}/{name}-{version}.zip
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter group: (path)  
     - parameter name: (path)  
     - parameter version: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func getPackageWithRequestBuilder(group: String, name: String, version: String) -> RequestBuilder<URL> {
        var path = "/etc/packages/{group}/{name}-{version}.zip"
        let groupPreEscape = "\(group)"
        let groupPostEscape = groupPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group}", with: groupPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter group: (path)  
     - parameter name: (path)  
     - parameter version: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPackageFilter(group: String, name: String, version: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getPackageFilterWithRequestBuilder(group: group, name: name, version: version).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter group: (path)  
     - parameter name: (path)  
     - parameter version: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func getPackageFilterWithRequestBuilder(group: String, name: String, version: String) -> RequestBuilder<String> {
        var path = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json"
        let groupPreEscape = "\(group)"
        let groupPostEscape = groupPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group}", with: groupPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(version)"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter path: (query)  
     - parameter pLimit: (query)  
     - parameter _1property: (query)  
     - parameter _1propertyValue: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQuery(path: String, pLimit: Double, _1property: String, _1propertyValue: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getQueryWithRequestBuilder(path: path, pLimit: pLimit, _1property: _1property, _1propertyValue: _1propertyValue).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /bin/querybuilder.json
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (query)  
     - parameter pLimit: (query)  
     - parameter _1property: (query)  
     - parameter _1propertyValue: (query)  
     - returns: RequestBuilder<String> 
     */
    open class func getQueryWithRequestBuilder(path: String, pLimit: Double, _1property: String, _1propertyValue: String) -> RequestBuilder<String> {
        let path = "/bin/querybuilder.json"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "path": path, 
            "p.limit": pLimit, 
            "1_property": _1property, 
            "1_property.value": _1propertyValue
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTruststore(completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getTruststoreWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /etc/truststore/truststore.p12
     - BASIC:
       - type: http
       - name: aemAuth
     - returns: RequestBuilder<URL> 
     */
    open class func getTruststoreWithRequestBuilder() -> RequestBuilder<URL> {
        let path = "/etc/truststore/truststore.p12"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTruststoreInfo(completion: @escaping ((_ data: TruststoreInfo?,_ error: Error?) -> Void)) {
        getTruststoreInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /libs/granite/security/truststore.json
     - BASIC:
       - type: http
       - name: aemAuth
     - returns: RequestBuilder<TruststoreInfo> 
     */
    open class func getTruststoreInfoWithRequestBuilder() -> RequestBuilder<TruststoreInfo> {
        let path = "/libs/granite/security/truststore.json"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TruststoreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter runmode: (path)  
     - parameter name: (path)  
     - parameter jcrcontentcqdistribute: (query)  (optional)
     - parameter jcrcontentcqdistributeTypeHint: (query)  (optional)
     - parameter jcrcontentcqname: (query)  (optional)
     - parameter jcrcontentcqtemplate: (query)  (optional)
     - parameter jcrcontentenabled: (query)  (optional)
     - parameter jcrcontentjcrdescription: (query)  (optional)
     - parameter jcrcontentjcrlastModified: (query)  (optional)
     - parameter jcrcontentjcrlastModifiedBy: (query)  (optional)
     - parameter jcrcontentjcrmixinTypes: (query)  (optional)
     - parameter jcrcontentjcrtitle: (query)  (optional)
     - parameter jcrcontentlogLevel: (query)  (optional)
     - parameter jcrcontentnoStatusUpdate: (query)  (optional)
     - parameter jcrcontentnoVersioning: (query)  (optional)
     - parameter jcrcontentprotocolConnectTimeout: (query)  (optional)
     - parameter jcrcontentprotocolHTTPConnectionClosed: (query)  (optional)
     - parameter jcrcontentprotocolHTTPExpired: (query)  (optional)
     - parameter jcrcontentprotocolHTTPHeaders: (query)  (optional)
     - parameter jcrcontentprotocolHTTPHeadersTypeHint: (query)  (optional)
     - parameter jcrcontentprotocolHTTPMethod: (query)  (optional)
     - parameter jcrcontentprotocolHTTPSRelaxed: (query)  (optional)
     - parameter jcrcontentprotocolInterface: (query)  (optional)
     - parameter jcrcontentprotocolSocketTimeout: (query)  (optional)
     - parameter jcrcontentprotocolVersion: (query)  (optional)
     - parameter jcrcontentproxyNTLMDomain: (query)  (optional)
     - parameter jcrcontentproxyNTLMHost: (query)  (optional)
     - parameter jcrcontentproxyHost: (query)  (optional)
     - parameter jcrcontentproxyPassword: (query)  (optional)
     - parameter jcrcontentproxyPort: (query)  (optional)
     - parameter jcrcontentproxyUser: (query)  (optional)
     - parameter jcrcontentqueueBatchMaxSize: (query)  (optional)
     - parameter jcrcontentqueueBatchMode: (query)  (optional)
     - parameter jcrcontentqueueBatchWaitTime: (query)  (optional)
     - parameter jcrcontentretryDelay: (query)  (optional)
     - parameter jcrcontentreverseReplication: (query)  (optional)
     - parameter jcrcontentserializationType: (query)  (optional)
     - parameter jcrcontentslingresourceType: (query)  (optional)
     - parameter jcrcontentssl: (query)  (optional)
     - parameter jcrcontenttransportNTLMDomain: (query)  (optional)
     - parameter jcrcontenttransportNTLMHost: (query)  (optional)
     - parameter jcrcontenttransportPassword: (query)  (optional)
     - parameter jcrcontenttransportUri: (query)  (optional)
     - parameter jcrcontenttransportUser: (query)  (optional)
     - parameter jcrcontenttriggerDistribute: (query)  (optional)
     - parameter jcrcontenttriggerModified: (query)  (optional)
     - parameter jcrcontenttriggerOnOffTime: (query)  (optional)
     - parameter jcrcontenttriggerReceive: (query)  (optional)
     - parameter jcrcontenttriggerSpecific: (query)  (optional)
     - parameter jcrcontentuserId: (query)  (optional)
     - parameter jcrprimaryType: (query)  (optional)
     - parameter operation: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAgent(runmode: String, name: String, jcrcontentcqdistribute: Bool? = nil, jcrcontentcqdistributeTypeHint: String? = nil, jcrcontentcqname: String? = nil, jcrcontentcqtemplate: String? = nil, jcrcontentenabled: Bool? = nil, jcrcontentjcrdescription: String? = nil, jcrcontentjcrlastModified: String? = nil, jcrcontentjcrlastModifiedBy: String? = nil, jcrcontentjcrmixinTypes: String? = nil, jcrcontentjcrtitle: String? = nil, jcrcontentlogLevel: String? = nil, jcrcontentnoStatusUpdate: Bool? = nil, jcrcontentnoVersioning: Bool? = nil, jcrcontentprotocolConnectTimeout: Double? = nil, jcrcontentprotocolHTTPConnectionClosed: Bool? = nil, jcrcontentprotocolHTTPExpired: String? = nil, jcrcontentprotocolHTTPHeaders: [String]? = nil, jcrcontentprotocolHTTPHeadersTypeHint: String? = nil, jcrcontentprotocolHTTPMethod: String? = nil, jcrcontentprotocolHTTPSRelaxed: Bool? = nil, jcrcontentprotocolInterface: String? = nil, jcrcontentprotocolSocketTimeout: Double? = nil, jcrcontentprotocolVersion: String? = nil, jcrcontentproxyNTLMDomain: String? = nil, jcrcontentproxyNTLMHost: String? = nil, jcrcontentproxyHost: String? = nil, jcrcontentproxyPassword: String? = nil, jcrcontentproxyPort: Double? = nil, jcrcontentproxyUser: String? = nil, jcrcontentqueueBatchMaxSize: Double? = nil, jcrcontentqueueBatchMode: String? = nil, jcrcontentqueueBatchWaitTime: Double? = nil, jcrcontentretryDelay: String? = nil, jcrcontentreverseReplication: Bool? = nil, jcrcontentserializationType: String? = nil, jcrcontentslingresourceType: String? = nil, jcrcontentssl: String? = nil, jcrcontenttransportNTLMDomain: String? = nil, jcrcontenttransportNTLMHost: String? = nil, jcrcontenttransportPassword: String? = nil, jcrcontenttransportUri: String? = nil, jcrcontenttransportUser: String? = nil, jcrcontenttriggerDistribute: Bool? = nil, jcrcontenttriggerModified: Bool? = nil, jcrcontenttriggerOnOffTime: Bool? = nil, jcrcontenttriggerReceive: Bool? = nil, jcrcontenttriggerSpecific: Bool? = nil, jcrcontentuserId: String? = nil, jcrprimaryType: String? = nil, operation: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postAgentWithRequestBuilder(runmode: runmode, name: name, jcrcontentcqdistribute: jcrcontentcqdistribute, jcrcontentcqdistributeTypeHint: jcrcontentcqdistributeTypeHint, jcrcontentcqname: jcrcontentcqname, jcrcontentcqtemplate: jcrcontentcqtemplate, jcrcontentenabled: jcrcontentenabled, jcrcontentjcrdescription: jcrcontentjcrdescription, jcrcontentjcrlastModified: jcrcontentjcrlastModified, jcrcontentjcrlastModifiedBy: jcrcontentjcrlastModifiedBy, jcrcontentjcrmixinTypes: jcrcontentjcrmixinTypes, jcrcontentjcrtitle: jcrcontentjcrtitle, jcrcontentlogLevel: jcrcontentlogLevel, jcrcontentnoStatusUpdate: jcrcontentnoStatusUpdate, jcrcontentnoVersioning: jcrcontentnoVersioning, jcrcontentprotocolConnectTimeout: jcrcontentprotocolConnectTimeout, jcrcontentprotocolHTTPConnectionClosed: jcrcontentprotocolHTTPConnectionClosed, jcrcontentprotocolHTTPExpired: jcrcontentprotocolHTTPExpired, jcrcontentprotocolHTTPHeaders: jcrcontentprotocolHTTPHeaders, jcrcontentprotocolHTTPHeadersTypeHint: jcrcontentprotocolHTTPHeadersTypeHint, jcrcontentprotocolHTTPMethod: jcrcontentprotocolHTTPMethod, jcrcontentprotocolHTTPSRelaxed: jcrcontentprotocolHTTPSRelaxed, jcrcontentprotocolInterface: jcrcontentprotocolInterface, jcrcontentprotocolSocketTimeout: jcrcontentprotocolSocketTimeout, jcrcontentprotocolVersion: jcrcontentprotocolVersion, jcrcontentproxyNTLMDomain: jcrcontentproxyNTLMDomain, jcrcontentproxyNTLMHost: jcrcontentproxyNTLMHost, jcrcontentproxyHost: jcrcontentproxyHost, jcrcontentproxyPassword: jcrcontentproxyPassword, jcrcontentproxyPort: jcrcontentproxyPort, jcrcontentproxyUser: jcrcontentproxyUser, jcrcontentqueueBatchMaxSize: jcrcontentqueueBatchMaxSize, jcrcontentqueueBatchMode: jcrcontentqueueBatchMode, jcrcontentqueueBatchWaitTime: jcrcontentqueueBatchWaitTime, jcrcontentretryDelay: jcrcontentretryDelay, jcrcontentreverseReplication: jcrcontentreverseReplication, jcrcontentserializationType: jcrcontentserializationType, jcrcontentslingresourceType: jcrcontentslingresourceType, jcrcontentssl: jcrcontentssl, jcrcontenttransportNTLMDomain: jcrcontenttransportNTLMDomain, jcrcontenttransportNTLMHost: jcrcontenttransportNTLMHost, jcrcontenttransportPassword: jcrcontenttransportPassword, jcrcontenttransportUri: jcrcontenttransportUri, jcrcontenttransportUser: jcrcontenttransportUser, jcrcontenttriggerDistribute: jcrcontenttriggerDistribute, jcrcontenttriggerModified: jcrcontenttriggerModified, jcrcontenttriggerOnOffTime: jcrcontenttriggerOnOffTime, jcrcontenttriggerReceive: jcrcontenttriggerReceive, jcrcontenttriggerSpecific: jcrcontenttriggerSpecific, jcrcontentuserId: jcrcontentuserId, jcrprimaryType: jcrprimaryType, operation: operation).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /etc/replication/agents.{runmode}/{name}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter runmode: (path)  
     - parameter name: (path)  
     - parameter jcrcontentcqdistribute: (query)  (optional)
     - parameter jcrcontentcqdistributeTypeHint: (query)  (optional)
     - parameter jcrcontentcqname: (query)  (optional)
     - parameter jcrcontentcqtemplate: (query)  (optional)
     - parameter jcrcontentenabled: (query)  (optional)
     - parameter jcrcontentjcrdescription: (query)  (optional)
     - parameter jcrcontentjcrlastModified: (query)  (optional)
     - parameter jcrcontentjcrlastModifiedBy: (query)  (optional)
     - parameter jcrcontentjcrmixinTypes: (query)  (optional)
     - parameter jcrcontentjcrtitle: (query)  (optional)
     - parameter jcrcontentlogLevel: (query)  (optional)
     - parameter jcrcontentnoStatusUpdate: (query)  (optional)
     - parameter jcrcontentnoVersioning: (query)  (optional)
     - parameter jcrcontentprotocolConnectTimeout: (query)  (optional)
     - parameter jcrcontentprotocolHTTPConnectionClosed: (query)  (optional)
     - parameter jcrcontentprotocolHTTPExpired: (query)  (optional)
     - parameter jcrcontentprotocolHTTPHeaders: (query)  (optional)
     - parameter jcrcontentprotocolHTTPHeadersTypeHint: (query)  (optional)
     - parameter jcrcontentprotocolHTTPMethod: (query)  (optional)
     - parameter jcrcontentprotocolHTTPSRelaxed: (query)  (optional)
     - parameter jcrcontentprotocolInterface: (query)  (optional)
     - parameter jcrcontentprotocolSocketTimeout: (query)  (optional)
     - parameter jcrcontentprotocolVersion: (query)  (optional)
     - parameter jcrcontentproxyNTLMDomain: (query)  (optional)
     - parameter jcrcontentproxyNTLMHost: (query)  (optional)
     - parameter jcrcontentproxyHost: (query)  (optional)
     - parameter jcrcontentproxyPassword: (query)  (optional)
     - parameter jcrcontentproxyPort: (query)  (optional)
     - parameter jcrcontentproxyUser: (query)  (optional)
     - parameter jcrcontentqueueBatchMaxSize: (query)  (optional)
     - parameter jcrcontentqueueBatchMode: (query)  (optional)
     - parameter jcrcontentqueueBatchWaitTime: (query)  (optional)
     - parameter jcrcontentretryDelay: (query)  (optional)
     - parameter jcrcontentreverseReplication: (query)  (optional)
     - parameter jcrcontentserializationType: (query)  (optional)
     - parameter jcrcontentslingresourceType: (query)  (optional)
     - parameter jcrcontentssl: (query)  (optional)
     - parameter jcrcontenttransportNTLMDomain: (query)  (optional)
     - parameter jcrcontenttransportNTLMHost: (query)  (optional)
     - parameter jcrcontenttransportPassword: (query)  (optional)
     - parameter jcrcontenttransportUri: (query)  (optional)
     - parameter jcrcontenttransportUser: (query)  (optional)
     - parameter jcrcontenttriggerDistribute: (query)  (optional)
     - parameter jcrcontenttriggerModified: (query)  (optional)
     - parameter jcrcontenttriggerOnOffTime: (query)  (optional)
     - parameter jcrcontenttriggerReceive: (query)  (optional)
     - parameter jcrcontenttriggerSpecific: (query)  (optional)
     - parameter jcrcontentuserId: (query)  (optional)
     - parameter jcrprimaryType: (query)  (optional)
     - parameter operation: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postAgentWithRequestBuilder(runmode: String, name: String, jcrcontentcqdistribute: Bool? = nil, jcrcontentcqdistributeTypeHint: String? = nil, jcrcontentcqname: String? = nil, jcrcontentcqtemplate: String? = nil, jcrcontentenabled: Bool? = nil, jcrcontentjcrdescription: String? = nil, jcrcontentjcrlastModified: String? = nil, jcrcontentjcrlastModifiedBy: String? = nil, jcrcontentjcrmixinTypes: String? = nil, jcrcontentjcrtitle: String? = nil, jcrcontentlogLevel: String? = nil, jcrcontentnoStatusUpdate: Bool? = nil, jcrcontentnoVersioning: Bool? = nil, jcrcontentprotocolConnectTimeout: Double? = nil, jcrcontentprotocolHTTPConnectionClosed: Bool? = nil, jcrcontentprotocolHTTPExpired: String? = nil, jcrcontentprotocolHTTPHeaders: [String]? = nil, jcrcontentprotocolHTTPHeadersTypeHint: String? = nil, jcrcontentprotocolHTTPMethod: String? = nil, jcrcontentprotocolHTTPSRelaxed: Bool? = nil, jcrcontentprotocolInterface: String? = nil, jcrcontentprotocolSocketTimeout: Double? = nil, jcrcontentprotocolVersion: String? = nil, jcrcontentproxyNTLMDomain: String? = nil, jcrcontentproxyNTLMHost: String? = nil, jcrcontentproxyHost: String? = nil, jcrcontentproxyPassword: String? = nil, jcrcontentproxyPort: Double? = nil, jcrcontentproxyUser: String? = nil, jcrcontentqueueBatchMaxSize: Double? = nil, jcrcontentqueueBatchMode: String? = nil, jcrcontentqueueBatchWaitTime: Double? = nil, jcrcontentretryDelay: String? = nil, jcrcontentreverseReplication: Bool? = nil, jcrcontentserializationType: String? = nil, jcrcontentslingresourceType: String? = nil, jcrcontentssl: String? = nil, jcrcontenttransportNTLMDomain: String? = nil, jcrcontenttransportNTLMHost: String? = nil, jcrcontenttransportPassword: String? = nil, jcrcontenttransportUri: String? = nil, jcrcontenttransportUser: String? = nil, jcrcontenttriggerDistribute: Bool? = nil, jcrcontenttriggerModified: Bool? = nil, jcrcontenttriggerOnOffTime: Bool? = nil, jcrcontenttriggerReceive: Bool? = nil, jcrcontenttriggerSpecific: Bool? = nil, jcrcontentuserId: String? = nil, jcrprimaryType: String? = nil, operation: String? = nil) -> RequestBuilder<Void> {
        var path = "/etc/replication/agents.{runmode}/{name}"
        let runmodePreEscape = "\(runmode)"
        let runmodePostEscape = runmodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runmode}", with: runmodePostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "jcr:content/cq:distribute": jcrcontentcqdistribute, 
            "jcr:content/cq:distribute@TypeHint": jcrcontentcqdistributeTypeHint, 
            "jcr:content/cq:name": jcrcontentcqname, 
            "jcr:content/cq:template": jcrcontentcqtemplate, 
            "jcr:content/enabled": jcrcontentenabled, 
            "jcr:content/jcr:description": jcrcontentjcrdescription, 
            "jcr:content/jcr:lastModified": jcrcontentjcrlastModified, 
            "jcr:content/jcr:lastModifiedBy": jcrcontentjcrlastModifiedBy, 
            "jcr:content/jcr:mixinTypes": jcrcontentjcrmixinTypes, 
            "jcr:content/jcr:title": jcrcontentjcrtitle, 
            "jcr:content/logLevel": jcrcontentlogLevel, 
            "jcr:content/noStatusUpdate": jcrcontentnoStatusUpdate, 
            "jcr:content/noVersioning": jcrcontentnoVersioning, 
            "jcr:content/protocolConnectTimeout": jcrcontentprotocolConnectTimeout, 
            "jcr:content/protocolHTTPConnectionClosed": jcrcontentprotocolHTTPConnectionClosed, 
            "jcr:content/protocolHTTPExpired": jcrcontentprotocolHTTPExpired, 
            "jcr:content/protocolHTTPHeaders": jcrcontentprotocolHTTPHeaders, 
            "jcr:content/protocolHTTPHeaders@TypeHint": jcrcontentprotocolHTTPHeadersTypeHint, 
            "jcr:content/protocolHTTPMethod": jcrcontentprotocolHTTPMethod, 
            "jcr:content/protocolHTTPSRelaxed": jcrcontentprotocolHTTPSRelaxed, 
            "jcr:content/protocolInterface": jcrcontentprotocolInterface, 
            "jcr:content/protocolSocketTimeout": jcrcontentprotocolSocketTimeout, 
            "jcr:content/protocolVersion": jcrcontentprotocolVersion, 
            "jcr:content/proxyNTLMDomain": jcrcontentproxyNTLMDomain, 
            "jcr:content/proxyNTLMHost": jcrcontentproxyNTLMHost, 
            "jcr:content/proxyHost": jcrcontentproxyHost, 
            "jcr:content/proxyPassword": jcrcontentproxyPassword, 
            "jcr:content/proxyPort": jcrcontentproxyPort, 
            "jcr:content/proxyUser": jcrcontentproxyUser, 
            "jcr:content/queueBatchMaxSize": jcrcontentqueueBatchMaxSize, 
            "jcr:content/queueBatchMode": jcrcontentqueueBatchMode, 
            "jcr:content/queueBatchWaitTime": jcrcontentqueueBatchWaitTime, 
            "jcr:content/retryDelay": jcrcontentretryDelay, 
            "jcr:content/reverseReplication": jcrcontentreverseReplication, 
            "jcr:content/serializationType": jcrcontentserializationType, 
            "jcr:content/sling:resourceType": jcrcontentslingresourceType, 
            "jcr:content/ssl": jcrcontentssl, 
            "jcr:content/transportNTLMDomain": jcrcontenttransportNTLMDomain, 
            "jcr:content/transportNTLMHost": jcrcontenttransportNTLMHost, 
            "jcr:content/transportPassword": jcrcontenttransportPassword, 
            "jcr:content/transportUri": jcrcontenttransportUri, 
            "jcr:content/transportUser": jcrcontenttransportUser, 
            "jcr:content/triggerDistribute": jcrcontenttriggerDistribute, 
            "jcr:content/triggerModified": jcrcontenttriggerModified, 
            "jcr:content/triggerOnOffTime": jcrcontenttriggerOnOffTime, 
            "jcr:content/triggerReceive": jcrcontenttriggerReceive, 
            "jcr:content/triggerSpecific": jcrcontenttriggerSpecific, 
            "jcr:content/userId": jcrcontentuserId, 
            "jcr:primaryType": jcrprimaryType, 
            ":operation": operation
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter intermediatePath: (path)  
     - parameter authorizableId: (path)  
     - parameter operation: (query)  (optional)
     - parameter currentPassword: (query)  (optional)
     - parameter newPassword: (query)  (optional)
     - parameter rePassword: (query)  (optional)
     - parameter keyPassword: (query)  (optional)
     - parameter keyStorePass: (query)  (optional)
     - parameter alias: (query)  (optional)
     - parameter newAlias: (query)  (optional)
     - parameter removeAlias: (query)  (optional)
     - parameter certChain: (form)  (optional)
     - parameter pk: (form)  (optional)
     - parameter keyStore: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizableKeystore(intermediatePath: String, authorizableId: String, operation: String? = nil, currentPassword: String? = nil, newPassword: String? = nil, rePassword: String? = nil, keyPassword: String? = nil, keyStorePass: String? = nil, alias: String? = nil, newAlias: String? = nil, removeAlias: String? = nil, certChain: URL? = nil, pk: URL? = nil, keyStore: URL? = nil, completion: @escaping ((_ data: KeystoreInfo?,_ error: Error?) -> Void)) {
        postAuthorizableKeystoreWithRequestBuilder(intermediatePath: intermediatePath, authorizableId: authorizableId, operation: operation, currentPassword: currentPassword, newPassword: newPassword, rePassword: rePassword, keyPassword: keyPassword, keyStorePass: keyStorePass, alias: alias, newAlias: newAlias, removeAlias: removeAlias, certChain: certChain, pk: pk, keyStore: keyStore).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /{intermediatePath}/{authorizableId}.ks.html
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter intermediatePath: (path)  
     - parameter authorizableId: (path)  
     - parameter operation: (query)  (optional)
     - parameter currentPassword: (query)  (optional)
     - parameter newPassword: (query)  (optional)
     - parameter rePassword: (query)  (optional)
     - parameter keyPassword: (query)  (optional)
     - parameter keyStorePass: (query)  (optional)
     - parameter alias: (query)  (optional)
     - parameter newAlias: (query)  (optional)
     - parameter removeAlias: (query)  (optional)
     - parameter certChain: (form)  (optional)
     - parameter pk: (form)  (optional)
     - parameter keyStore: (form)  (optional)
     - returns: RequestBuilder<KeystoreInfo> 
     */
    open class func postAuthorizableKeystoreWithRequestBuilder(intermediatePath: String, authorizableId: String, operation: String? = nil, currentPassword: String? = nil, newPassword: String? = nil, rePassword: String? = nil, keyPassword: String? = nil, keyStorePass: String? = nil, alias: String? = nil, newAlias: String? = nil, removeAlias: String? = nil, certChain: URL? = nil, pk: URL? = nil, keyStore: URL? = nil) -> RequestBuilder<KeystoreInfo> {
        var path = "/{intermediatePath}/{authorizableId}.ks.html"
        let intermediatePathPreEscape = "\(intermediatePath)"
        let intermediatePathPostEscape = intermediatePathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{intermediatePath}", with: intermediatePathPostEscape, options: .literal, range: nil)
        let authorizableIdPreEscape = "\(authorizableId)"
        let authorizableIdPostEscape = authorizableIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authorizableId}", with: authorizableIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "cert-chain": certChain,
            "pk": pk,
            "keyStore": keyStore
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            ":operation": operation, 
            "currentPassword": currentPassword, 
            "newPassword": newPassword, 
            "rePassword": rePassword, 
            "keyPassword": keyPassword, 
            "keyStorePass": keyStorePass, 
            "alias": alias, 
            "newAlias": newAlias, 
            "removeAlias": removeAlias
        ])

        let requestBuilder: RequestBuilder<KeystoreInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter authorizableId: (query)  
     - parameter intermediatePath: (query)  
     - parameter createUser: (query)  (optional)
     - parameter createGroup: (query)  (optional)
     - parameter reppassword: (query)  (optional)
     - parameter profilegivenName: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizables(authorizableId: String, intermediatePath: String, createUser: String? = nil, createGroup: String? = nil, reppassword: String? = nil, profilegivenName: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        postAuthorizablesWithRequestBuilder(authorizableId: authorizableId, intermediatePath: intermediatePath, createUser: createUser, createGroup: createGroup, reppassword: reppassword, profilegivenName: profilegivenName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /libs/granite/security/post/authorizables
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter authorizableId: (query)  
     - parameter intermediatePath: (query)  
     - parameter createUser: (query)  (optional)
     - parameter createGroup: (query)  (optional)
     - parameter reppassword: (query)  (optional)
     - parameter profilegivenName: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func postAuthorizablesWithRequestBuilder(authorizableId: String, intermediatePath: String, createUser: String? = nil, createGroup: String? = nil, reppassword: String? = nil, profilegivenName: String? = nil) -> RequestBuilder<String> {
        let path = "/libs/granite/security/post/authorizables"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "authorizableId": authorizableId, 
            "intermediatePath": intermediatePath, 
            "createUser": createUser, 
            "createGroup": createGroup, 
            "rep:password": reppassword, 
            "profile/givenName": profilegivenName
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter keyStorePassword: (query)  (optional)
     - parameter keyStorePasswordTypeHint: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter serviceRankingTypeHint: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter idpHttpRedirectTypeHint: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter createUserTypeHint: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter defaultRedirectUrlTypeHint: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter userIDAttributeTypeHint: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter defaultGroupsTypeHint: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpCertAliasTypeHint: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter addGroupMembershipsTypeHint: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter pathTypeHint: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter synchronizeAttributesTypeHint: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter clockToleranceTypeHint: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter groupMembershipAttributeTypeHint: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpUrlTypeHint: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter logoutUrlTypeHint: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter serviceProviderEntityIdTypeHint: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter assertionConsumerServiceURLTypeHint: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter handleLogoutTypeHint: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter spPrivateKeyAliasTypeHint: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter useEncryptionTypeHint: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter nameIdFormatTypeHint: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter digestMethodTypeHint: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter signatureMethodTypeHint: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter userIntermediatePathTypeHint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConfigAdobeGraniteSamlAuthenticationHandler(keyStorePassword: String? = nil, keyStorePasswordTypeHint: String? = nil, serviceRanking: Int? = nil, serviceRankingTypeHint: String? = nil, idpHttpRedirect: Bool? = nil, idpHttpRedirectTypeHint: String? = nil, createUser: Bool? = nil, createUserTypeHint: String? = nil, defaultRedirectUrl: String? = nil, defaultRedirectUrlTypeHint: String? = nil, userIDAttribute: String? = nil, userIDAttributeTypeHint: String? = nil, defaultGroups: [String]? = nil, defaultGroupsTypeHint: String? = nil, idpCertAlias: String? = nil, idpCertAliasTypeHint: String? = nil, addGroupMemberships: Bool? = nil, addGroupMembershipsTypeHint: String? = nil, path: [String]? = nil, pathTypeHint: String? = nil, synchronizeAttributes: [String]? = nil, synchronizeAttributesTypeHint: String? = nil, clockTolerance: Int? = nil, clockToleranceTypeHint: String? = nil, groupMembershipAttribute: String? = nil, groupMembershipAttributeTypeHint: String? = nil, idpUrl: String? = nil, idpUrlTypeHint: String? = nil, logoutUrl: String? = nil, logoutUrlTypeHint: String? = nil, serviceProviderEntityId: String? = nil, serviceProviderEntityIdTypeHint: String? = nil, assertionConsumerServiceURL: String? = nil, assertionConsumerServiceURLTypeHint: String? = nil, handleLogout: Bool? = nil, handleLogoutTypeHint: String? = nil, spPrivateKeyAlias: String? = nil, spPrivateKeyAliasTypeHint: String? = nil, useEncryption: Bool? = nil, useEncryptionTypeHint: String? = nil, nameIdFormat: String? = nil, nameIdFormatTypeHint: String? = nil, digestMethod: String? = nil, digestMethodTypeHint: String? = nil, signatureMethod: String? = nil, signatureMethodTypeHint: String? = nil, userIntermediatePath: String? = nil, userIntermediatePathTypeHint: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postConfigAdobeGraniteSamlAuthenticationHandlerWithRequestBuilder(keyStorePassword: keyStorePassword, keyStorePasswordTypeHint: keyStorePasswordTypeHint, serviceRanking: serviceRanking, serviceRankingTypeHint: serviceRankingTypeHint, idpHttpRedirect: idpHttpRedirect, idpHttpRedirectTypeHint: idpHttpRedirectTypeHint, createUser: createUser, createUserTypeHint: createUserTypeHint, defaultRedirectUrl: defaultRedirectUrl, defaultRedirectUrlTypeHint: defaultRedirectUrlTypeHint, userIDAttribute: userIDAttribute, userIDAttributeTypeHint: userIDAttributeTypeHint, defaultGroups: defaultGroups, defaultGroupsTypeHint: defaultGroupsTypeHint, idpCertAlias: idpCertAlias, idpCertAliasTypeHint: idpCertAliasTypeHint, addGroupMemberships: addGroupMemberships, addGroupMembershipsTypeHint: addGroupMembershipsTypeHint, path: path, pathTypeHint: pathTypeHint, synchronizeAttributes: synchronizeAttributes, synchronizeAttributesTypeHint: synchronizeAttributesTypeHint, clockTolerance: clockTolerance, clockToleranceTypeHint: clockToleranceTypeHint, groupMembershipAttribute: groupMembershipAttribute, groupMembershipAttributeTypeHint: groupMembershipAttributeTypeHint, idpUrl: idpUrl, idpUrlTypeHint: idpUrlTypeHint, logoutUrl: logoutUrl, logoutUrlTypeHint: logoutUrlTypeHint, serviceProviderEntityId: serviceProviderEntityId, serviceProviderEntityIdTypeHint: serviceProviderEntityIdTypeHint, assertionConsumerServiceURL: assertionConsumerServiceURL, assertionConsumerServiceURLTypeHint: assertionConsumerServiceURLTypeHint, handleLogout: handleLogout, handleLogoutTypeHint: handleLogoutTypeHint, spPrivateKeyAlias: spPrivateKeyAlias, spPrivateKeyAliasTypeHint: spPrivateKeyAliasTypeHint, useEncryption: useEncryption, useEncryptionTypeHint: useEncryptionTypeHint, nameIdFormat: nameIdFormat, nameIdFormatTypeHint: nameIdFormatTypeHint, digestMethod: digestMethod, digestMethodTypeHint: digestMethodTypeHint, signatureMethod: signatureMethod, signatureMethodTypeHint: signatureMethodTypeHint, userIntermediatePath: userIntermediatePath, userIntermediatePathTypeHint: userIntermediatePathTypeHint).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter keyStorePassword: (query)  (optional)
     - parameter keyStorePasswordTypeHint: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter serviceRankingTypeHint: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter idpHttpRedirectTypeHint: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter createUserTypeHint: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter defaultRedirectUrlTypeHint: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter userIDAttributeTypeHint: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter defaultGroupsTypeHint: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpCertAliasTypeHint: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter addGroupMembershipsTypeHint: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter pathTypeHint: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter synchronizeAttributesTypeHint: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter clockToleranceTypeHint: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter groupMembershipAttributeTypeHint: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpUrlTypeHint: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter logoutUrlTypeHint: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter serviceProviderEntityIdTypeHint: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter assertionConsumerServiceURLTypeHint: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter handleLogoutTypeHint: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter spPrivateKeyAliasTypeHint: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter useEncryptionTypeHint: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter nameIdFormatTypeHint: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter digestMethodTypeHint: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter signatureMethodTypeHint: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter userIntermediatePathTypeHint: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postConfigAdobeGraniteSamlAuthenticationHandlerWithRequestBuilder(keyStorePassword: String? = nil, keyStorePasswordTypeHint: String? = nil, serviceRanking: Int? = nil, serviceRankingTypeHint: String? = nil, idpHttpRedirect: Bool? = nil, idpHttpRedirectTypeHint: String? = nil, createUser: Bool? = nil, createUserTypeHint: String? = nil, defaultRedirectUrl: String? = nil, defaultRedirectUrlTypeHint: String? = nil, userIDAttribute: String? = nil, userIDAttributeTypeHint: String? = nil, defaultGroups: [String]? = nil, defaultGroupsTypeHint: String? = nil, idpCertAlias: String? = nil, idpCertAliasTypeHint: String? = nil, addGroupMemberships: Bool? = nil, addGroupMembershipsTypeHint: String? = nil, path: [String]? = nil, pathTypeHint: String? = nil, synchronizeAttributes: [String]? = nil, synchronizeAttributesTypeHint: String? = nil, clockTolerance: Int? = nil, clockToleranceTypeHint: String? = nil, groupMembershipAttribute: String? = nil, groupMembershipAttributeTypeHint: String? = nil, idpUrl: String? = nil, idpUrlTypeHint: String? = nil, logoutUrl: String? = nil, logoutUrlTypeHint: String? = nil, serviceProviderEntityId: String? = nil, serviceProviderEntityIdTypeHint: String? = nil, assertionConsumerServiceURL: String? = nil, assertionConsumerServiceURLTypeHint: String? = nil, handleLogout: Bool? = nil, handleLogoutTypeHint: String? = nil, spPrivateKeyAlias: String? = nil, spPrivateKeyAliasTypeHint: String? = nil, useEncryption: Bool? = nil, useEncryptionTypeHint: String? = nil, nameIdFormat: String? = nil, nameIdFormatTypeHint: String? = nil, digestMethod: String? = nil, digestMethodTypeHint: String? = nil, signatureMethod: String? = nil, signatureMethodTypeHint: String? = nil, userIntermediatePath: String? = nil, userIntermediatePathTypeHint: String? = nil) -> RequestBuilder<Void> {
        let path = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "keyStorePassword": keyStorePassword, 
            "keyStorePassword@TypeHint": keyStorePasswordTypeHint, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "service.ranking@TypeHint": serviceRankingTypeHint, 
            "idpHttpRedirect": idpHttpRedirect, 
            "idpHttpRedirect@TypeHint": idpHttpRedirectTypeHint, 
            "createUser": createUser, 
            "createUser@TypeHint": createUserTypeHint, 
            "defaultRedirectUrl": defaultRedirectUrl, 
            "defaultRedirectUrl@TypeHint": defaultRedirectUrlTypeHint, 
            "userIDAttribute": userIDAttribute, 
            "userIDAttribute@TypeHint": userIDAttributeTypeHint, 
            "defaultGroups": defaultGroups, 
            "defaultGroups@TypeHint": defaultGroupsTypeHint, 
            "idpCertAlias": idpCertAlias, 
            "idpCertAlias@TypeHint": idpCertAliasTypeHint, 
            "addGroupMemberships": addGroupMemberships, 
            "addGroupMemberships@TypeHint": addGroupMembershipsTypeHint, 
            "path": path, 
            "path@TypeHint": pathTypeHint, 
            "synchronizeAttributes": synchronizeAttributes, 
            "synchronizeAttributes@TypeHint": synchronizeAttributesTypeHint, 
            "clockTolerance": clockTolerance?.encodeToJSON(), 
            "clockTolerance@TypeHint": clockToleranceTypeHint, 
            "groupMembershipAttribute": groupMembershipAttribute, 
            "groupMembershipAttribute@TypeHint": groupMembershipAttributeTypeHint, 
            "idpUrl": idpUrl, 
            "idpUrl@TypeHint": idpUrlTypeHint, 
            "logoutUrl": logoutUrl, 
            "logoutUrl@TypeHint": logoutUrlTypeHint, 
            "serviceProviderEntityId": serviceProviderEntityId, 
            "serviceProviderEntityId@TypeHint": serviceProviderEntityIdTypeHint, 
            "assertionConsumerServiceURL": assertionConsumerServiceURL, 
            "assertionConsumerServiceURL@TypeHint": assertionConsumerServiceURLTypeHint, 
            "handleLogout": handleLogout, 
            "handleLogout@TypeHint": handleLogoutTypeHint, 
            "spPrivateKeyAlias": spPrivateKeyAlias, 
            "spPrivateKeyAlias@TypeHint": spPrivateKeyAliasTypeHint, 
            "useEncryption": useEncryption, 
            "useEncryption@TypeHint": useEncryptionTypeHint, 
            "nameIdFormat": nameIdFormat, 
            "nameIdFormat@TypeHint": nameIdFormatTypeHint, 
            "digestMethod": digestMethod, 
            "digestMethod@TypeHint": digestMethodTypeHint, 
            "signatureMethod": signatureMethod, 
            "signatureMethod@TypeHint": signatureMethodTypeHint, 
            "userIntermediatePath": userIntermediatePath, 
            "userIntermediatePath@TypeHint": userIntermediatePathTypeHint
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter orgApacheFelixHttpsNio: (query)  (optional)
     - parameter orgApacheFelixHttpsNioTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystore: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePasswordTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKey: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPasswordTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststore: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststoreTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePasswordTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificate: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificateTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsEnable: (query)  (optional)
     - parameter orgApacheFelixHttpsEnableTypeHint: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecure: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecureTypeHint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConfigApacheFelixJettyBasedHttpService(orgApacheFelixHttpsNio: Bool? = nil, orgApacheFelixHttpsNioTypeHint: String? = nil, orgApacheFelixHttpsKeystore: String? = nil, orgApacheFelixHttpsKeystoreTypeHint: String? = nil, orgApacheFelixHttpsKeystorePassword: String? = nil, orgApacheFelixHttpsKeystorePasswordTypeHint: String? = nil, orgApacheFelixHttpsKeystoreKey: String? = nil, orgApacheFelixHttpsKeystoreKeyTypeHint: String? = nil, orgApacheFelixHttpsKeystoreKeyPassword: String? = nil, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint: String? = nil, orgApacheFelixHttpsTruststore: String? = nil, orgApacheFelixHttpsTruststoreTypeHint: String? = nil, orgApacheFelixHttpsTruststorePassword: String? = nil, orgApacheFelixHttpsTruststorePasswordTypeHint: String? = nil, orgApacheFelixHttpsClientcertificate: String? = nil, orgApacheFelixHttpsClientcertificateTypeHint: String? = nil, orgApacheFelixHttpsEnable: Bool? = nil, orgApacheFelixHttpsEnableTypeHint: String? = nil, orgOsgiServiceHttpPortSecure: String? = nil, orgOsgiServiceHttpPortSecureTypeHint: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postConfigApacheFelixJettyBasedHttpServiceWithRequestBuilder(orgApacheFelixHttpsNio: orgApacheFelixHttpsNio, orgApacheFelixHttpsNioTypeHint: orgApacheFelixHttpsNioTypeHint, orgApacheFelixHttpsKeystore: orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreTypeHint: orgApacheFelixHttpsKeystoreTypeHint, orgApacheFelixHttpsKeystorePassword: orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordTypeHint: orgApacheFelixHttpsKeystorePasswordTypeHint, orgApacheFelixHttpsKeystoreKey: orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyTypeHint: orgApacheFelixHttpsKeystoreKeyTypeHint, orgApacheFelixHttpsKeystoreKeyPassword: orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint: orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, orgApacheFelixHttpsTruststore: orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreTypeHint: orgApacheFelixHttpsTruststoreTypeHint, orgApacheFelixHttpsTruststorePassword: orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordTypeHint: orgApacheFelixHttpsTruststorePasswordTypeHint, orgApacheFelixHttpsClientcertificate: orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateTypeHint: orgApacheFelixHttpsClientcertificateTypeHint, orgApacheFelixHttpsEnable: orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableTypeHint: orgApacheFelixHttpsEnableTypeHint, orgOsgiServiceHttpPortSecure: orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureTypeHint: orgOsgiServiceHttpPortSecureTypeHint).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /apps/system/config/org.apache.felix.http
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter orgApacheFelixHttpsNio: (query)  (optional)
     - parameter orgApacheFelixHttpsNioTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystore: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystorePasswordTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKey: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPassword: (query)  (optional)
     - parameter orgApacheFelixHttpsKeystoreKeyPasswordTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststore: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststoreTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePassword: (query)  (optional)
     - parameter orgApacheFelixHttpsTruststorePasswordTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificate: (query)  (optional)
     - parameter orgApacheFelixHttpsClientcertificateTypeHint: (query)  (optional)
     - parameter orgApacheFelixHttpsEnable: (query)  (optional)
     - parameter orgApacheFelixHttpsEnableTypeHint: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecure: (query)  (optional)
     - parameter orgOsgiServiceHttpPortSecureTypeHint: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postConfigApacheFelixJettyBasedHttpServiceWithRequestBuilder(orgApacheFelixHttpsNio: Bool? = nil, orgApacheFelixHttpsNioTypeHint: String? = nil, orgApacheFelixHttpsKeystore: String? = nil, orgApacheFelixHttpsKeystoreTypeHint: String? = nil, orgApacheFelixHttpsKeystorePassword: String? = nil, orgApacheFelixHttpsKeystorePasswordTypeHint: String? = nil, orgApacheFelixHttpsKeystoreKey: String? = nil, orgApacheFelixHttpsKeystoreKeyTypeHint: String? = nil, orgApacheFelixHttpsKeystoreKeyPassword: String? = nil, orgApacheFelixHttpsKeystoreKeyPasswordTypeHint: String? = nil, orgApacheFelixHttpsTruststore: String? = nil, orgApacheFelixHttpsTruststoreTypeHint: String? = nil, orgApacheFelixHttpsTruststorePassword: String? = nil, orgApacheFelixHttpsTruststorePasswordTypeHint: String? = nil, orgApacheFelixHttpsClientcertificate: String? = nil, orgApacheFelixHttpsClientcertificateTypeHint: String? = nil, orgApacheFelixHttpsEnable: Bool? = nil, orgApacheFelixHttpsEnableTypeHint: String? = nil, orgOsgiServiceHttpPortSecure: String? = nil, orgOsgiServiceHttpPortSecureTypeHint: String? = nil) -> RequestBuilder<Void> {
        let path = "/apps/system/config/org.apache.felix.http"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "org.apache.felix.https.nio": orgApacheFelixHttpsNio, 
            "org.apache.felix.https.nio@TypeHint": orgApacheFelixHttpsNioTypeHint, 
            "org.apache.felix.https.keystore": orgApacheFelixHttpsKeystore, 
            "org.apache.felix.https.keystore@TypeHint": orgApacheFelixHttpsKeystoreTypeHint, 
            "org.apache.felix.https.keystore.password": orgApacheFelixHttpsKeystorePassword, 
            "org.apache.felix.https.keystore.password@TypeHint": orgApacheFelixHttpsKeystorePasswordTypeHint, 
            "org.apache.felix.https.keystore.key": orgApacheFelixHttpsKeystoreKey, 
            "org.apache.felix.https.keystore.key@TypeHint": orgApacheFelixHttpsKeystoreKeyTypeHint, 
            "org.apache.felix.https.keystore.key.password": orgApacheFelixHttpsKeystoreKeyPassword, 
            "org.apache.felix.https.keystore.key.password@TypeHint": orgApacheFelixHttpsKeystoreKeyPasswordTypeHint, 
            "org.apache.felix.https.truststore": orgApacheFelixHttpsTruststore, 
            "org.apache.felix.https.truststore@TypeHint": orgApacheFelixHttpsTruststoreTypeHint, 
            "org.apache.felix.https.truststore.password": orgApacheFelixHttpsTruststorePassword, 
            "org.apache.felix.https.truststore.password@TypeHint": orgApacheFelixHttpsTruststorePasswordTypeHint, 
            "org.apache.felix.https.clientcertificate": orgApacheFelixHttpsClientcertificate, 
            "org.apache.felix.https.clientcertificate@TypeHint": orgApacheFelixHttpsClientcertificateTypeHint, 
            "org.apache.felix.https.enable": orgApacheFelixHttpsEnable, 
            "org.apache.felix.https.enable@TypeHint": orgApacheFelixHttpsEnableTypeHint, 
            "org.osgi.service.http.port.secure": orgOsgiServiceHttpPortSecure, 
            "org.osgi.service.http.port.secure@TypeHint": orgOsgiServiceHttpPortSecureTypeHint
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter proxyHost: (query)  (optional)
     - parameter proxyHostTypeHint: (query)  (optional)
     - parameter proxyPort: (query)  (optional)
     - parameter proxyPortTypeHint: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - parameter proxyExceptionsTypeHint: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyEnabledTypeHint: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyUserTypeHint: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyPasswordTypeHint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConfigApacheHttpComponentsProxyConfiguration(proxyHost: String? = nil, proxyHostTypeHint: String? = nil, proxyPort: Int? = nil, proxyPortTypeHint: String? = nil, proxyExceptions: [String]? = nil, proxyExceptionsTypeHint: String? = nil, proxyEnabled: Bool? = nil, proxyEnabledTypeHint: String? = nil, proxyUser: String? = nil, proxyUserTypeHint: String? = nil, proxyPassword: String? = nil, proxyPasswordTypeHint: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postConfigApacheHttpComponentsProxyConfigurationWithRequestBuilder(proxyHost: proxyHost, proxyHostTypeHint: proxyHostTypeHint, proxyPort: proxyPort, proxyPortTypeHint: proxyPortTypeHint, proxyExceptions: proxyExceptions, proxyExceptionsTypeHint: proxyExceptionsTypeHint, proxyEnabled: proxyEnabled, proxyEnabledTypeHint: proxyEnabledTypeHint, proxyUser: proxyUser, proxyUserTypeHint: proxyUserTypeHint, proxyPassword: proxyPassword, proxyPasswordTypeHint: proxyPasswordTypeHint).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /apps/system/config/org.apache.http.proxyconfigurator.config
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter proxyHost: (query)  (optional)
     - parameter proxyHostTypeHint: (query)  (optional)
     - parameter proxyPort: (query)  (optional)
     - parameter proxyPortTypeHint: (query)  (optional)
     - parameter proxyExceptions: (query)  (optional)
     - parameter proxyExceptionsTypeHint: (query)  (optional)
     - parameter proxyEnabled: (query)  (optional)
     - parameter proxyEnabledTypeHint: (query)  (optional)
     - parameter proxyUser: (query)  (optional)
     - parameter proxyUserTypeHint: (query)  (optional)
     - parameter proxyPassword: (query)  (optional)
     - parameter proxyPasswordTypeHint: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postConfigApacheHttpComponentsProxyConfigurationWithRequestBuilder(proxyHost: String? = nil, proxyHostTypeHint: String? = nil, proxyPort: Int? = nil, proxyPortTypeHint: String? = nil, proxyExceptions: [String]? = nil, proxyExceptionsTypeHint: String? = nil, proxyEnabled: Bool? = nil, proxyEnabledTypeHint: String? = nil, proxyUser: String? = nil, proxyUserTypeHint: String? = nil, proxyPassword: String? = nil, proxyPasswordTypeHint: String? = nil) -> RequestBuilder<Void> {
        let path = "/apps/system/config/org.apache.http.proxyconfigurator.config"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "proxy.host": proxyHost, 
            "proxy.host@TypeHint": proxyHostTypeHint, 
            "proxy.port": proxyPort?.encodeToJSON(), 
            "proxy.port@TypeHint": proxyPortTypeHint, 
            "proxy.exceptions": proxyExceptions, 
            "proxy.exceptions@TypeHint": proxyExceptionsTypeHint, 
            "proxy.enabled": proxyEnabled, 
            "proxy.enabled@TypeHint": proxyEnabledTypeHint, 
            "proxy.user": proxyUser, 
            "proxy.user@TypeHint": proxyUserTypeHint, 
            "proxy.password": proxyPassword, 
            "proxy.password@TypeHint": proxyPasswordTypeHint
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter alias: (query)  (optional)
     - parameter aliasTypeHint: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davCreateAbsoluteUriTypeHint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConfigApacheSlingDavExServlet(alias: String? = nil, aliasTypeHint: String? = nil, davCreateAbsoluteUri: Bool? = nil, davCreateAbsoluteUriTypeHint: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postConfigApacheSlingDavExServletWithRequestBuilder(alias: alias, aliasTypeHint: aliasTypeHint, davCreateAbsoluteUri: davCreateAbsoluteUri, davCreateAbsoluteUriTypeHint: davCreateAbsoluteUriTypeHint).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter alias: (query)  (optional)
     - parameter aliasTypeHint: (query)  (optional)
     - parameter davCreateAbsoluteUri: (query)  (optional)
     - parameter davCreateAbsoluteUriTypeHint: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postConfigApacheSlingDavExServletWithRequestBuilder(alias: String? = nil, aliasTypeHint: String? = nil, davCreateAbsoluteUri: Bool? = nil, davCreateAbsoluteUriTypeHint: String? = nil) -> RequestBuilder<Void> {
        let path = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "alias": alias, 
            "alias@TypeHint": aliasTypeHint, 
            "dav.create-absolute-uri": davCreateAbsoluteUri, 
            "dav.create-absolute-uri@TypeHint": davCreateAbsoluteUriTypeHint
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter jsonMaximumresults: (query)  (optional)
     - parameter jsonMaximumresultsTypeHint: (query)  (optional)
     - parameter enableHtml: (query)  (optional)
     - parameter enableHtmlTypeHint: (query)  (optional)
     - parameter enableTxt: (query)  (optional)
     - parameter enableTxtTypeHint: (query)  (optional)
     - parameter enableXml: (query)  (optional)
     - parameter enableXmlTypeHint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConfigApacheSlingGetServlet(jsonMaximumresults: String? = nil, jsonMaximumresultsTypeHint: String? = nil, enableHtml: Bool? = nil, enableHtmlTypeHint: String? = nil, enableTxt: Bool? = nil, enableTxtTypeHint: String? = nil, enableXml: Bool? = nil, enableXmlTypeHint: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postConfigApacheSlingGetServletWithRequestBuilder(jsonMaximumresults: jsonMaximumresults, jsonMaximumresultsTypeHint: jsonMaximumresultsTypeHint, enableHtml: enableHtml, enableHtmlTypeHint: enableHtmlTypeHint, enableTxt: enableTxt, enableTxtTypeHint: enableTxtTypeHint, enableXml: enableXml, enableXmlTypeHint: enableXmlTypeHint).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter jsonMaximumresults: (query)  (optional)
     - parameter jsonMaximumresultsTypeHint: (query)  (optional)
     - parameter enableHtml: (query)  (optional)
     - parameter enableHtmlTypeHint: (query)  (optional)
     - parameter enableTxt: (query)  (optional)
     - parameter enableTxtTypeHint: (query)  (optional)
     - parameter enableXml: (query)  (optional)
     - parameter enableXmlTypeHint: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postConfigApacheSlingGetServletWithRequestBuilder(jsonMaximumresults: String? = nil, jsonMaximumresultsTypeHint: String? = nil, enableHtml: Bool? = nil, enableHtmlTypeHint: String? = nil, enableTxt: Bool? = nil, enableTxtTypeHint: String? = nil, enableXml: Bool? = nil, enableXmlTypeHint: String? = nil) -> RequestBuilder<Void> {
        let path = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "json.maximumresults": jsonMaximumresults, 
            "json.maximumresults@TypeHint": jsonMaximumresultsTypeHint, 
            "enable.html": enableHtml, 
            "enable.html@TypeHint": enableHtmlTypeHint, 
            "enable.txt": enableTxt, 
            "enable.txt@TypeHint": enableTxtTypeHint, 
            "enable.xml": enableXml, 
            "enable.xml@TypeHint": enableXmlTypeHint
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter allowEmpty: (query)  (optional)
     - parameter allowEmptyTypeHint: (query)  (optional)
     - parameter allowHosts: (query)  (optional)
     - parameter allowHostsTypeHint: (query)  (optional)
     - parameter allowHostsRegexp: (query)  (optional)
     - parameter allowHostsRegexpTypeHint: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter filterMethodsTypeHint: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConfigApacheSlingReferrerFilter(allowEmpty: Bool? = nil, allowEmptyTypeHint: String? = nil, allowHosts: String? = nil, allowHostsTypeHint: String? = nil, allowHostsRegexp: String? = nil, allowHostsRegexpTypeHint: String? = nil, filterMethods: String? = nil, filterMethodsTypeHint: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postConfigApacheSlingReferrerFilterWithRequestBuilder(allowEmpty: allowEmpty, allowEmptyTypeHint: allowEmptyTypeHint, allowHosts: allowHosts, allowHostsTypeHint: allowHostsTypeHint, allowHostsRegexp: allowHostsRegexp, allowHostsRegexpTypeHint: allowHostsRegexpTypeHint, filterMethods: filterMethods, filterMethodsTypeHint: filterMethodsTypeHint).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /apps/system/config/org.apache.sling.security.impl.ReferrerFilter
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter allowEmpty: (query)  (optional)
     - parameter allowEmptyTypeHint: (query)  (optional)
     - parameter allowHosts: (query)  (optional)
     - parameter allowHostsTypeHint: (query)  (optional)
     - parameter allowHostsRegexp: (query)  (optional)
     - parameter allowHostsRegexpTypeHint: (query)  (optional)
     - parameter filterMethods: (query)  (optional)
     - parameter filterMethodsTypeHint: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postConfigApacheSlingReferrerFilterWithRequestBuilder(allowEmpty: Bool? = nil, allowEmptyTypeHint: String? = nil, allowHosts: String? = nil, allowHostsTypeHint: String? = nil, allowHostsRegexp: String? = nil, allowHostsRegexpTypeHint: String? = nil, filterMethods: String? = nil, filterMethodsTypeHint: String? = nil) -> RequestBuilder<Void> {
        let path = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "allow.empty": allowEmpty, 
            "allow.empty@TypeHint": allowEmptyTypeHint, 
            "allow.hosts": allowHosts, 
            "allow.hosts@TypeHint": allowHostsTypeHint, 
            "allow.hosts.regexp": allowHostsRegexp, 
            "allow.hosts.regexp@TypeHint": allowHostsRegexpTypeHint, 
            "filter.methods": filterMethods, 
            "filter.methods@TypeHint": filterMethodsTypeHint
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter path: (path)  
     - parameter name: (path)  
     - parameter operation: (query)  (optional)
     - parameter deleteAuthorizable: (query)  (optional)
     - parameter file: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postNode(path: String, name: String, operation: String? = nil, deleteAuthorizable: String? = nil, file: URL? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postNodeWithRequestBuilder(path: path, name: name, operation: operation, deleteAuthorizable: deleteAuthorizable, file: file).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /{path}/{name}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (path)  
     - parameter name: (path)  
     - parameter operation: (query)  (optional)
     - parameter deleteAuthorizable: (query)  (optional)
     - parameter file: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postNodeWithRequestBuilder(path: String, name: String, operation: String? = nil, deleteAuthorizable: String? = nil, file: URL? = nil) -> RequestBuilder<Void> {
        var path = "/{path}/{name}"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            ":operation": operation, 
            "deleteAuthorizable": deleteAuthorizable
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter path: (path)  
     - parameter name: (path)  
     - parameter addMembers: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postNodeRw(path: String, name: String, addMembers: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postNodeRwWithRequestBuilder(path: path, name: name, addMembers: addMembers).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /{path}/{name}.rw.html
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (path)  
     - parameter name: (path)  
     - parameter addMembers: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postNodeRwWithRequestBuilder(path: String, name: String, addMembers: String? = nil) -> RequestBuilder<Void> {
        var path = "/{path}/{name}.rw.html"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "addMembers": addMembers
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter path: (path)  
     - parameter jcrprimaryType: (query)  
     - parameter name: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPath(path: String, jcrprimaryType: String, name: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postPathWithRequestBuilder(path: path, jcrprimaryType: jcrprimaryType, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /{path}/
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (path)  
     - parameter jcrprimaryType: (query)  
     - parameter name: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func postPathWithRequestBuilder(path: String, jcrprimaryType: String, name: String) -> RequestBuilder<Void> {
        var path = "/{path}/"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "jcr:primaryType": jcrprimaryType, 
            ":name": name
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter path: (query)  
     - parameter pLimit: (query)  
     - parameter _1property: (query)  
     - parameter _1propertyValue: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postQuery(path: String, pLimit: Double, _1property: String, _1propertyValue: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        postQueryWithRequestBuilder(path: path, pLimit: pLimit, _1property: _1property, _1propertyValue: _1propertyValue).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /bin/querybuilder.json
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (query)  
     - parameter pLimit: (query)  
     - parameter _1property: (query)  
     - parameter _1propertyValue: (query)  
     - returns: RequestBuilder<String> 
     */
    open class func postQueryWithRequestBuilder(path: String, pLimit: Double, _1property: String, _1propertyValue: String) -> RequestBuilder<String> {
        let path = "/bin/querybuilder.json"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "path": path, 
            "p.limit": pLimit, 
            "1_property": _1property, 
            "1_property.value": _1propertyValue
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter ignoredeactivated: (query)  
     - parameter onlymodified: (query)  
     - parameter path: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTreeActivation(ignoredeactivated: Bool, onlymodified: Bool, path: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTreeActivationWithRequestBuilder(ignoredeactivated: ignoredeactivated, onlymodified: onlymodified, path: path).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /etc/replication/treeactivation.html
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter ignoredeactivated: (query)  
     - parameter onlymodified: (query)  
     - parameter path: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func postTreeActivationWithRequestBuilder(ignoredeactivated: Bool, onlymodified: Bool, path: String) -> RequestBuilder<Void> {
        let path = "/etc/replication/treeactivation.html"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ignoredeactivated": ignoredeactivated, 
            "onlymodified": onlymodified, 
            "path": path
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter operation: (query)  (optional)
     - parameter newPassword: (query)  (optional)
     - parameter rePassword: (query)  (optional)
     - parameter keyStoreType: (query)  (optional)
     - parameter removeAlias: (query)  (optional)
     - parameter certificate: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTruststore(operation: String? = nil, newPassword: String? = nil, rePassword: String? = nil, keyStoreType: String? = nil, removeAlias: String? = nil, certificate: URL? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        postTruststoreWithRequestBuilder(operation: operation, newPassword: newPassword, rePassword: rePassword, keyStoreType: keyStoreType, removeAlias: removeAlias, certificate: certificate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /libs/granite/security/post/truststore
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter operation: (query)  (optional)
     - parameter newPassword: (query)  (optional)
     - parameter rePassword: (query)  (optional)
     - parameter keyStoreType: (query)  (optional)
     - parameter removeAlias: (query)  (optional)
     - parameter certificate: (form)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func postTruststoreWithRequestBuilder(operation: String? = nil, newPassword: String? = nil, rePassword: String? = nil, keyStoreType: String? = nil, removeAlias: String? = nil, certificate: URL? = nil) -> RequestBuilder<String> {
        let path = "/libs/granite/security/post/truststore"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "certificate": certificate
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            ":operation": operation, 
            "newPassword": newPassword, 
            "rePassword": rePassword, 
            "keyStoreType": keyStoreType, 
            "removeAlias": removeAlias
        ])

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter truststoreP12: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTruststorePKCS12(truststoreP12: URL? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        postTruststorePKCS12WithRequestBuilder(truststoreP12: truststoreP12).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /etc/truststore
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter truststoreP12: (form)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func postTruststorePKCS12WithRequestBuilder(truststoreP12: URL? = nil) -> RequestBuilder<String> {
        let path = "/etc/truststore"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "truststore.p12": truststoreP12
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
