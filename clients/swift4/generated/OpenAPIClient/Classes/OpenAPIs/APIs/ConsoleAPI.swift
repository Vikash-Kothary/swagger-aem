//
// ConsoleAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class ConsoleAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAemProductInfo(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getAemProductInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /system/console/status-productinfo.json
     - BASIC:
       - type: http
       - name: aemAuth
     - returns: RequestBuilder<[String]> 
     */
    open class func getAemProductInfoWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/system/console/status-productinfo.json"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConfigMgr(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getConfigMgrWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /system/console/configMgr
     - BASIC:
       - type: http
       - name: aemAuth
     - returns: RequestBuilder<String> 
     */
    open class func getConfigMgrWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/system/console/configMgr"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path)  
     - parameter action: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postBundle(name: String, action: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postBundleWithRequestBuilder(name: name, action: action).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /system/console/bundles/{name}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter name: (path)  
     - parameter action: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func postBundleWithRequestBuilder(name: String, action: String) -> RequestBuilder<Void> {
        var path = "/system/console/bundles/{name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": action
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter action: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJmxRepository(action: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postJmxRepositoryWithRequestBuilder(action: action).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /system/console/jmx/com.adobe.granite:type=Repository/op/{action}
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter action: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func postJmxRepositoryWithRequestBuilder(action: String) -> RequestBuilder<Void> {
        var path = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
        let actionPreEscape = "\(action)"
        let actionPostEscape = actionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{action}", with: actionPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSamlConfiguration(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, path: [String]? = nil, serviceRanking: Int? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, userIntermediatePath: String? = nil, propertylist: [String]? = nil, completion: @escaping ((_ data: SamlConfigurationInfo?,_ error: Error?) -> Void)) {
        postSamlConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, path: path, serviceRanking: serviceRanking, idpUrl: idpUrl, idpCertAlias: idpCertAlias, idpHttpRedirect: idpHttpRedirect, serviceProviderEntityId: serviceProviderEntityId, assertionConsumerServiceURL: assertionConsumerServiceURL, spPrivateKeyAlias: spPrivateKeyAlias, keyStorePassword: keyStorePassword, defaultRedirectUrl: defaultRedirectUrl, userIDAttribute: userIDAttribute, useEncryption: useEncryption, createUser: createUser, addGroupMemberships: addGroupMemberships, groupMembershipAttribute: groupMembershipAttribute, defaultGroups: defaultGroups, nameIdFormat: nameIdFormat, synchronizeAttributes: synchronizeAttributes, handleLogout: handleLogout, logoutUrl: logoutUrl, clockTolerance: clockTolerance, digestMethod: digestMethod, signatureMethod: signatureMethod, userIntermediatePath: userIntermediatePath, propertylist: propertylist).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
     - BASIC:
       - type: http
       - name: aemAuth
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - returns: RequestBuilder<SamlConfigurationInfo> 
     */
    open class func postSamlConfigurationWithRequestBuilder(post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, path: [String]? = nil, serviceRanking: Int? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, userIntermediatePath: String? = nil, propertylist: [String]? = nil) -> RequestBuilder<SamlConfigurationInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "post": post, 
            "apply": apply, 
            "delete": delete, 
            "action": action, 
            "$location": location, 
            "path": path, 
            "service.ranking": serviceRanking?.encodeToJSON(), 
            "idpUrl": idpUrl, 
            "idpCertAlias": idpCertAlias, 
            "idpHttpRedirect": idpHttpRedirect, 
            "serviceProviderEntityId": serviceProviderEntityId, 
            "assertionConsumerServiceURL": assertionConsumerServiceURL, 
            "spPrivateKeyAlias": spPrivateKeyAlias, 
            "keyStorePassword": keyStorePassword, 
            "defaultRedirectUrl": defaultRedirectUrl, 
            "userIDAttribute": userIDAttribute, 
            "useEncryption": useEncryption, 
            "createUser": createUser, 
            "addGroupMemberships": addGroupMemberships, 
            "groupMembershipAttribute": groupMembershipAttribute, 
            "defaultGroups": defaultGroups, 
            "nameIdFormat": nameIdFormat, 
            "synchronizeAttributes": synchronizeAttributes, 
            "handleLogout": handleLogout, 
            "logoutUrl": logoutUrl, 
            "clockTolerance": clockTolerance?.encodeToJSON(), 
            "digestMethod": digestMethod, 
            "signatureMethod": signatureMethod, 
            "userIntermediatePath": userIntermediatePath, 
            "propertylist": propertylist
        ])

        let requestBuilder: RequestBuilder<SamlConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
