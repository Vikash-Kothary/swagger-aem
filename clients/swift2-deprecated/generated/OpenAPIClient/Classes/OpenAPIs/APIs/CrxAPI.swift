//
// CrxAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class CrxAPI: APIBase {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCrxdeStatus(completion: ((data: String?, error: ErrorType?) -> Void)) {
        getCrxdeStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /crx/server/crx.default/jcr:root/.1.json     - BASIC:
       - type: http
       - name: aemAuth

     - returns: RequestBuilder<String> 
     */
    public class func getCrxdeStatusWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/crx/server/crx.default/jcr:root/.1.json"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInstallStatus(completion: ((data: InstallStatus?, error: ErrorType?) -> Void)) {
        getInstallStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /crx/packmgr/installstatus.jsp     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example={
  "status" : {
    "finished" : true,
    "itemCount" : 0
  }
}}]

     - returns: RequestBuilder<InstallStatus> 
     */
    public class func getInstallStatusWithRequestBuilder() -> RequestBuilder<InstallStatus> {
        let path = "/crx/packmgr/installstatus.jsp"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InstallStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPackageManagerServlet(completion: ((error: ErrorType?) -> Void)) {
        getPackageManagerServletWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - GET /crx/packmgr/service/script.html     - BASIC:
       - type: http
       - name: aemAuth

     - returns: RequestBuilder<Void> 
     */
    public class func getPackageManagerServletWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/crx/packmgr/service/script.html"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter cmd: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postPackageService(cmd cmd: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        postPackageServiceWithRequestBuilder(cmd: cmd).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /crx/packmgr/service.jsp     - BASIC:
       - type: http
       - name: aemAuth
     - parameter cmd: (query)  

     - returns: RequestBuilder<String> 
     */
    public class func postPackageServiceWithRequestBuilder(cmd cmd: String) -> RequestBuilder<String> {
        let path = "/crx/packmgr/service.jsp"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cmd": cmd
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter path: (path)  
     - parameter cmd: (query)  
     - parameter groupName: (query)  (optional)
     - parameter packageName: (query)  (optional)
     - parameter packageVersion: (query)  (optional)
     - parameter charset: (query)  (optional)
     - parameter force: (query)  (optional)
     - parameter recursive: (query)  (optional)
     - parameter package: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postPackageServiceJson(path path: String, cmd: String, groupName: String? = nil, packageName: String? = nil, packageVersion: String? = nil, charset: String? = nil, force: Bool? = nil, recursive: Bool? = nil, package: NSURL? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        postPackageServiceJsonWithRequestBuilder(path: path, cmd: cmd, groupName: groupName, packageName: packageName, packageVersion: packageVersion, charset: charset, force: force, recursive: recursive, package: package).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /crx/packmgr/service/.json/{path}     - BASIC:
       - type: http
       - name: aemAuth
     - parameter path: (path)  
     - parameter cmd: (query)  
     - parameter groupName: (query)  (optional)
     - parameter packageName: (query)  (optional)
     - parameter packageVersion: (query)  (optional)
     - parameter charset: (query)  (optional)
     - parameter force: (query)  (optional)
     - parameter recursive: (query)  (optional)
     - parameter package: (form)  (optional)

     - returns: RequestBuilder<String> 
     */
    public class func postPackageServiceJsonWithRequestBuilder(path path: String, cmd: String, groupName: String? = nil, packageName: String? = nil, packageVersion: String? = nil, charset: String? = nil, force: Bool? = nil, recursive: Bool? = nil, package: NSURL? = nil) -> RequestBuilder<String> {
        var path = "/crx/packmgr/service/.json/{path}"
        path = path.stringByReplacingOccurrencesOfString("{path}", withString: "\(path)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "cmd": cmd,
            "groupName": groupName,
            "packageName": packageName,
            "packageVersion": packageVersion,
            "_charset_": charset,
            "force": force,
            "recursive": recursive
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: falsefalse)
    }

    /**

     - parameter groupName: (query)  
     - parameter packageName: (query)  
     - parameter version: (query)  
     - parameter path: (query)  
     - parameter filter: (query)  (optional)
     - parameter charset: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postPackageUpdate(groupName groupName: String, packageName: String, version: String, path: String, filter: String? = nil, charset: String? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        postPackageUpdateWithRequestBuilder(groupName: groupName, packageName: packageName, version: version, path: path, filter: filter, charset: charset).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /crx/packmgr/update.jsp     - BASIC:
       - type: http
       - name: aemAuth
     - parameter groupName: (query)  
     - parameter packageName: (query)  
     - parameter version: (query)  
     - parameter path: (query)  
     - parameter filter: (query)  (optional)
     - parameter charset: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    public class func postPackageUpdateWithRequestBuilder(groupName groupName: String, packageName: String, version: String, path: String, filter: String? = nil, charset: String? = nil) -> RequestBuilder<String> {
        let path = "/crx/packmgr/update.jsp"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "groupName": groupName,
            "packageName": packageName,
            "version": version,
            "path": path,
            "filter": filter,
            "_charset_": charset
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter old: (query)  
     - parameter plain: (query)  
     - parameter verify: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postSetPassword(old old: String, plain: String, verify: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        postSetPasswordWithRequestBuilder(old: old, plain: plain, verify: verify).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /crx/explorer/ui/setpassword.jsp     - BASIC:
       - type: http
       - name: aemAuth
     - parameter old: (query)  
     - parameter plain: (query)  
     - parameter verify: (query)  

     - returns: RequestBuilder<String> 
     */
    public class func postSetPasswordWithRequestBuilder(old old: String, plain: String, verify: String) -> RequestBuilder<String> {
        let path = "/crx/explorer/ui/setpassword.jsp"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "old": old,
            "plain": plain,
            "verify": verify
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
