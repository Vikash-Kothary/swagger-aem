//
// ConsoleAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class ConsoleAPI: APIBase {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAemProductInfo(completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        getAemProductInfoWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /system/console/status-productinfo.json     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<[String]> 
     */
    public class func getAemProductInfoWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/system/console/status-productinfo.json"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConfigMgr(completion: ((data: String?, error: ErrorType?) -> Void)) {
        getConfigMgrWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /system/console/configMgr     - BASIC:
       - type: http
       - name: aemAuth

     - returns: RequestBuilder<String> 
     */
    public class func getConfigMgrWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/system/console/configMgr"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter name: (path)  
     - parameter action: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postBundle(name name: String, action: String, completion: ((error: ErrorType?) -> Void)) {
        postBundleWithRequestBuilder(name: name, action: action).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /system/console/bundles/{name}     - BASIC:
       - type: http
       - name: aemAuth
     - parameter name: (path)  
     - parameter action: (query)  

     - returns: RequestBuilder<Void> 
     */
    public class func postBundleWithRequestBuilder(name name: String, action: String) -> RequestBuilder<Void> {
        var path = "/system/console/bundles/{name}"
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "action": action
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter action: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postJmxRepository(action action: String, completion: ((error: ErrorType?) -> Void)) {
        postJmxRepositoryWithRequestBuilder(action: action).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /system/console/jmx/com.adobe.granite:type=Repository/op/{action}     - BASIC:
       - type: http
       - name: aemAuth
     - parameter action: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func postJmxRepositoryWithRequestBuilder(action action: String) -> RequestBuilder<Void> {
        var path = "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
        path = path.stringByReplacingOccurrencesOfString("{action}", withString: "\(action)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter propertylist: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postSamlConfiguration(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, path: [String]? = nil, serviceRanking: Int32? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int32? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, userIntermediatePath: String? = nil, propertylist: [String]? = nil, completion: ((data: SamlConfigurationInfo?, error: ErrorType?) -> Void)) {
        postSamlConfigurationWithRequestBuilder(post: post, apply: apply, delete: delete, action: action, location: location, path: path, serviceRanking: serviceRanking, idpUrl: idpUrl, idpCertAlias: idpCertAlias, idpHttpRedirect: idpHttpRedirect, serviceProviderEntityId: serviceProviderEntityId, assertionConsumerServiceURL: assertionConsumerServiceURL, spPrivateKeyAlias: spPrivateKeyAlias, keyStorePassword: keyStorePassword, defaultRedirectUrl: defaultRedirectUrl, userIDAttribute: userIDAttribute, useEncryption: useEncryption, createUser: createUser, addGroupMemberships: addGroupMemberships, groupMembershipAttribute: groupMembershipAttribute, defaultGroups: defaultGroups, nameIdFormat: nameIdFormat, synchronizeAttributes: synchronizeAttributes, handleLogout: handleLogout, logoutUrl: logoutUrl, clockTolerance: clockTolerance, digestMethod: digestMethod, signatureMethod: signatureMethod, userIntermediatePath: userIntermediatePath, propertylist: propertylist).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler     - BASIC:
       - type: http
       - name: aemAuth
     - examples: [{output=none}]
     - parameter post: (query)  (optional)
     - parameter apply: (query)  (optional)
     - parameter delete: (query)  (optional)
     - parameter action: (query)  (optional)
     - parameter location: (query)  (optional)
     - parameter path: (query)  (optional)
     - parameter serviceRanking: (query)  (optional)
     - parameter idpUrl: (query)  (optional)
     - parameter idpCertAlias: (query)  (optional)
     - parameter idpHttpRedirect: (query)  (optional)
     - parameter serviceProviderEntityId: (query)  (optional)
     - parameter assertionConsumerServiceURL: (query)  (optional)
     - parameter spPrivateKeyAlias: (query)  (optional)
     - parameter keyStorePassword: (query)  (optional)
     - parameter defaultRedirectUrl: (query)  (optional)
     - parameter userIDAttribute: (query)  (optional)
     - parameter useEncryption: (query)  (optional)
     - parameter createUser: (query)  (optional)
     - parameter addGroupMemberships: (query)  (optional)
     - parameter groupMembershipAttribute: (query)  (optional)
     - parameter defaultGroups: (query)  (optional)
     - parameter nameIdFormat: (query)  (optional)
     - parameter synchronizeAttributes: (query)  (optional)
     - parameter handleLogout: (query)  (optional)
     - parameter logoutUrl: (query)  (optional)
     - parameter clockTolerance: (query)  (optional)
     - parameter digestMethod: (query)  (optional)
     - parameter signatureMethod: (query)  (optional)
     - parameter userIntermediatePath: (query)  (optional)
     - parameter propertylist: (query)  (optional)

     - returns: RequestBuilder<SamlConfigurationInfo> 
     */
    public class func postSamlConfigurationWithRequestBuilder(post post: Bool? = nil, apply: Bool? = nil, delete: Bool? = nil, action: String? = nil, location: String? = nil, path: [String]? = nil, serviceRanking: Int32? = nil, idpUrl: String? = nil, idpCertAlias: String? = nil, idpHttpRedirect: Bool? = nil, serviceProviderEntityId: String? = nil, assertionConsumerServiceURL: String? = nil, spPrivateKeyAlias: String? = nil, keyStorePassword: String? = nil, defaultRedirectUrl: String? = nil, userIDAttribute: String? = nil, useEncryption: Bool? = nil, createUser: Bool? = nil, addGroupMemberships: Bool? = nil, groupMembershipAttribute: String? = nil, defaultGroups: [String]? = nil, nameIdFormat: String? = nil, synchronizeAttributes: [String]? = nil, handleLogout: Bool? = nil, logoutUrl: String? = nil, clockTolerance: Int32? = nil, digestMethod: String? = nil, signatureMethod: String? = nil, userIntermediatePath: String? = nil, propertylist: [String]? = nil) -> RequestBuilder<SamlConfigurationInfo> {
        let path = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "post": post,
            "apply": apply,
            "delete": delete,
            "action": action,
            "$location": location,
            "path": path,
            "service.ranking": serviceRanking?.encodeToJSON(),
            "idpUrl": idpUrl,
            "idpCertAlias": idpCertAlias,
            "idpHttpRedirect": idpHttpRedirect,
            "serviceProviderEntityId": serviceProviderEntityId,
            "assertionConsumerServiceURL": assertionConsumerServiceURL,
            "spPrivateKeyAlias": spPrivateKeyAlias,
            "keyStorePassword": keyStorePassword,
            "defaultRedirectUrl": defaultRedirectUrl,
            "userIDAttribute": userIDAttribute,
            "useEncryption": useEncryption,
            "createUser": createUser,
            "addGroupMemberships": addGroupMemberships,
            "groupMembershipAttribute": groupMembershipAttribute,
            "defaultGroups": defaultGroups,
            "nameIdFormat": nameIdFormat,
            "synchronizeAttributes": synchronizeAttributes,
            "handleLogout": handleLogout,
            "logoutUrl": logoutUrl,
            "clockTolerance": clockTolerance?.encodeToJSON(),
            "digestMethod": digestMethod,
            "signatureMethod": signatureMethod,
            "userIntermediatePath": userIntermediatePath,
            "propertylist": propertylist
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SamlConfigurationInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
