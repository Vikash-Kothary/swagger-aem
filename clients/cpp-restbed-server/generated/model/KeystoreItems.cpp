/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "KeystoreItems.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

KeystoreItems::KeystoreItems()
{
    m_Alias = "";
    m_EntryType = "";
    m_Algorithm = "";
    m_Format = "";
    
}

KeystoreItems::~KeystoreItems()
{
}

std::string KeystoreItems::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("Alias", m_Alias);
	pt.put("EntryType", m_EntryType);
	pt.put("Algorithm", m_Algorithm);
	pt.put("Format", m_Format);
	write_json(ss, pt, false);
	return ss.str();
}

void KeystoreItems::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_Alias = pt.get("Alias", "");
	m_EntryType = pt.get("EntryType", "");
	m_Algorithm = pt.get("Algorithm", "");
	m_Format = pt.get("Format", "");
}

std::string KeystoreItems::getAlias() const
{
    return m_Alias;
}
void KeystoreItems::setAlias(std::string value)
{
    m_Alias = value;
}
std::string KeystoreItems::getEntryType() const
{
    return m_EntryType;
}
void KeystoreItems::setEntryType(std::string value)
{
    m_EntryType = value;
}
std::string KeystoreItems::getAlgorithm() const
{
    return m_Algorithm;
}
void KeystoreItems::setAlgorithm(std::string value)
{
    m_Algorithm = value;
}
std::string KeystoreItems::getFormat() const
{
    return m_Format;
}
void KeystoreItems::setFormat(std::string value)
{
    m_Format = value;
}
std::vector<std::shared_ptr<KeystoreChainItems>> KeystoreItems::getChain() const
{
    return m_Chain;
}
void KeystoreItems::setChain(std::vector<std::shared_ptr<KeystoreChainItems>> value)
{
    m_Chain = value;
}

}
}
}
}

