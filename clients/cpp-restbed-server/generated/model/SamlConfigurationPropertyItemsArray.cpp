/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SamlConfigurationPropertyItemsArray.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

SamlConfigurationPropertyItemsArray::SamlConfigurationPropertyItemsArray()
{
    m_Name = "";
    m_Optional = false;
    m_Is_set = false;
    m_Type = 0;
    m_Description = "";
    
}

SamlConfigurationPropertyItemsArray::~SamlConfigurationPropertyItemsArray()
{
}

std::string SamlConfigurationPropertyItemsArray::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("Name", m_Name);
	pt.put("Optional", m_Optional);
	pt.put("Is_set", m_Is_set);
	pt.put("Type", m_Type);
	pt.put("Description", m_Description);
	write_json(ss, pt, false);
	return ss.str();
}

void SamlConfigurationPropertyItemsArray::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_Name = pt.get("Name", "");
	m_Optional = pt.get("Optional", false);
	m_Is_set = pt.get("Is_set", false);
	m_Type = pt.get("Type", 0);
	m_Description = pt.get("Description", "");
}

std::string SamlConfigurationPropertyItemsArray::getName() const
{
    return m_Name;
}
void SamlConfigurationPropertyItemsArray::setName(std::string value)
{
    m_Name = value;
}
bool SamlConfigurationPropertyItemsArray::isOptional() const
{
    return m_Optional;
}
void SamlConfigurationPropertyItemsArray::setOptional(bool value)
{
    m_Optional = value;
}
bool SamlConfigurationPropertyItemsArray::isIsSet() const
{
    return m_Is_set;
}
void SamlConfigurationPropertyItemsArray::setIsSet(bool value)
{
    m_Is_set = value;
}
int32_t SamlConfigurationPropertyItemsArray::getType() const
{
    return m_Type;
}
void SamlConfigurationPropertyItemsArray::setType(int32_t value)
{
    m_Type = value;
}
std::vector<std::string> SamlConfigurationPropertyItemsArray::getValues() const
{
    return m_Values;
}
void SamlConfigurationPropertyItemsArray::setValues(std::vector<std::string> value)
{
    m_Values = value;
}
std::string SamlConfigurationPropertyItemsArray::getDescription() const
{
    return m_Description;
}
void SamlConfigurationPropertyItemsArray::setDescription(std::string value)
{
    m_Description = value;
}

}
}
}
}

