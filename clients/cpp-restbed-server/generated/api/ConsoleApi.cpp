/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "ConsoleApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ConsoleApi::ConsoleApi() {
	std::shared_ptr<ConsoleApiSystemConsoleStatus-productinfo.jsonResource> spConsoleApiSystemConsoleStatus-productinfo.jsonResource = std::make_shared<ConsoleApiSystemConsoleStatus-productinfo.jsonResource>();
	this->publish(spConsoleApiSystemConsoleStatus-productinfo.jsonResource);
	
	std::shared_ptr<ConsoleApiSystemConsoleConfigMgrResource> spConsoleApiSystemConsoleConfigMgrResource = std::make_shared<ConsoleApiSystemConsoleConfigMgrResource>();
	this->publish(spConsoleApiSystemConsoleConfigMgrResource);
	
	std::shared_ptr<ConsoleApiSystemConsoleBundlesNameResource> spConsoleApiSystemConsoleBundlesNameResource = std::make_shared<ConsoleApiSystemConsoleBundlesNameResource>();
	this->publish(spConsoleApiSystemConsoleBundlesNameResource);
	
	std::shared_ptr<ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource> spConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource = std::make_shared<ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource>();
	this->publish(spConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource);
	
	std::shared_ptr<ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource> spConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource = std::make_shared<ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource>();
	this->publish(spConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource);
	
}

ConsoleApi::~ConsoleApi() {}

void ConsoleApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/");
	
	this->start(settings);
}

void ConsoleApi::stopService() {
	this->stop();
}

ConsoleApiSystemConsoleStatus-productinfo.jsonResource::ConsoleApiSystemConsoleStatus-productinfo.jsonResource()
{
	this->set_path("/system/console/status-productinfo.json/");
	this->set_method_handler("GET",
		std::bind(&ConsoleApiSystemConsoleStatus-productinfo.jsonResource::GET_method_handler, this,
			std::placeholders::_1));
}

ConsoleApiSystemConsoleStatus-productinfo.jsonResource::~ConsoleApiSystemConsoleStatus-productinfo.jsonResource()
{
}

void ConsoleApiSystemConsoleStatus-productinfo.jsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConsoleApiSystemConsoleConfigMgrResource::ConsoleApiSystemConsoleConfigMgrResource()
{
	this->set_path("/system/console/configMgr/");
	this->set_method_handler("GET",
		std::bind(&ConsoleApiSystemConsoleConfigMgrResource::GET_method_handler, this,
			std::placeholders::_1));
}

ConsoleApiSystemConsoleConfigMgrResource::~ConsoleApiSystemConsoleConfigMgrResource()
{
}

void ConsoleApiSystemConsoleConfigMgrResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "OK", { {"Connection", "close"} });
				return;
			}
			if (status_code == 5XX) {
				session->close(5XX, "Unexpected error.", { {"Connection", "close"} });
				return;
			}

}



ConsoleApiSystemConsoleBundlesNameResource::ConsoleApiSystemConsoleBundlesNameResource()
{
	this->set_path("/system/console/bundles/{name: .*}/");
	this->set_method_handler("POST",
		std::bind(&ConsoleApiSystemConsoleBundlesNameResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConsoleApiSystemConsoleBundlesNameResource::~ConsoleApiSystemConsoleBundlesNameResource()
{
}

void ConsoleApiSystemConsoleBundlesNameResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string name = request->get_path_parameter("name", "");
			
			// Getting the query params
			const std::string action = request->get_query_parameter("action", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource::ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource()
{
	this->set_path("/system/console/jmx/com.adobe.granite:type&#x3D;Repository/op/{action: .*}/");
	this->set_method_handler("POST",
		std::bind(&ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource::~ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource()
{
}

void ConsoleApiSystemConsoleJmxCom.adobe.granite:type&#x3D;RepositoryOpActionResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string action = request->get_path_parameter("action", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource()
{
	this->set_path("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler/");
	this->set_method_handler("POST",
		std::bind(&ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::POST_method_handler, this,
			std::placeholders::_1));
}

ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::~ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource()
{
}

void ConsoleApiSystemConsoleConfigMgrCom.adobe.granite.auth.saml.SamlAuthenticationHandlerResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const bool post = request->get_query_parameter("post", );
			const bool apply = request->get_query_parameter("apply", );
			const bool _delete = request->get_query_parameter("_delete", );
			const std::string action = request->get_query_parameter("action", "");
			const std::string Dollarlocation = request->get_query_parameter("Dollarlocation", "");
			const int32_t servicePeriodranking = request->get_query_parameter("servicePeriodranking", 0);
			const std::string idpUrl = request->get_query_parameter("idpUrl", "");
			const std::string idpCertAlias = request->get_query_parameter("idpCertAlias", "");
			const bool idpHttpRedirect = request->get_query_parameter("idpHttpRedirect", );
			const std::string serviceProviderEntityId = request->get_query_parameter("serviceProviderEntityId", "");
			const std::string assertionConsumerServiceURL = request->get_query_parameter("assertionConsumerServiceURL", "");
			const std::string spPrivateKeyAlias = request->get_query_parameter("spPrivateKeyAlias", "");
			const std::string keyStorePassword = request->get_query_parameter("keyStorePassword", "");
			const std::string defaultRedirectUrl = request->get_query_parameter("defaultRedirectUrl", "");
			const std::string userIDAttribute = request->get_query_parameter("userIDAttribute", "");
			const bool useEncryption = request->get_query_parameter("useEncryption", );
			const bool createUser = request->get_query_parameter("createUser", );
			const bool addGroupMemberships = request->get_query_parameter("addGroupMemberships", );
			const std::string groupMembershipAttribute = request->get_query_parameter("groupMembershipAttribute", "");
			const std::string nameIdFormat = request->get_query_parameter("nameIdFormat", "");
			const bool handleLogout = request->get_query_parameter("handleLogout", );
			const std::string logoutUrl = request->get_query_parameter("logoutUrl", "");
			const int32_t clockTolerance = request->get_query_parameter("clockTolerance", 0);
			const std::string digestMethod = request->get_query_parameter("digestMethod", "");
			const std::string signatureMethod = request->get_query_parameter("signatureMethod", "");
			const std::string userIntermediatePath = request->get_query_parameter("userIntermediatePath", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Retrieved AEM SAML Configuration", { {"Connection", "close"} });
				return;
			}
			if (status_code == 302) {
				session->close(302, "Default response", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

