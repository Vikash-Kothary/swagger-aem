/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "CrxApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CrxApi::CrxApi() {
	std::shared_ptr<CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource> spCrxApiCrxServerCrx.defaultJcr:root.1.jsonResource = std::make_shared<CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource>();
	this->publish(spCrxApiCrxServerCrx.defaultJcr:root.1.jsonResource);
	
	std::shared_ptr<CrxApiCrxPackmgrInstallstatus.jspResource> spCrxApiCrxPackmgrInstallstatus.jspResource = std::make_shared<CrxApiCrxPackmgrInstallstatus.jspResource>();
	this->publish(spCrxApiCrxPackmgrInstallstatus.jspResource);
	
	std::shared_ptr<CrxApiCrxPackmgrServiceScript.htmlResource> spCrxApiCrxPackmgrServiceScript.htmlResource = std::make_shared<CrxApiCrxPackmgrServiceScript.htmlResource>();
	this->publish(spCrxApiCrxPackmgrServiceScript.htmlResource);
	
	std::shared_ptr<CrxApiCrxPackmgrService.jspResource> spCrxApiCrxPackmgrService.jspResource = std::make_shared<CrxApiCrxPackmgrService.jspResource>();
	this->publish(spCrxApiCrxPackmgrService.jspResource);
	
	std::shared_ptr<CrxApiCrxPackmgrService.jsonPathResource> spCrxApiCrxPackmgrService.jsonPathResource = std::make_shared<CrxApiCrxPackmgrService.jsonPathResource>();
	this->publish(spCrxApiCrxPackmgrService.jsonPathResource);
	
	std::shared_ptr<CrxApiCrxPackmgrUpdate.jspResource> spCrxApiCrxPackmgrUpdate.jspResource = std::make_shared<CrxApiCrxPackmgrUpdate.jspResource>();
	this->publish(spCrxApiCrxPackmgrUpdate.jspResource);
	
	std::shared_ptr<CrxApiCrxExplorerUiSetpassword.jspResource> spCrxApiCrxExplorerUiSetpassword.jspResource = std::make_shared<CrxApiCrxExplorerUiSetpassword.jspResource>();
	this->publish(spCrxApiCrxExplorerUiSetpassword.jspResource);
	
}

CrxApi::~CrxApi() {}

void CrxApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/");
	
	this->start(settings);
}

void CrxApi::stopService() {
	this->stop();
}

CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource::CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource()
{
	this->set_path("/crx/server/crx.default/jcr:root/.1.json/");
	this->set_method_handler("GET",
		std::bind(&CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource::GET_method_handler, this,
			std::placeholders::_1));
}

CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource::~CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource()
{
}

void CrxApiCrxServerCrx.defaultJcr:root.1.jsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "CRXDE is enabled", { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, "CRXDE is disabled", { {"Connection", "close"} });
				return;
			}

}



CrxApiCrxPackmgrInstallstatus.jspResource::CrxApiCrxPackmgrInstallstatus.jspResource()
{
	this->set_path("/crx/packmgr/installstatus.jsp/");
	this->set_method_handler("GET",
		std::bind(&CrxApiCrxPackmgrInstallstatus.jspResource::GET_method_handler, this,
			std::placeholders::_1));
}

CrxApiCrxPackmgrInstallstatus.jspResource::~CrxApiCrxPackmgrInstallstatus.jspResource()
{
}

void CrxApiCrxPackmgrInstallstatus.jspResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Retrieved CRX package manager install status", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



CrxApiCrxPackmgrServiceScript.htmlResource::CrxApiCrxPackmgrServiceScript.htmlResource()
{
	this->set_path("/crx/packmgr/service/script.html/");
	this->set_method_handler("GET",
		std::bind(&CrxApiCrxPackmgrServiceScript.htmlResource::GET_method_handler, this,
			std::placeholders::_1));
}

CrxApiCrxPackmgrServiceScript.htmlResource::~CrxApiCrxPackmgrServiceScript.htmlResource()
{
}

void CrxApiCrxPackmgrServiceScript.htmlResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 404) {
				session->close(404, "Package Manager Servlet is disabled", { {"Connection", "close"} });
				return;
			}
			if (status_code == 405) {
				session->close(405, "Package Manager Servlet is active", { {"Connection", "close"} });
				return;
			}

}



CrxApiCrxPackmgrService.jspResource::CrxApiCrxPackmgrService.jspResource()
{
	this->set_path("/crx/packmgr/service.jsp/");
	this->set_method_handler("POST",
		std::bind(&CrxApiCrxPackmgrService.jspResource::POST_method_handler, this,
			std::placeholders::_1));
}

CrxApiCrxPackmgrService.jspResource::~CrxApiCrxPackmgrService.jspResource()
{
}

void CrxApiCrxPackmgrService.jspResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string cmd = request->get_query_parameter("cmd", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



CrxApiCrxPackmgrService.jsonPathResource::CrxApiCrxPackmgrService.jsonPathResource()
{
	this->set_path("/crx/packmgr/service/.json/{path: .*}/");
	this->set_method_handler("POST",
		std::bind(&CrxApiCrxPackmgrService.jsonPathResource::POST_method_handler, this,
			std::placeholders::_1));
}

CrxApiCrxPackmgrService.jsonPathResource::~CrxApiCrxPackmgrService.jsonPathResource()
{
}

void CrxApiCrxPackmgrService.jsonPathResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string path = request->get_path_parameter("path", "");
			
			// Getting the query params
			const std::string cmd = request->get_query_parameter("cmd", "");
			const std::string groupName = request->get_query_parameter("groupName", "");
			const std::string packageName = request->get_query_parameter("packageName", "");
			const std::string packageVersion = request->get_query_parameter("packageVersion", "");
			const std::string charset = request->get_query_parameter("charset", "");
			const bool force = request->get_query_parameter("force", );
			const bool recursive = request->get_query_parameter("recursive", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



CrxApiCrxPackmgrUpdate.jspResource::CrxApiCrxPackmgrUpdate.jspResource()
{
	this->set_path("/crx/packmgr/update.jsp/");
	this->set_method_handler("POST",
		std::bind(&CrxApiCrxPackmgrUpdate.jspResource::POST_method_handler, this,
			std::placeholders::_1));
}

CrxApiCrxPackmgrUpdate.jspResource::~CrxApiCrxPackmgrUpdate.jspResource()
{
}

void CrxApiCrxPackmgrUpdate.jspResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string groupName = request->get_query_parameter("groupName", "");
			const std::string packageName = request->get_query_parameter("packageName", "");
			const std::string version = request->get_query_parameter("version", "");
			const std::string path = request->get_query_parameter("path", "");
			const std::string filter = request->get_query_parameter("filter", "");
			const std::string charset = request->get_query_parameter("charset", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



CrxApiCrxExplorerUiSetpassword.jspResource::CrxApiCrxExplorerUiSetpassword.jspResource()
{
	this->set_path("/crx/explorer/ui/setpassword.jsp/");
	this->set_method_handler("POST",
		std::bind(&CrxApiCrxExplorerUiSetpassword.jspResource::POST_method_handler, this,
			std::placeholders::_1));
}

CrxApiCrxExplorerUiSetpassword.jspResource::~CrxApiCrxExplorerUiSetpassword.jspResource()
{
}

void CrxApiCrxExplorerUiSetpassword.jspResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string old = request->get_query_parameter("old", "");
			const std::string plain = request->get_query_parameter("plain", "");
			const std::string verify = request->get_query_parameter("verify", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

