/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "CustomApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CustomApi::CustomApi() {
	std::shared_ptr<CustomApiSystemHealthResource> spCustomApiSystemHealthResource = std::make_shared<CustomApiSystemHealthResource>();
	this->publish(spCustomApiSystemHealthResource);
	
	std::shared_ptr<CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource> spCustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource = std::make_shared<CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource>();
	this->publish(spCustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource);
	
	std::shared_ptr<CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource> spCustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource = std::make_shared<CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource>();
	this->publish(spCustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource);
	
}

CustomApi::~CustomApi() {}

void CustomApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/");
	
	this->start(settings);
}

void CustomApi::stopService() {
	this->stop();
}

CustomApiSystemHealthResource::CustomApiSystemHealthResource()
{
	this->set_path("/system/health/");
	this->set_method_handler("GET",
		std::bind(&CustomApiSystemHealthResource::GET_method_handler, this,
			std::placeholders::_1));
}

CustomApiSystemHealthResource::~CustomApiSystemHealthResource()
{
}

void CustomApiSystemHealthResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string tags = request->get_query_parameter("tags", "");
			const bool combineTagsOr = request->get_query_parameter("combineTagsOr", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource()
{
	this->set_path("/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck/");
	this->set_method_handler("POST",
		std::bind(&CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::POST_method_handler, this,
			std::placeholders::_1));
}

CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::~CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource()
{
}

void CustomApiAppsSystemConfigCom.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheckResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string bundlesPeriodignoredAtTypeHint = request->get_query_parameter("bundlesPeriodignoredAtTypeHint", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}



CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource()
{
	this->set_path("/apps/system/config/com.shinesolutions.aem.passwordreset.Activator/");
	this->set_method_handler("POST",
		std::bind(&CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::POST_method_handler, this,
			std::placeholders::_1));
}

CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::~CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource()
{
}

void CustomApiAppsSystemConfigCom.shinesolutions.aem.passwordreset.ActivatorResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string pwdresetPeriodauthorizablesAtTypeHint = request->get_query_parameter("pwdresetPeriodauthorizablesAtTypeHint", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 0) {
				session->close(0, "Default response", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

