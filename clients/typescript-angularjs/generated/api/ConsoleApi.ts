/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ConsoleApi {
    protected basePath = 'http://localhost';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     */
    public getAemProductInfo (extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<string>> {
        const localVarPath = this.basePath + '/system/console/status-productinfo.json';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getConfigMgr (extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/system/console/configMgr';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param name 
     * @param action 
     */
    public postBundle (name: string, action: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/system/console/bundles/{name}'
            .replace('{' + 'name' + '}', encodeURIComponent(String(name)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling postBundle.');
        }

        // verify required parameter 'action' is not null or undefined
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling postBundle.');
        }

        if (action !== undefined) {
            queryParameters['action'] = action;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param action 
     */
    public postJmxRepository (action: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}'
            .replace('{' + 'action' + '}', encodeURIComponent(String(action)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'action' is not null or undefined
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling postJmxRepository.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param post 
     * @param apply 
     * @param _delete 
     * @param action 
     * @param $location 
     * @param path 
     * @param serviceRanking 
     * @param idpUrl 
     * @param idpCertAlias 
     * @param idpHttpRedirect 
     * @param serviceProviderEntityId 
     * @param assertionConsumerServiceURL 
     * @param spPrivateKeyAlias 
     * @param keyStorePassword 
     * @param defaultRedirectUrl 
     * @param userIDAttribute 
     * @param useEncryption 
     * @param createUser 
     * @param addGroupMemberships 
     * @param groupMembershipAttribute 
     * @param defaultGroups 
     * @param nameIdFormat 
     * @param synchronizeAttributes 
     * @param handleLogout 
     * @param logoutUrl 
     * @param clockTolerance 
     * @param digestMethod 
     * @param signatureMethod 
     * @param userIntermediatePath 
     * @param propertylist 
     */
    public postSamlConfiguration (post?: boolean, apply?: boolean, _delete?: boolean, action?: string, $location?: string, path?: Array<string>, serviceRanking?: number, idpUrl?: string, idpCertAlias?: string, idpHttpRedirect?: boolean, serviceProviderEntityId?: string, assertionConsumerServiceURL?: string, spPrivateKeyAlias?: string, keyStorePassword?: string, defaultRedirectUrl?: string, userIDAttribute?: string, useEncryption?: boolean, createUser?: boolean, addGroupMemberships?: boolean, groupMembershipAttribute?: string, defaultGroups?: Array<string>, nameIdFormat?: string, synchronizeAttributes?: Array<string>, handleLogout?: boolean, logoutUrl?: string, clockTolerance?: number, digestMethod?: string, signatureMethod?: string, userIntermediatePath?: string, propertylist?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SamlConfigurationInfo> {
        const localVarPath = this.basePath + '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (post !== undefined) {
            queryParameters['post'] = post;
        }

        if (apply !== undefined) {
            queryParameters['apply'] = apply;
        }

        if (_delete !== undefined) {
            queryParameters['delete'] = _delete;
        }

        if (action !== undefined) {
            queryParameters['action'] = action;
        }

        if ($location !== undefined) {
            queryParameters['$location'] = $location;
        }

        if (path !== undefined) {
            queryParameters['path'] = path;
        }

        if (serviceRanking !== undefined) {
            queryParameters['service.ranking'] = serviceRanking;
        }

        if (idpUrl !== undefined) {
            queryParameters['idpUrl'] = idpUrl;
        }

        if (idpCertAlias !== undefined) {
            queryParameters['idpCertAlias'] = idpCertAlias;
        }

        if (idpHttpRedirect !== undefined) {
            queryParameters['idpHttpRedirect'] = idpHttpRedirect;
        }

        if (serviceProviderEntityId !== undefined) {
            queryParameters['serviceProviderEntityId'] = serviceProviderEntityId;
        }

        if (assertionConsumerServiceURL !== undefined) {
            queryParameters['assertionConsumerServiceURL'] = assertionConsumerServiceURL;
        }

        if (spPrivateKeyAlias !== undefined) {
            queryParameters['spPrivateKeyAlias'] = spPrivateKeyAlias;
        }

        if (keyStorePassword !== undefined) {
            queryParameters['keyStorePassword'] = keyStorePassword;
        }

        if (defaultRedirectUrl !== undefined) {
            queryParameters['defaultRedirectUrl'] = defaultRedirectUrl;
        }

        if (userIDAttribute !== undefined) {
            queryParameters['userIDAttribute'] = userIDAttribute;
        }

        if (useEncryption !== undefined) {
            queryParameters['useEncryption'] = useEncryption;
        }

        if (createUser !== undefined) {
            queryParameters['createUser'] = createUser;
        }

        if (addGroupMemberships !== undefined) {
            queryParameters['addGroupMemberships'] = addGroupMemberships;
        }

        if (groupMembershipAttribute !== undefined) {
            queryParameters['groupMembershipAttribute'] = groupMembershipAttribute;
        }

        if (defaultGroups !== undefined) {
            queryParameters['defaultGroups'] = defaultGroups;
        }

        if (nameIdFormat !== undefined) {
            queryParameters['nameIdFormat'] = nameIdFormat;
        }

        if (synchronizeAttributes !== undefined) {
            queryParameters['synchronizeAttributes'] = synchronizeAttributes;
        }

        if (handleLogout !== undefined) {
            queryParameters['handleLogout'] = handleLogout;
        }

        if (logoutUrl !== undefined) {
            queryParameters['logoutUrl'] = logoutUrl;
        }

        if (clockTolerance !== undefined) {
            queryParameters['clockTolerance'] = clockTolerance;
        }

        if (digestMethod !== undefined) {
            queryParameters['digestMethod'] = digestMethod;
        }

        if (signatureMethod !== undefined) {
            queryParameters['signatureMethod'] = signatureMethod;
        }

        if (userIntermediatePath !== undefined) {
            queryParameters['userIntermediatePath'] = userIntermediatePath;
        }

        if (propertylist !== undefined) {
            queryParameters['propertylist'] = propertylist;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
