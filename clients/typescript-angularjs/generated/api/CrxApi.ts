/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class CrxApi {
    protected basePath = 'http://localhost';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     */
    public getCrxdeStatus (extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/crx/server/crx.default/jcr:root/.1.json';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getInstallStatus (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.InstallStatus> {
        const localVarPath = this.basePath + '/crx/packmgr/installstatus.jsp';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public getPackageManagerServlet (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/crx/packmgr/service/script.html';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param cmd 
     */
    public postPackageService (cmd: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/crx/packmgr/service.jsp';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'cmd' is not null or undefined
        if (cmd === null || cmd === undefined) {
            throw new Error('Required parameter cmd was null or undefined when calling postPackageService.');
        }

        if (cmd !== undefined) {
            queryParameters['cmd'] = cmd;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param path 
     * @param cmd 
     * @param groupName 
     * @param packageName 
     * @param packageVersion 
     * @param charset 
     * @param force 
     * @param recursive 
     * @param _package 
     */
    public postPackageServiceJson (path: string, cmd: string, groupName?: string, packageName?: string, packageVersion?: string, charset?: string, force?: boolean, recursive?: boolean, _package?: any, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/crx/packmgr/service/.json/{path}'
            .replace('{' + 'path' + '}', encodeURIComponent(String(path)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};

        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling postPackageServiceJson.');
        }

        // verify required parameter 'cmd' is not null or undefined
        if (cmd === null || cmd === undefined) {
            throw new Error('Required parameter cmd was null or undefined when calling postPackageServiceJson.');
        }

        if (cmd !== undefined) {
            queryParameters['cmd'] = cmd;
        }

        if (groupName !== undefined) {
            queryParameters['groupName'] = groupName;
        }

        if (packageName !== undefined) {
            queryParameters['packageName'] = packageName;
        }

        if (packageVersion !== undefined) {
            queryParameters['packageVersion'] = packageVersion;
        }

        if (charset !== undefined) {
            queryParameters['_charset_'] = charset;
        }

        if (force !== undefined) {
            queryParameters['force'] = force;
        }

        if (recursive !== undefined) {
            queryParameters['recursive'] = recursive;
        }

        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

        formParams['package'] = _package;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: this.$httpParamSerializer(formParams),
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param groupName 
     * @param packageName 
     * @param version 
     * @param path 
     * @param filter 
     * @param charset 
     */
    public postPackageUpdate (groupName: string, packageName: string, version: string, path: string, filter?: string, charset?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/crx/packmgr/update.jsp';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'groupName' is not null or undefined
        if (groupName === null || groupName === undefined) {
            throw new Error('Required parameter groupName was null or undefined when calling postPackageUpdate.');
        }

        // verify required parameter 'packageName' is not null or undefined
        if (packageName === null || packageName === undefined) {
            throw new Error('Required parameter packageName was null or undefined when calling postPackageUpdate.');
        }

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling postPackageUpdate.');
        }

        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling postPackageUpdate.');
        }

        if (groupName !== undefined) {
            queryParameters['groupName'] = groupName;
        }

        if (packageName !== undefined) {
            queryParameters['packageName'] = packageName;
        }

        if (version !== undefined) {
            queryParameters['version'] = version;
        }

        if (path !== undefined) {
            queryParameters['path'] = path;
        }

        if (filter !== undefined) {
            queryParameters['filter'] = filter;
        }

        if (charset !== undefined) {
            queryParameters['_charset_'] = charset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param old 
     * @param plain 
     * @param verify 
     */
    public postSetPassword (old: string, plain: string, verify: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/crx/explorer/ui/setpassword.jsp';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'old' is not null or undefined
        if (old === null || old === undefined) {
            throw new Error('Required parameter old was null or undefined when calling postSetPassword.');
        }

        // verify required parameter 'plain' is not null or undefined
        if (plain === null || plain === undefined) {
            throw new Error('Required parameter plain was null or undefined when calling postSetPassword.');
        }

        // verify required parameter 'verify' is not null or undefined
        if (verify === null || verify === undefined) {
            throw new Error('Required parameter verify was null or undefined when calling postSetPassword.');
        }

        if (old !== undefined) {
            queryParameters['old'] = old;
        }

        if (plain !== undefined) {
            queryParameters['plain'] = plain;
        }

        if (verify !== undefined) {
            queryParameters['verify'] = verify;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
