{-
   Adobe Experience Manager (AEM) API

   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   OpenAPI Version: 3.0.0
   Adobe Experience Manager (AEM) API API version: 3.2.0-pre.0
   Contact: opensource@shinesolutions.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : AdobeExperienceManager(AEM).API.Console
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module AdobeExperienceManager(AEM).API.Console where

import AdobeExperienceManager(AEM).Core
import AdobeExperienceManager(AEM).MimeTypes
import AdobeExperienceManager(AEM).Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Console

-- *** getAemProductInfo

-- | @GET \/system\/console\/status-productinfo.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getAemProductInfo 
  :: AdobeExperienceManager(AEM)Request GetAemProductInfo MimeNoContent [Text] MimeJSON
getAemProductInfo =
  _mkRequest "GET" ["/system/console/status-productinfo.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetAemProductInfo  

-- | @application/json@
instance Produces GetAemProductInfo MimeJSON


-- *** getConfigMgr

-- | @GET \/system\/console\/configMgr@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getConfigMgr 
  :: AdobeExperienceManager(AEM)Request GetConfigMgr MimeNoContent Text MimeTextxml
getConfigMgr =
  _mkRequest "GET" ["/system/console/configMgr"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetConfigMgr  

-- | @text/xml@
instance Produces GetConfigMgr MimeTextxml


-- *** postBundle

-- | @POST \/system\/console\/bundles\/{name}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postBundle 
  :: Name -- ^ "name"
  -> Action -- ^ "action"
  -> AdobeExperienceManager(AEM)Request PostBundle MimeNoContent NoContent MimeNoContent
postBundle (Name name) (Action action) =
  _mkRequest "POST" ["/system/console/bundles/",toPath name]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `setQuery` toQuery ("action", Just action)

data PostBundle  

instance Produces PostBundle MimeNoContent


-- *** postJmxRepository

-- | @POST \/system\/console\/jmx\/com.adobe.granite:type=Repository\/op\/{action}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postJmxRepository 
  :: Action -- ^ "action"
  -> AdobeExperienceManager(AEM)Request PostJmxRepository MimeNoContent NoContent MimeNoContent
postJmxRepository (Action action) =
  _mkRequest "POST" ["/system/console/jmx/com.adobe.granite:type=Repository/op/",toPath action]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostJmxRepository  

instance Produces PostJmxRepository MimeNoContent


-- *** postSamlConfiguration

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.saml.SamlAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postSamlConfiguration 
  :: AdobeExperienceManager(AEM)Request PostSamlConfiguration MimeNoContent SamlConfigurationInfo MimePlainText
postSamlConfiguration =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data PostSamlConfiguration  
instance HasOptionalParam PostSamlConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam PostSamlConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam PostSamlConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam PostSamlConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam PostSamlConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam PostSamlConfiguration Path[Text] where
  applyOptionalParam req (Path[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("path", Just xs)
instance HasOptionalParam PostSamlConfiguration ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam PostSamlConfiguration IdpUrl where
  applyOptionalParam req (IdpUrl xs) =
    req `setQuery` toQuery ("idpUrl", Just xs)
instance HasOptionalParam PostSamlConfiguration IdpCertAlias where
  applyOptionalParam req (IdpCertAlias xs) =
    req `setQuery` toQuery ("idpCertAlias", Just xs)
instance HasOptionalParam PostSamlConfiguration IdpHttpRedirect where
  applyOptionalParam req (IdpHttpRedirect xs) =
    req `setQuery` toQuery ("idpHttpRedirect", Just xs)
instance HasOptionalParam PostSamlConfiguration ServiceProviderEntityId where
  applyOptionalParam req (ServiceProviderEntityId xs) =
    req `setQuery` toQuery ("serviceProviderEntityId", Just xs)
instance HasOptionalParam PostSamlConfiguration AssertionConsumerServiceUrl where
  applyOptionalParam req (AssertionConsumerServiceUrl xs) =
    req `setQuery` toQuery ("assertionConsumerServiceURL", Just xs)
instance HasOptionalParam PostSamlConfiguration SpPrivateKeyAlias where
  applyOptionalParam req (SpPrivateKeyAlias xs) =
    req `setQuery` toQuery ("spPrivateKeyAlias", Just xs)
instance HasOptionalParam PostSamlConfiguration KeyStorePassword where
  applyOptionalParam req (KeyStorePassword xs) =
    req `setQuery` toQuery ("keyStorePassword", Just xs)
instance HasOptionalParam PostSamlConfiguration DefaultRedirectUrl where
  applyOptionalParam req (DefaultRedirectUrl xs) =
    req `setQuery` toQuery ("defaultRedirectUrl", Just xs)
instance HasOptionalParam PostSamlConfiguration UserIdAttribute where
  applyOptionalParam req (UserIdAttribute xs) =
    req `setQuery` toQuery ("userIDAttribute", Just xs)
instance HasOptionalParam PostSamlConfiguration UseEncryption where
  applyOptionalParam req (UseEncryption xs) =
    req `setQuery` toQuery ("useEncryption", Just xs)
instance HasOptionalParam PostSamlConfiguration CreateUserBool where
  applyOptionalParam req (CreateUserBool xs) =
    req `setQuery` toQuery ("createUser", Just xs)
instance HasOptionalParam PostSamlConfiguration AddGroupMemberships where
  applyOptionalParam req (AddGroupMemberships xs) =
    req `setQuery` toQuery ("addGroupMemberships", Just xs)
instance HasOptionalParam PostSamlConfiguration GroupMembershipAttribute where
  applyOptionalParam req (GroupMembershipAttribute xs) =
    req `setQuery` toQuery ("groupMembershipAttribute", Just xs)
instance HasOptionalParam PostSamlConfiguration DefaultGroups where
  applyOptionalParam req (DefaultGroups xs) =
    req `setQuery` toQueryColl MultiParamArray ("defaultGroups", Just xs)
instance HasOptionalParam PostSamlConfiguration NameIdFormat where
  applyOptionalParam req (NameIdFormat xs) =
    req `setQuery` toQuery ("nameIdFormat", Just xs)
instance HasOptionalParam PostSamlConfiguration SynchronizeAttributes where
  applyOptionalParam req (SynchronizeAttributes xs) =
    req `setQuery` toQueryColl MultiParamArray ("synchronizeAttributes", Just xs)
instance HasOptionalParam PostSamlConfiguration HandleLogout where
  applyOptionalParam req (HandleLogout xs) =
    req `setQuery` toQuery ("handleLogout", Just xs)
instance HasOptionalParam PostSamlConfiguration LogoutUrl where
  applyOptionalParam req (LogoutUrl xs) =
    req `setQuery` toQuery ("logoutUrl", Just xs)
instance HasOptionalParam PostSamlConfiguration ClockTolerance where
  applyOptionalParam req (ClockTolerance xs) =
    req `setQuery` toQuery ("clockTolerance", Just xs)
instance HasOptionalParam PostSamlConfiguration DigestMethod where
  applyOptionalParam req (DigestMethod xs) =
    req `setQuery` toQuery ("digestMethod", Just xs)
instance HasOptionalParam PostSamlConfiguration SignatureMethod where
  applyOptionalParam req (SignatureMethod xs) =
    req `setQuery` toQuery ("signatureMethod", Just xs)
instance HasOptionalParam PostSamlConfiguration UserIntermediatePath where
  applyOptionalParam req (UserIntermediatePath xs) =
    req `setQuery` toQuery ("userIntermediatePath", Just xs)
instance HasOptionalParam PostSamlConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)

-- | @text/plain@
instance Produces PostSamlConfiguration MimePlainText

