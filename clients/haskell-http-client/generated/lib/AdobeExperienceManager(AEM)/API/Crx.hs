{-
   Adobe Experience Manager (AEM) API

   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   OpenAPI Version: 3.0.0
   Adobe Experience Manager (AEM) API API version: 3.2.0-pre.0
   Contact: opensource@shinesolutions.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : AdobeExperienceManager(AEM).API.Crx
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module AdobeExperienceManager(AEM).API.Crx where

import AdobeExperienceManager(AEM).Core
import AdobeExperienceManager(AEM).MimeTypes
import AdobeExperienceManager(AEM).Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Crx

-- *** getCrxdeStatus

-- | @GET \/crx\/server\/crx.default\/jcr:root\/.1.json@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getCrxdeStatus 
  :: AdobeExperienceManager(AEM)Request GetCrxdeStatus MimeNoContent Text MimePlaintext
getCrxdeStatus =
  _mkRequest "GET" ["/crx/server/crx.default/jcr:root/.1.json"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetCrxdeStatus  

-- | @plain/text@
instance Produces GetCrxdeStatus MimePlaintext


-- *** getInstallStatus

-- | @GET \/crx\/packmgr\/installstatus.jsp@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
getInstallStatus 
  :: AdobeExperienceManager(AEM)Request GetInstallStatus MimeNoContent InstallStatus MimeJSON
getInstallStatus =
  _mkRequest "GET" ["/crx/packmgr/installstatus.jsp"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetInstallStatus  

-- | @application/json@
instance Produces GetInstallStatus MimeJSON


-- *** getPackageManagerServlet

-- | @GET \/crx\/packmgr\/service\/script.html@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
getPackageManagerServlet 
  :: AdobeExperienceManager(AEM)Request GetPackageManagerServlet MimeNoContent res MimeTexthtml
getPackageManagerServlet =
  _mkRequest "GET" ["/crx/packmgr/service/script.html"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GetPackageManagerServlet  

-- | @text/html@
instance Produces GetPackageManagerServlet MimeTexthtml


-- *** postPackageService

-- | @POST \/crx\/packmgr\/service.jsp@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postPackageService 
  :: Cmd -- ^ "cmd"
  -> AdobeExperienceManager(AEM)Request PostPackageService MimeNoContent Text MimeTextxml
postPackageService (Cmd cmd) =
  _mkRequest "POST" ["/crx/packmgr/service.jsp"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `setQuery` toQuery ("cmd", Just cmd)

data PostPackageService  

-- | @text/xml@
instance Produces PostPackageService MimeTextxml


-- *** postPackageServiceJson

-- | @POST \/crx\/packmgr\/service\/.json\/{path}@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postPackageServiceJson 
  :: (Consumes PostPackageServiceJson MimeMultipartFormData)
  => Path -- ^ "path"
  -> Cmd -- ^ "cmd"
  -> AdobeExperienceManager(AEM)Request PostPackageServiceJson MimeMultipartFormData Text MimeJSON
postPackageServiceJson (Path path) (Cmd cmd) =
  _mkRequest "POST" ["/crx/packmgr/service/.json/",toPath path]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `setQuery` toQuery ("cmd", Just cmd)

data PostPackageServiceJson  
instance HasOptionalParam PostPackageServiceJson Package where
  applyOptionalParam req (Package xs) =
    req `_addMultiFormPart` NH.partFileSource "package" xs
instance HasOptionalParam PostPackageServiceJson GroupName where
  applyOptionalParam req (GroupName xs) =
    req `setQuery` toQuery ("groupName", Just xs)
instance HasOptionalParam PostPackageServiceJson PackageName where
  applyOptionalParam req (PackageName xs) =
    req `setQuery` toQuery ("packageName", Just xs)
instance HasOptionalParam PostPackageServiceJson PackageVersion where
  applyOptionalParam req (PackageVersion xs) =
    req `setQuery` toQuery ("packageVersion", Just xs)
instance HasOptionalParam PostPackageServiceJson Charset where
  applyOptionalParam req (Charset xs) =
    req `setQuery` toQuery ("_charset_", Just xs)
instance HasOptionalParam PostPackageServiceJson Force where
  applyOptionalParam req (Force xs) =
    req `setQuery` toQuery ("force", Just xs)
instance HasOptionalParam PostPackageServiceJson Recursive where
  applyOptionalParam req (Recursive xs) =
    req `setQuery` toQuery ("recursive", Just xs)

-- | @multipart/form-data@
instance Consumes PostPackageServiceJson MimeMultipartFormData

-- | @application/json@
instance Produces PostPackageServiceJson MimeJSON


-- *** postPackageUpdate

-- | @POST \/crx\/packmgr\/update.jsp@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postPackageUpdate 
  :: GroupName -- ^ "groupName"
  -> PackageName -- ^ "packageName"
  -> Version -- ^ "version"
  -> Path -- ^ "path"
  -> AdobeExperienceManager(AEM)Request PostPackageUpdate MimeNoContent Text MimeJSON
postPackageUpdate (GroupName groupName) (PackageName packageName) (Version version) (Path path) =
  _mkRequest "POST" ["/crx/packmgr/update.jsp"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `setQuery` toQuery ("groupName", Just groupName)
    `setQuery` toQuery ("packageName", Just packageName)
    `setQuery` toQuery ("version", Just version)
    `setQuery` toQuery ("path", Just path)

data PostPackageUpdate  
instance HasOptionalParam PostPackageUpdate Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)
instance HasOptionalParam PostPackageUpdate Charset where
  applyOptionalParam req (Charset xs) =
    req `setQuery` toQuery ("_charset_", Just xs)

-- | @application/json@
instance Produces PostPackageUpdate MimeJSON


-- *** postSetPassword

-- | @POST \/crx\/explorer\/ui\/setpassword.jsp@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
postSetPassword 
  :: Old -- ^ "old"
  -> Plain -- ^ "plain"
  -> Verify -- ^ "verify"
  -> AdobeExperienceManager(AEM)Request PostSetPassword MimeNoContent Text MimePlainText
postSetPassword (Old old) (Plain plain) (Verify verify) =
  _mkRequest "POST" ["/crx/explorer/ui/setpassword.jsp"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)
    `setQuery` toQuery ("old", Just old)
    `setQuery` toQuery ("plain", Just plain)
    `setQuery` toQuery ("verify", Just verify)

data PostSetPassword  

-- | @text/plain@
instance Produces PostSetPassword MimePlainText

