/*
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ConsoleApiService service

/*
ConsoleApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return []string
*/
func (a *ConsoleApiService) GetAemProductInfo(ctx context.Context) ([]string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue []string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/system/console/status-productinfo.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v []string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ConsoleApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return string
*/
func (a *ConsoleApiService) GetConfigMgr(ctx context.Context) (string, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/system/console/configMgr"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/xml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ConsoleApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name
 * @param action
*/
func (a *ConsoleApiService) PostBundle(ctx context.Context, name string, action string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/system/console/bundles/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("action", parameterToString(action, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ConsoleApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param action
*/
func (a *ConsoleApiService) PostJmxRepository(ctx context.Context, action string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}"
	localVarPath = strings.Replace(localVarPath, "{"+"action"+"}", fmt.Sprintf("%v", action), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ConsoleApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PostSamlConfigurationOpts - Optional Parameters:
 * @param "Post" (optional.Bool) - 
 * @param "Apply" (optional.Bool) - 
 * @param "Delete" (optional.Bool) - 
 * @param "Action" (optional.String) - 
 * @param "Location" (optional.String) - 
 * @param "Path" (optional.Interface of []string) - 
 * @param "ServiceRanking" (optional.Int32) - 
 * @param "IdpUrl" (optional.String) - 
 * @param "IdpCertAlias" (optional.String) - 
 * @param "IdpHttpRedirect" (optional.Bool) - 
 * @param "ServiceProviderEntityId" (optional.String) - 
 * @param "AssertionConsumerServiceURL" (optional.String) - 
 * @param "SpPrivateKeyAlias" (optional.String) - 
 * @param "KeyStorePassword" (optional.String) - 
 * @param "DefaultRedirectUrl" (optional.String) - 
 * @param "UserIDAttribute" (optional.String) - 
 * @param "UseEncryption" (optional.Bool) - 
 * @param "CreateUser" (optional.Bool) - 
 * @param "AddGroupMemberships" (optional.Bool) - 
 * @param "GroupMembershipAttribute" (optional.String) - 
 * @param "DefaultGroups" (optional.Interface of []string) - 
 * @param "NameIdFormat" (optional.String) - 
 * @param "SynchronizeAttributes" (optional.Interface of []string) - 
 * @param "HandleLogout" (optional.Bool) - 
 * @param "LogoutUrl" (optional.String) - 
 * @param "ClockTolerance" (optional.Int32) - 
 * @param "DigestMethod" (optional.String) - 
 * @param "SignatureMethod" (optional.String) - 
 * @param "UserIntermediatePath" (optional.String) - 
 * @param "Propertylist" (optional.Interface of []string) - 
@return SamlConfigurationInfo
*/

type PostSamlConfigurationOpts struct {
    Post optional.Bool
    Apply optional.Bool
    Delete optional.Bool
    Action optional.String
    Location optional.String
    Path optional.Interface
    ServiceRanking optional.Int32
    IdpUrl optional.String
    IdpCertAlias optional.String
    IdpHttpRedirect optional.Bool
    ServiceProviderEntityId optional.String
    AssertionConsumerServiceURL optional.String
    SpPrivateKeyAlias optional.String
    KeyStorePassword optional.String
    DefaultRedirectUrl optional.String
    UserIDAttribute optional.String
    UseEncryption optional.Bool
    CreateUser optional.Bool
    AddGroupMemberships optional.Bool
    GroupMembershipAttribute optional.String
    DefaultGroups optional.Interface
    NameIdFormat optional.String
    SynchronizeAttributes optional.Interface
    HandleLogout optional.Bool
    LogoutUrl optional.String
    ClockTolerance optional.Int32
    DigestMethod optional.String
    SignatureMethod optional.String
    UserIntermediatePath optional.String
    Propertylist optional.Interface
}

func (a *ConsoleApiService) PostSamlConfiguration(ctx context.Context, localVarOptionals *PostSamlConfigurationOpts) (SamlConfigurationInfo, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue SamlConfigurationInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Post.IsSet() {
		localVarQueryParams.Add("post", parameterToString(localVarOptionals.Post.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Apply.IsSet() {
		localVarQueryParams.Add("apply", parameterToString(localVarOptionals.Apply.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Delete.IsSet() {
		localVarQueryParams.Add("delete", parameterToString(localVarOptionals.Delete.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Action.IsSet() {
		localVarQueryParams.Add("action", parameterToString(localVarOptionals.Action.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarQueryParams.Add("$location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Path.IsSet() {
		localVarQueryParams.Add("path", parameterToString(localVarOptionals.Path.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.ServiceRanking.IsSet() {
		localVarQueryParams.Add("service.ranking", parameterToString(localVarOptionals.ServiceRanking.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpUrl.IsSet() {
		localVarQueryParams.Add("idpUrl", parameterToString(localVarOptionals.IdpUrl.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpCertAlias.IsSet() {
		localVarQueryParams.Add("idpCertAlias", parameterToString(localVarOptionals.IdpCertAlias.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IdpHttpRedirect.IsSet() {
		localVarQueryParams.Add("idpHttpRedirect", parameterToString(localVarOptionals.IdpHttpRedirect.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ServiceProviderEntityId.IsSet() {
		localVarQueryParams.Add("serviceProviderEntityId", parameterToString(localVarOptionals.ServiceProviderEntityId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AssertionConsumerServiceURL.IsSet() {
		localVarQueryParams.Add("assertionConsumerServiceURL", parameterToString(localVarOptionals.AssertionConsumerServiceURL.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SpPrivateKeyAlias.IsSet() {
		localVarQueryParams.Add("spPrivateKeyAlias", parameterToString(localVarOptionals.SpPrivateKeyAlias.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.KeyStorePassword.IsSet() {
		localVarQueryParams.Add("keyStorePassword", parameterToString(localVarOptionals.KeyStorePassword.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DefaultRedirectUrl.IsSet() {
		localVarQueryParams.Add("defaultRedirectUrl", parameterToString(localVarOptionals.DefaultRedirectUrl.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserIDAttribute.IsSet() {
		localVarQueryParams.Add("userIDAttribute", parameterToString(localVarOptionals.UserIDAttribute.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseEncryption.IsSet() {
		localVarQueryParams.Add("useEncryption", parameterToString(localVarOptionals.UseEncryption.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreateUser.IsSet() {
		localVarQueryParams.Add("createUser", parameterToString(localVarOptionals.CreateUser.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AddGroupMemberships.IsSet() {
		localVarQueryParams.Add("addGroupMemberships", parameterToString(localVarOptionals.AddGroupMemberships.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GroupMembershipAttribute.IsSet() {
		localVarQueryParams.Add("groupMembershipAttribute", parameterToString(localVarOptionals.GroupMembershipAttribute.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DefaultGroups.IsSet() {
		localVarQueryParams.Add("defaultGroups", parameterToString(localVarOptionals.DefaultGroups.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.NameIdFormat.IsSet() {
		localVarQueryParams.Add("nameIdFormat", parameterToString(localVarOptionals.NameIdFormat.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SynchronizeAttributes.IsSet() {
		localVarQueryParams.Add("synchronizeAttributes", parameterToString(localVarOptionals.SynchronizeAttributes.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.HandleLogout.IsSet() {
		localVarQueryParams.Add("handleLogout", parameterToString(localVarOptionals.HandleLogout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LogoutUrl.IsSet() {
		localVarQueryParams.Add("logoutUrl", parameterToString(localVarOptionals.LogoutUrl.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClockTolerance.IsSet() {
		localVarQueryParams.Add("clockTolerance", parameterToString(localVarOptionals.ClockTolerance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DigestMethod.IsSet() {
		localVarQueryParams.Add("digestMethod", parameterToString(localVarOptionals.DigestMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SignatureMethod.IsSet() {
		localVarQueryParams.Add("signatureMethod", parameterToString(localVarOptionals.SignatureMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserIntermediatePath.IsSet() {
		localVarQueryParams.Add("userIntermediatePath", parameterToString(localVarOptionals.UserIntermediatePath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Propertylist.IsSet() {
		localVarQueryParams.Add("propertylist", parameterToString(localVarOptionals.Propertylist.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SamlConfigurationInfo
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 302 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
