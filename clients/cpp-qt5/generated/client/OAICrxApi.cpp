/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrxApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICrxApi::OAICrxApi() {}

OAICrxApi::~OAICrxApi() {}

OAICrxApi::OAICrxApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAICrxApi::getCrxdeStatus() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/crx/server/crx.default/jcr:root/.1.json");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICrxApi::getCrxdeStatusCallback);

    worker->execute(&input);
}

void
OAICrxApi::getCrxdeStatusCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getCrxdeStatusSignal(output);
    } else {
        emit getCrxdeStatusSignalE(output, error_type, error_str);
        emit getCrxdeStatusSignalEFull(worker, error_type, error_str);
    }
}

void
OAICrxApi::getInstallStatus() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/crx/packmgr/installstatus.jsp");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICrxApi::getInstallStatusCallback);

    worker->execute(&input);
}

void
OAICrxApi::getInstallStatusCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIInstallStatus* output = static_cast<OAIInstallStatus*>(create(json, QString("OAIInstallStatus")));
    auto wrapper = new OAIQObjectWrapper<OAIInstallStatus*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getInstallStatusSignal(output);
    } else {
        emit getInstallStatusSignalE(output, error_type, error_str);
        emit getInstallStatusSignalEFull(worker, error_type, error_str);
    }
}

void
OAICrxApi::getPackageManagerServlet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/crx/packmgr/service/script.html");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICrxApi::getPackageManagerServletCallback);

    worker->execute(&input);
}

void
OAICrxApi::getPackageManagerServletCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPackageManagerServletSignal();
    } else {
        emit getPackageManagerServletSignalE(error_type, error_str);
        emit getPackageManagerServletSignalEFull(worker, error_type, error_str);
    }
}

void
OAICrxApi::postPackageService(QString* cmd) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/crx/packmgr/service.jsp");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cmd"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cmd)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICrxApi::postPackageServiceCallback);

    worker->execute(&input);
}

void
OAICrxApi::postPackageServiceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postPackageServiceSignal(output);
    } else {
        emit postPackageServiceSignalE(output, error_type, error_str);
        emit postPackageServiceSignalEFull(worker, error_type, error_str);
    }
}

void
OAICrxApi::postPackageServiceJson(QString* path, QString* cmd, QString* group_name, QString* package_name, QString* package_version, QString* _charset_, bool force, bool recursive, OAIHttpRequestInputFileElement* package) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/crx/packmgr/service/.json/{path}");

    QString pathPathParam("{"); pathPathParam.append("path").append("}");
    fullPath.replace(pathPathParam, stringValue(path));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("cmd"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(cmd)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("groupName"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(group_name)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("packageName"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(package_name)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("packageVersion"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(package_version)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("_charset_"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_charset_)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("force"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(force)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("recursive"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(recursive)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (package != nullptr) {
        input.add_file("package", (*package).local_filename, (*package).request_filename, (*package).mime_type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICrxApi::postPackageServiceJsonCallback);

    worker->execute(&input);
}

void
OAICrxApi::postPackageServiceJsonCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postPackageServiceJsonSignal(output);
    } else {
        emit postPackageServiceJsonSignalE(output, error_type, error_str);
        emit postPackageServiceJsonSignalEFull(worker, error_type, error_str);
    }
}

void
OAICrxApi::postPackageUpdate(QString* group_name, QString* package_name, QString* version, QString* path, QString* filter, QString* _charset_) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/crx/packmgr/update.jsp");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("groupName"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(group_name)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("packageName"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(package_name)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("version"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(version)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("path"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(path)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("_charset_"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_charset_)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICrxApi::postPackageUpdateCallback);

    worker->execute(&input);
}

void
OAICrxApi::postPackageUpdateCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postPackageUpdateSignal(output);
    } else {
        emit postPackageUpdateSignalE(output, error_type, error_str);
        emit postPackageUpdateSignalEFull(worker, error_type, error_str);
    }
}

void
OAICrxApi::postSetPassword(QString* old, QString* plain, QString* verify) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/crx/explorer/ui/setpassword.jsp");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("old"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(old)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("plain"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(plain)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("verify"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(verify)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICrxApi::postSetPasswordCallback);

    worker->execute(&input);
}

void
OAICrxApi::postSetPasswordCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postSetPasswordSignal(output);
    } else {
        emit postSetPasswordSignalE(output, error_type, error_str);
        emit postSetPasswordSignalEFull(worker, error_type, error_str);
    }
}


}
