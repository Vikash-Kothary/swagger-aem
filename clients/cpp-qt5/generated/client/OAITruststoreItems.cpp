/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAITruststoreItems.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAITruststoreItems::OAITruststoreItems(QString json) {
    init();
    this->fromJson(json);
}

OAITruststoreItems::OAITruststoreItems() {
    init();
}

OAITruststoreItems::~OAITruststoreItems() {
    this->cleanup();
}

void
OAITruststoreItems::init() {
    alias = new QString("");
    m_alias_isSet = false;
    entry_type = new QString("");
    m_entry_type_isSet = false;
    subject = new QString("");
    m_subject_isSet = false;
    issuer = new QString("");
    m_issuer_isSet = false;
    not_before = new QString("");
    m_not_before_isSet = false;
    not_after = new QString("");
    m_not_after_isSet = false;
    serial_number = 0;
    m_serial_number_isSet = false;
}

void
OAITruststoreItems::cleanup() {
    if(alias != nullptr) { 
        delete alias;
    }
    if(entry_type != nullptr) { 
        delete entry_type;
    }
    if(subject != nullptr) { 
        delete subject;
    }
    if(issuer != nullptr) { 
        delete issuer;
    }
    if(not_before != nullptr) { 
        delete not_before;
    }
    if(not_after != nullptr) { 
        delete not_after;
    }

}

OAITruststoreItems*
OAITruststoreItems::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAITruststoreItems::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&alias, pJson["alias"], "QString", "QString");
    
    ::OpenAPI::setValue(&entry_type, pJson["entryType"], "QString", "QString");
    
    ::OpenAPI::setValue(&subject, pJson["subject"], "QString", "QString");
    
    ::OpenAPI::setValue(&issuer, pJson["issuer"], "QString", "QString");
    
    ::OpenAPI::setValue(&not_before, pJson["notBefore"], "QString", "QString");
    
    ::OpenAPI::setValue(&not_after, pJson["notAfter"], "QString", "QString");
    
    ::OpenAPI::setValue(&serial_number, pJson["serialNumber"], "qint32", "");
    
}

QString
OAITruststoreItems::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAITruststoreItems::asJsonObject() {
    QJsonObject obj;
    if(alias != nullptr && *alias != QString("")){
        toJsonValue(QString("alias"), alias, obj, QString("QString"));
    }
    if(entry_type != nullptr && *entry_type != QString("")){
        toJsonValue(QString("entryType"), entry_type, obj, QString("QString"));
    }
    if(subject != nullptr && *subject != QString("")){
        toJsonValue(QString("subject"), subject, obj, QString("QString"));
    }
    if(issuer != nullptr && *issuer != QString("")){
        toJsonValue(QString("issuer"), issuer, obj, QString("QString"));
    }
    if(not_before != nullptr && *not_before != QString("")){
        toJsonValue(QString("notBefore"), not_before, obj, QString("QString"));
    }
    if(not_after != nullptr && *not_after != QString("")){
        toJsonValue(QString("notAfter"), not_after, obj, QString("QString"));
    }
    if(m_serial_number_isSet){
        obj.insert("serialNumber", QJsonValue(serial_number));
    }

    return obj;
}

QString*
OAITruststoreItems::getAlias() {
    return alias;
}
void
OAITruststoreItems::setAlias(QString* alias) {
    this->alias = alias;
    this->m_alias_isSet = true;
}

QString*
OAITruststoreItems::getEntryType() {
    return entry_type;
}
void
OAITruststoreItems::setEntryType(QString* entry_type) {
    this->entry_type = entry_type;
    this->m_entry_type_isSet = true;
}

QString*
OAITruststoreItems::getSubject() {
    return subject;
}
void
OAITruststoreItems::setSubject(QString* subject) {
    this->subject = subject;
    this->m_subject_isSet = true;
}

QString*
OAITruststoreItems::getIssuer() {
    return issuer;
}
void
OAITruststoreItems::setIssuer(QString* issuer) {
    this->issuer = issuer;
    this->m_issuer_isSet = true;
}

QString*
OAITruststoreItems::getNotBefore() {
    return not_before;
}
void
OAITruststoreItems::setNotBefore(QString* not_before) {
    this->not_before = not_before;
    this->m_not_before_isSet = true;
}

QString*
OAITruststoreItems::getNotAfter() {
    return not_after;
}
void
OAITruststoreItems::setNotAfter(QString* not_after) {
    this->not_after = not_after;
    this->m_not_after_isSet = true;
}

qint32
OAITruststoreItems::getSerialNumber() {
    return serial_number;
}
void
OAITruststoreItems::setSerialNumber(qint32 serial_number) {
    this->serial_number = serial_number;
    this->m_serial_number_isSet = true;
}


bool
OAITruststoreItems::isSet(){
    bool isObjectUpdated = false;
    do{
        if(alias != nullptr && *alias != QString("")){ isObjectUpdated = true; break;}
        if(entry_type != nullptr && *entry_type != QString("")){ isObjectUpdated = true; break;}
        if(subject != nullptr && *subject != QString("")){ isObjectUpdated = true; break;}
        if(issuer != nullptr && *issuer != QString("")){ isObjectUpdated = true; break;}
        if(not_before != nullptr && *not_before != QString("")){ isObjectUpdated = true; break;}
        if(not_after != nullptr && *not_after != QString("")){ isObjectUpdated = true; break;}
        if(m_serial_number_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

