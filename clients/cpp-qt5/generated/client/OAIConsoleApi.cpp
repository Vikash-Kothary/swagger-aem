/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsoleApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIConsoleApi::OAIConsoleApi() {}

OAIConsoleApi::~OAIConsoleApi() {}

OAIConsoleApi::OAIConsoleApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIConsoleApi::getAemProductInfo() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/system/console/status-productinfo.json");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIConsoleApi::getAemProductInfoCallback);

    worker->execute(&input);
}

void
OAIConsoleApi::getAemProductInfoCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<QString*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<QString*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAemProductInfoSignal(output);
    } else {
        emit getAemProductInfoSignalE(output, error_type, error_str);
        emit getAemProductInfoSignalEFull(worker, error_type, error_str);
    }
}

void
OAIConsoleApi::getConfigMgr() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/system/console/configMgr");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIConsoleApi::getConfigMgrCallback);

    worker->execute(&input);
}

void
OAIConsoleApi::getConfigMgrCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getConfigMgrSignal(output);
    } else {
        emit getConfigMgrSignalE(output, error_type, error_str);
        emit getConfigMgrSignalEFull(worker, error_type, error_str);
    }
}

void
OAIConsoleApi::postBundle(QString* name, QString* action) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/system/console/bundles/{name}");

    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("action"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(action)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIConsoleApi::postBundleCallback);

    worker->execute(&input);
}

void
OAIConsoleApi::postBundleCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postBundleSignal();
    } else {
        emit postBundleSignalE(error_type, error_str);
        emit postBundleSignalEFull(worker, error_type, error_str);
    }
}

void
OAIConsoleApi::postJmxRepository(QString* action) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/system/console/jmx/com.adobe.granite:type=Repository/op/{action}");

    QString actionPathParam("{"); actionPathParam.append("action").append("}");
    fullPath.replace(actionPathParam, stringValue(action));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIConsoleApi::postJmxRepositoryCallback);

    worker->execute(&input);
}

void
OAIConsoleApi::postJmxRepositoryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postJmxRepositorySignal();
    } else {
        emit postJmxRepositorySignalE(error_type, error_str);
        emit postJmxRepositorySignalEFull(worker, error_type, error_str);
    }
}

void
OAIConsoleApi::postSamlConfiguration(bool post, bool apply, bool _delete, QString* action, QString* location, QList<QString*>* path, qint32 service_ranking, QString* idp_url, QString* idp_cert_alias, bool idp_http_redirect, QString* service_provider_entity_id, QString* assertion_consumer_service_url, QString* sp_private_key_alias, QString* key_store_password, QString* default_redirect_url, QString* user_id_attribute, bool use_encryption, bool create_user, bool add_group_memberships, QString* group_membership_attribute, QList<QString*>* default_groups, QString* name_id_format, QList<QString*>* synchronize_attributes, bool handle_logout, QString* logout_url, qint32 clock_tolerance, QString* digest_method, QString* signature_method, QString* user_intermediate_path, QList<QString*>* propertylist) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("post"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(post)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("apply"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(apply)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("delete"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_delete)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("action"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(action)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("$location"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(location)));



    if (path->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *path) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("path=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("path=");
        qint32 count = 0;
        foreach(QString* t, *path) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("path=");
        qint32 count = 0;
        foreach(QString* t, *path) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("service.ranking"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(service_ranking)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpUrl"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpCertAlias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_cert_alias)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpHttpRedirect"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_http_redirect)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("serviceProviderEntityId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(service_provider_entity_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("assertionConsumerServiceURL"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(assertion_consumer_service_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("spPrivateKeyAlias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sp_private_key_alias)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("keyStorePassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key_store_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultRedirectUrl"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(default_redirect_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userIDAttribute"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(user_id_attribute)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("useEncryption"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(use_encryption)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("createUser"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(create_user)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addGroupMemberships"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(add_group_memberships)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("groupMembershipAttribute"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(group_membership_attribute)));



    if (default_groups->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *default_groups) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("defaultGroups=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("defaultGroups=");
        qint32 count = 0;
        foreach(QString* t, *default_groups) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("defaultGroups=");
        qint32 count = 0;
        foreach(QString* t, *default_groups) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("nameIdFormat"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(name_id_format)));



    if (synchronize_attributes->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *synchronize_attributes) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("synchronizeAttributes=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("synchronizeAttributes=");
        qint32 count = 0;
        foreach(QString* t, *synchronize_attributes) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("synchronizeAttributes=");
        qint32 count = 0;
        foreach(QString* t, *synchronize_attributes) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("handleLogout"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(handle_logout)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("logoutUrl"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(logout_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("clockTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(clock_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("digestMethod"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(digest_method)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("signatureMethod"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(signature_method)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userIntermediatePath"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(user_intermediate_path)));



    if (propertylist->size() > 0) {
      if (QString("csv").indexOf("multi") == 0) {
        foreach(QString* t, *propertylist) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("propertylist=").append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("propertylist=");
        qint32 count = 0;
        foreach(QString* t, *propertylist) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("csv").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("propertylist=");
        qint32 count = 0;
        foreach(QString* t, *propertylist) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIConsoleApi::postSamlConfigurationCallback);

    worker->execute(&input);
}

void
OAIConsoleApi::postSamlConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAISamlConfigurationInfo* output = static_cast<OAISamlConfigurationInfo*>(create(json, QString("OAISamlConfigurationInfo")));
    auto wrapper = new OAIQObjectWrapper<OAISamlConfigurationInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postSamlConfigurationSignal(output);
    } else {
        emit postSamlConfigurationSignalE(output, error_type, error_str);
        emit postSamlConfigurationSignalEFull(worker, error_type, error_str);
    }
}


}
