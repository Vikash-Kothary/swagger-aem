/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIConsoleApi_H_
#define _OAI_OAIConsoleApi_H_

#include "OAIHttpRequest.h"

#include "OAIOAISamlConfigurationInfo.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIConsoleApi: public QObject {
    Q_OBJECT

public:
    OAIConsoleApi();
    OAIConsoleApi(QString host, QString basePath);
    ~OAIConsoleApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getAemProductInfo();
    void getConfigMgr();
    void postBundle(QString* name, QString* action);
    void postJmxRepository(QString* action);
    void postSamlConfiguration(bool post, bool apply, bool _delete, QString* action, QString* location, QList<QString*>* path, qint32 service_ranking, QString* idp_url, QString* idp_cert_alias, bool idp_http_redirect, QString* service_provider_entity_id, QString* assertion_consumer_service_url, QString* sp_private_key_alias, QString* key_store_password, QString* default_redirect_url, QString* user_id_attribute, bool use_encryption, bool create_user, bool add_group_memberships, QString* group_membership_attribute, QList<QString*>* default_groups, QString* name_id_format, QList<QString*>* synchronize_attributes, bool handle_logout, QString* logout_url, qint32 clock_tolerance, QString* digest_method, QString* signature_method, QString* user_intermediate_path, QList<QString*>* propertylist);
    
private:
    void getAemProductInfoCallback (OAIHttpRequestWorker * worker);
    void getConfigMgrCallback (OAIHttpRequestWorker * worker);
    void postBundleCallback (OAIHttpRequestWorker * worker);
    void postJmxRepositoryCallback (OAIHttpRequestWorker * worker);
    void postSamlConfigurationCallback (OAIHttpRequestWorker * worker);
    
signals:
    void getAemProductInfoSignal(QList<QString*>* summary);
    void getConfigMgrSignal(QString* summary);
    void postBundleSignal();
    void postJmxRepositorySignal();
    void postSamlConfigurationSignal(OAISamlConfigurationInfo* summary);
    
    void getAemProductInfoSignalE(QList<QString*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConfigMgrSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postBundleSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJmxRepositorySignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postSamlConfigurationSignalE(OAISamlConfigurationInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getAemProductInfoSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getConfigMgrSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postBundleSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postJmxRepositorySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postSamlConfigurationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
