/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAICrxApi_H_
#define _OAI_OAICrxApi_H_

#include "OAIHttpRequest.h"

#include "OAIHttpRequest.h"
#include "OAIOAIInstallStatus.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAICrxApi: public QObject {
    Q_OBJECT

public:
    OAICrxApi();
    OAICrxApi(QString host, QString basePath);
    ~OAICrxApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getCrxdeStatus();
    void getInstallStatus();
    void getPackageManagerServlet();
    void postPackageService(QString* cmd);
    void postPackageServiceJson(QString* path, QString* cmd, QString* group_name, QString* package_name, QString* package_version, QString* _charset_, bool force, bool recursive, OAIHttpRequestInputFileElement* package);
    void postPackageUpdate(QString* group_name, QString* package_name, QString* version, QString* path, QString* filter, QString* _charset_);
    void postSetPassword(QString* old, QString* plain, QString* verify);
    
private:
    void getCrxdeStatusCallback (OAIHttpRequestWorker * worker);
    void getInstallStatusCallback (OAIHttpRequestWorker * worker);
    void getPackageManagerServletCallback (OAIHttpRequestWorker * worker);
    void postPackageServiceCallback (OAIHttpRequestWorker * worker);
    void postPackageServiceJsonCallback (OAIHttpRequestWorker * worker);
    void postPackageUpdateCallback (OAIHttpRequestWorker * worker);
    void postSetPasswordCallback (OAIHttpRequestWorker * worker);
    
signals:
    void getCrxdeStatusSignal(QString* summary);
    void getInstallStatusSignal(OAIInstallStatus* summary);
    void getPackageManagerServletSignal();
    void postPackageServiceSignal(QString* summary);
    void postPackageServiceJsonSignal(QString* summary);
    void postPackageUpdateSignal(QString* summary);
    void postSetPasswordSignal(QString* summary);
    
    void getCrxdeStatusSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallStatusSignalE(OAIInstallStatus* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPackageManagerServletSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageServiceSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageServiceJsonSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageUpdateSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postSetPasswordSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getCrxdeStatusSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallStatusSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPackageManagerServletSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageServiceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageServiceJsonSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageUpdateSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postSetPasswordSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
