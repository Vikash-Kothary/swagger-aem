/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICustomApi::OAICustomApi() {}

OAICustomApi::~OAICustomApi() {}

OAICustomApi::OAICustomApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAICustomApi::getAemHealthCheck(QString* tags, bool combine_tags_or) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/system/health");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("tags"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(tags)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("combineTagsOr"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(combine_tags_or)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICustomApi::getAemHealthCheckCallback);

    worker->execute(&input);
}

void
OAICustomApi::getAemHealthCheckCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAemHealthCheckSignal(output);
    } else {
        emit getAemHealthCheckSignalE(output, error_type, error_str);
        emit getAemHealthCheckSignalEFull(worker, error_type, error_str);
    }
}

void
OAICustomApi::postConfigAemHealthCheckServlet(QList<QString*>* bundles_ignored, QString* bundles_ignored_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck");




    if (bundles_ignored->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *bundles_ignored) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("bundles.ignored=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("bundles.ignored=");
        qint32 count = 0;
        foreach(QString* t, *bundles_ignored) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("bundles.ignored=");
        qint32 count = 0;
        foreach(QString* t, *bundles_ignored) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("bundles.ignored@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(bundles_ignored_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICustomApi::postConfigAemHealthCheckServletCallback);

    worker->execute(&input);
}

void
OAICustomApi::postConfigAemHealthCheckServletCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigAemHealthCheckServletSignal();
    } else {
        emit postConfigAemHealthCheckServletSignalE(error_type, error_str);
        emit postConfigAemHealthCheckServletSignalEFull(worker, error_type, error_str);
    }
}

void
OAICustomApi::postConfigAemPasswordReset(QList<QString*>* pwdreset_authorizables, QString* pwdreset_authorizables_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/com.shinesolutions.aem.passwordreset.Activator");




    if (pwdreset_authorizables->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *pwdreset_authorizables) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("pwdreset.authorizables=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("pwdreset.authorizables=");
        qint32 count = 0;
        foreach(QString* t, *pwdreset_authorizables) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("pwdreset.authorizables=");
        qint32 count = 0;
        foreach(QString* t, *pwdreset_authorizables) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pwdreset.authorizables@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(pwdreset_authorizables_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICustomApi::postConfigAemPasswordResetCallback);

    worker->execute(&input);
}

void
OAICustomApi::postConfigAemPasswordResetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigAemPasswordResetSignal();
    } else {
        emit postConfigAemPasswordResetSignalE(error_type, error_str);
        emit postConfigAemPasswordResetSignalEFull(worker, error_type, error_str);
    }
}


}
