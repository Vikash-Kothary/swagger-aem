/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICqApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICqApi::OAICqApi() {}

OAICqApi::~OAICqApi() {}

OAICqApi::OAICqApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAICqApi::getLoginPage() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/libs/granite/core/content/login.html");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICqApi::getLoginPageCallback);

    worker->execute(&input);
}

void
OAICqApi::getLoginPageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getLoginPageSignal(output);
    } else {
        emit getLoginPageSignalE(output, error_type, error_str);
        emit getLoginPageSignalEFull(worker, error_type, error_str);
    }
}

void
OAICqApi::postCqActions(QString* authorizable_id, QString* changelog) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/.cqactions.html");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("authorizableId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(authorizable_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("changelog"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(changelog)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAICqApi::postCqActionsCallback);

    worker->execute(&input);
}

void
OAICqApi::postCqActionsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postCqActionsSignal();
    } else {
        emit postCqActionsSignalE(error_type, error_str);
        emit postCqActionsSignalEFull(worker, error_type, error_str);
    }
}


}
