/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIKeystoreItems.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIKeystoreItems::OAIKeystoreItems(QString json) {
    init();
    this->fromJson(json);
}

OAIKeystoreItems::OAIKeystoreItems() {
    init();
}

OAIKeystoreItems::~OAIKeystoreItems() {
    this->cleanup();
}

void
OAIKeystoreItems::init() {
    alias = new QString("");
    m_alias_isSet = false;
    entry_type = new QString("");
    m_entry_type_isSet = false;
    algorithm = new QString("");
    m_algorithm_isSet = false;
    format = new QString("");
    m_format_isSet = false;
    chain = new QList<OAIKeystoreChainItems*>();
    m_chain_isSet = false;
}

void
OAIKeystoreItems::cleanup() {
    if(alias != nullptr) { 
        delete alias;
    }
    if(entry_type != nullptr) { 
        delete entry_type;
    }
    if(algorithm != nullptr) { 
        delete algorithm;
    }
    if(format != nullptr) { 
        delete format;
    }
    if(chain != nullptr) { 
        auto arr = chain;
        for(auto o: *arr) { 
            delete o;
        }
        delete chain;
    }
}

OAIKeystoreItems*
OAIKeystoreItems::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIKeystoreItems::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&alias, pJson["alias"], "QString", "QString");
    
    ::OpenAPI::setValue(&entry_type, pJson["entryType"], "QString", "QString");
    
    ::OpenAPI::setValue(&algorithm, pJson["algorithm"], "QString", "QString");
    
    ::OpenAPI::setValue(&format, pJson["format"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&chain, pJson["chain"], "QList", "OAIKeystoreChainItems");
}

QString
OAIKeystoreItems::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIKeystoreItems::asJsonObject() {
    QJsonObject obj;
    if(alias != nullptr && *alias != QString("")){
        toJsonValue(QString("alias"), alias, obj, QString("QString"));
    }
    if(entry_type != nullptr && *entry_type != QString("")){
        toJsonValue(QString("entryType"), entry_type, obj, QString("QString"));
    }
    if(algorithm != nullptr && *algorithm != QString("")){
        toJsonValue(QString("algorithm"), algorithm, obj, QString("QString"));
    }
    if(format != nullptr && *format != QString("")){
        toJsonValue(QString("format"), format, obj, QString("QString"));
    }
    if(chain->size() > 0){
        toJsonArray((QList<void*>*)chain, obj, "chain", "OAIKeystoreChainItems");
    }

    return obj;
}

QString*
OAIKeystoreItems::getAlias() {
    return alias;
}
void
OAIKeystoreItems::setAlias(QString* alias) {
    this->alias = alias;
    this->m_alias_isSet = true;
}

QString*
OAIKeystoreItems::getEntryType() {
    return entry_type;
}
void
OAIKeystoreItems::setEntryType(QString* entry_type) {
    this->entry_type = entry_type;
    this->m_entry_type_isSet = true;
}

QString*
OAIKeystoreItems::getAlgorithm() {
    return algorithm;
}
void
OAIKeystoreItems::setAlgorithm(QString* algorithm) {
    this->algorithm = algorithm;
    this->m_algorithm_isSet = true;
}

QString*
OAIKeystoreItems::getFormat() {
    return format;
}
void
OAIKeystoreItems::setFormat(QString* format) {
    this->format = format;
    this->m_format_isSet = true;
}

QList<OAIKeystoreChainItems*>*
OAIKeystoreItems::getChain() {
    return chain;
}
void
OAIKeystoreItems::setChain(QList<OAIKeystoreChainItems*>* chain) {
    this->chain = chain;
    this->m_chain_isSet = true;
}


bool
OAIKeystoreItems::isSet(){
    bool isObjectUpdated = false;
    do{
        if(alias != nullptr && *alias != QString("")){ isObjectUpdated = true; break;}
        if(entry_type != nullptr && *entry_type != QString("")){ isObjectUpdated = true; break;}
        if(algorithm != nullptr && *algorithm != QString("")){ isObjectUpdated = true; break;}
        if(format != nullptr && *format != QString("")){ isObjectUpdated = true; break;}
        if(chain->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

