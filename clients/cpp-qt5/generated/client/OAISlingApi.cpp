/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlingApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISlingApi::OAISlingApi() {}

OAISlingApi::~OAISlingApi() {}

OAISlingApi::OAISlingApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAISlingApi::deleteAgent(QString* runmode, QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/replication/agents.{runmode}/{name}");

    QString runmodePathParam("{"); runmodePathParam.append("runmode").append("}");
    fullPath.replace(runmodePathParam, stringValue(runmode));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::deleteAgentCallback);

    worker->execute(&input);
}

void
OAISlingApi::deleteAgentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteAgentSignal();
    } else {
        emit deleteAgentSignalE(error_type, error_str);
        emit deleteAgentSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::deleteNode(QString* path, QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{path}/{name}");

    QString pathPathParam("{"); pathPathParam.append("path").append("}");
    fullPath.replace(pathPathParam, stringValue(path));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::deleteNodeCallback);

    worker->execute(&input);
}

void
OAISlingApi::deleteNodeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteNodeSignal();
    } else {
        emit deleteNodeSignalE(error_type, error_str);
        emit deleteNodeSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getAgent(QString* runmode, QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/replication/agents.{runmode}/{name}");

    QString runmodePathParam("{"); runmodePathParam.append("runmode").append("}");
    fullPath.replace(runmodePathParam, stringValue(runmode));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getAgentCallback);

    worker->execute(&input);
}

void
OAISlingApi::getAgentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAgentSignal();
    } else {
        emit getAgentSignalE(error_type, error_str);
        emit getAgentSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getAgents(QString* runmode) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/replication/agents.{runmode}.-1.json");

    QString runmodePathParam("{"); runmodePathParam.append("runmode").append("}");
    fullPath.replace(runmodePathParam, stringValue(runmode));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getAgentsCallback);

    worker->execute(&input);
}

void
OAISlingApi::getAgentsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAgentsSignal(output);
    } else {
        emit getAgentsSignalE(output, error_type, error_str);
        emit getAgentsSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getAuthorizableKeystore(QString* intermediate_path, QString* authorizable_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{intermediatePath}/{authorizableId}.ks.json");

    QString intermediate_pathPathParam("{"); intermediate_pathPathParam.append("intermediatePath").append("}");
    fullPath.replace(intermediate_pathPathParam, stringValue(intermediate_path));
    QString authorizable_idPathParam("{"); authorizable_idPathParam.append("authorizableId").append("}");
    fullPath.replace(authorizable_idPathParam, stringValue(authorizable_id));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getAuthorizableKeystoreCallback);

    worker->execute(&input);
}

void
OAISlingApi::getAuthorizableKeystoreCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIKeystoreInfo* output = static_cast<OAIKeystoreInfo*>(create(json, QString("OAIKeystoreInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIKeystoreInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAuthorizableKeystoreSignal(output);
    } else {
        emit getAuthorizableKeystoreSignalE(output, error_type, error_str);
        emit getAuthorizableKeystoreSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getKeystore(QString* intermediate_path, QString* authorizable_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{intermediatePath}/{authorizableId}/keystore/store.p12");

    QString intermediate_pathPathParam("{"); intermediate_pathPathParam.append("intermediatePath").append("}");
    fullPath.replace(intermediate_pathPathParam, stringValue(intermediate_path));
    QString authorizable_idPathParam("{"); authorizable_idPathParam.append("authorizableId").append("}");
    fullPath.replace(authorizable_idPathParam, stringValue(authorizable_id));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getKeystoreCallback);

    worker->execute(&input);
}

void
OAISlingApi::getKeystoreCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIHttpRequestInputFileElement* output = static_cast<OAIHttpRequestInputFileElement*>(create(json, QString("OAIHttpRequestInputFileElement")));
    auto wrapper = new OAIQObjectWrapper<OAIHttpRequestInputFileElement*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getKeystoreSignal(output);
    } else {
        emit getKeystoreSignalE(output, error_type, error_str);
        emit getKeystoreSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getNode(QString* path, QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{path}/{name}");

    QString pathPathParam("{"); pathPathParam.append("path").append("}");
    fullPath.replace(pathPathParam, stringValue(path));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getNodeCallback);

    worker->execute(&input);
}

void
OAISlingApi::getNodeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getNodeSignal();
    } else {
        emit getNodeSignalE(error_type, error_str);
        emit getNodeSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getPackage(QString* group, QString* name, QString* version) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/packages/{group}/{name}-{version}.zip");

    QString groupPathParam("{"); groupPathParam.append("group").append("}");
    fullPath.replace(groupPathParam, stringValue(group));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));
    QString versionPathParam("{"); versionPathParam.append("version").append("}");
    fullPath.replace(versionPathParam, stringValue(version));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getPackageCallback);

    worker->execute(&input);
}

void
OAISlingApi::getPackageCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIHttpRequestInputFileElement* output = static_cast<OAIHttpRequestInputFileElement*>(create(json, QString("OAIHttpRequestInputFileElement")));
    auto wrapper = new OAIQObjectWrapper<OAIHttpRequestInputFileElement*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPackageSignal(output);
    } else {
        emit getPackageSignalE(output, error_type, error_str);
        emit getPackageSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getPackageFilter(QString* group, QString* name, QString* version) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json");

    QString groupPathParam("{"); groupPathParam.append("group").append("}");
    fullPath.replace(groupPathParam, stringValue(group));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));
    QString versionPathParam("{"); versionPathParam.append("version").append("}");
    fullPath.replace(versionPathParam, stringValue(version));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getPackageFilterCallback);

    worker->execute(&input);
}

void
OAISlingApi::getPackageFilterCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPackageFilterSignal(output);
    } else {
        emit getPackageFilterSignalE(output, error_type, error_str);
        emit getPackageFilterSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getQuery(QString* path, OAINumber* p_limit, QString* _1_property, QString* _1_property_value) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bin/querybuilder.json");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("path"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(path)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("p.limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(p_limit)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("1_property"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_1_property)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("1_property.value"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_1_property_value)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getQueryCallback);

    worker->execute(&input);
}

void
OAISlingApi::getQueryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getQuerySignal(output);
    } else {
        emit getQuerySignalE(output, error_type, error_str);
        emit getQuerySignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getTruststore() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/truststore/truststore.p12");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getTruststoreCallback);

    worker->execute(&input);
}

void
OAISlingApi::getTruststoreCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIHttpRequestInputFileElement* output = static_cast<OAIHttpRequestInputFileElement*>(create(json, QString("OAIHttpRequestInputFileElement")));
    auto wrapper = new OAIQObjectWrapper<OAIHttpRequestInputFileElement*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getTruststoreSignal(output);
    } else {
        emit getTruststoreSignalE(output, error_type, error_str);
        emit getTruststoreSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::getTruststoreInfo() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/libs/granite/security/truststore.json");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::getTruststoreInfoCallback);

    worker->execute(&input);
}

void
OAISlingApi::getTruststoreInfoCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAITruststoreInfo* output = static_cast<OAITruststoreInfo*>(create(json, QString("OAITruststoreInfo")));
    auto wrapper = new OAIQObjectWrapper<OAITruststoreInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getTruststoreInfoSignal(output);
    } else {
        emit getTruststoreInfoSignalE(output, error_type, error_str);
        emit getTruststoreInfoSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postAgent(QString* runmode, QString* name, bool jcrcontentcqdistribute, QString* jcrcontentcqdistribute_type_hint, QString* jcrcontentcqname, QString* jcrcontentcqtemplate, bool jcrcontentenabled, QString* jcrcontentjcrdescription, QString* jcrcontentjcrlast_modified, QString* jcrcontentjcrlast_modified_by, QString* jcrcontentjcrmixin_types, QString* jcrcontentjcrtitle, QString* jcrcontentlog_level, bool jcrcontentno_status_update, bool jcrcontentno_versioning, OAINumber* jcrcontentprotocol_connect_timeout, bool jcrcontentprotocol_http_connection_closed, QString* jcrcontentprotocol_http_expired, QList<QString*>* jcrcontentprotocol_http_headers, QString* jcrcontentprotocol_http_headers_type_hint, QString* jcrcontentprotocol_http_method, bool jcrcontentprotocol_https_relaxed, QString* jcrcontentprotocol_interface, OAINumber* jcrcontentprotocol_socket_timeout, QString* jcrcontentprotocol_version, QString* jcrcontentproxy_ntlm_domain, QString* jcrcontentproxy_ntlm_host, QString* jcrcontentproxy_host, QString* jcrcontentproxy_password, OAINumber* jcrcontentproxy_port, QString* jcrcontentproxy_user, OAINumber* jcrcontentqueue_batch_max_size, QString* jcrcontentqueue_batch_mode, OAINumber* jcrcontentqueue_batch_wait_time, QString* jcrcontentretry_delay, bool jcrcontentreverse_replication, QString* jcrcontentserialization_type, QString* jcrcontentslingresource_type, QString* jcrcontentssl, QString* jcrcontenttransport_ntlm_domain, QString* jcrcontenttransport_ntlm_host, QString* jcrcontenttransport_password, QString* jcrcontenttransport_uri, QString* jcrcontenttransport_user, bool jcrcontenttrigger_distribute, bool jcrcontenttrigger_modified, bool jcrcontenttrigger_on_off_time, bool jcrcontenttrigger_receive, bool jcrcontenttrigger_specific, QString* jcrcontentuser_id, QString* jcrprimary_type, QString* operation) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/replication/agents.{runmode}/{name}");

    QString runmodePathParam("{"); runmodePathParam.append("runmode").append("}");
    fullPath.replace(runmodePathParam, stringValue(runmode));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/cq:distribute"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentcqdistribute)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/cq:distribute@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentcqdistribute_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/cq:name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentcqname)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/cq:template"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentcqtemplate)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/enabled"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentenabled)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/jcr:description"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentjcrdescription)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/jcr:lastModified"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentjcrlast_modified)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/jcr:lastModifiedBy"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentjcrlast_modified_by)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/jcr:mixinTypes"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentjcrmixin_types)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/jcr:title"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentjcrtitle)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/logLevel"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentlog_level)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/noStatusUpdate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentno_status_update)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/noVersioning"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentno_versioning)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolConnectTimeout"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_connect_timeout)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolHTTPConnectionClosed"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_http_connection_closed)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolHTTPExpired"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_http_expired)));



    if (jcrcontentprotocol_http_headers->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *jcrcontentprotocol_http_headers) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("jcr:content/protocolHTTPHeaders=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("jcr:content/protocolHTTPHeaders=");
        qint32 count = 0;
        foreach(QString* t, *jcrcontentprotocol_http_headers) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("jcr:content/protocolHTTPHeaders=");
        qint32 count = 0;
        foreach(QString* t, *jcrcontentprotocol_http_headers) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolHTTPHeaders@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_http_headers_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolHTTPMethod"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_http_method)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolHTTPSRelaxed"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_https_relaxed)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolInterface"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_interface)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolSocketTimeout"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_socket_timeout)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/protocolVersion"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentprotocol_version)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/proxyNTLMDomain"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentproxy_ntlm_domain)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/proxyNTLMHost"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentproxy_ntlm_host)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/proxyHost"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentproxy_host)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/proxyPassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentproxy_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/proxyPort"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentproxy_port)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/proxyUser"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentproxy_user)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/queueBatchMaxSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentqueue_batch_max_size)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/queueBatchMode"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentqueue_batch_mode)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/queueBatchWaitTime"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentqueue_batch_wait_time)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/retryDelay"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentretry_delay)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/reverseReplication"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentreverse_replication)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/serializationType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentserialization_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/sling:resourceType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentslingresource_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/ssl"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentssl)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/transportNTLMDomain"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttransport_ntlm_domain)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/transportNTLMHost"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttransport_ntlm_host)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/transportPassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttransport_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/transportUri"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttransport_uri)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/transportUser"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttransport_user)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/triggerDistribute"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttrigger_distribute)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/triggerModified"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttrigger_modified)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/triggerOnOffTime"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttrigger_on_off_time)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/triggerReceive"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttrigger_receive)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/triggerSpecific"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontenttrigger_specific)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:content/userId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrcontentuser_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:primaryType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrprimary_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding(":operation"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(operation)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postAgentCallback);

    worker->execute(&input);
}

void
OAISlingApi::postAgentCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postAgentSignal();
    } else {
        emit postAgentSignalE(error_type, error_str);
        emit postAgentSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postAuthorizableKeystore(QString* intermediate_path, QString* authorizable_id, QString* operation, QString* current_password, QString* new_password, QString* re_password, QString* key_password, QString* key_store_pass, QString* alias, QString* new_alias, QString* remove_alias, OAIHttpRequestInputFileElement* cert_chain, OAIHttpRequestInputFileElement* pk, OAIHttpRequestInputFileElement* key_store) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{intermediatePath}/{authorizableId}.ks.html");

    QString intermediate_pathPathParam("{"); intermediate_pathPathParam.append("intermediatePath").append("}");
    fullPath.replace(intermediate_pathPathParam, stringValue(intermediate_path));
    QString authorizable_idPathParam("{"); authorizable_idPathParam.append("authorizableId").append("}");
    fullPath.replace(authorizable_idPathParam, stringValue(authorizable_id));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding(":operation"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(operation)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("currentPassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(current_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("newPassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(new_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rePassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(re_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("keyPassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("keyStorePass"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key_store_pass)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("alias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(alias)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("newAlias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(new_alias)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("removeAlias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(remove_alias)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (cert_chain != nullptr) {
        input.add_file("cert-chain", (*cert_chain).local_filename, (*cert_chain).request_filename, (*cert_chain).mime_type);
    }
    if (pk != nullptr) {
        input.add_file("pk", (*pk).local_filename, (*pk).request_filename, (*pk).mime_type);
    }
    if (key_store != nullptr) {
        input.add_file("keyStore", (*key_store).local_filename, (*key_store).request_filename, (*key_store).mime_type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postAuthorizableKeystoreCallback);

    worker->execute(&input);
}

void
OAISlingApi::postAuthorizableKeystoreCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIKeystoreInfo* output = static_cast<OAIKeystoreInfo*>(create(json, QString("OAIKeystoreInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIKeystoreInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postAuthorizableKeystoreSignal(output);
    } else {
        emit postAuthorizableKeystoreSignalE(output, error_type, error_str);
        emit postAuthorizableKeystoreSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postAuthorizables(QString* authorizable_id, QString* intermediate_path, QString* create_user, QString* create_group, QString* reppassword, QString* profilegiven_name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/libs/granite/security/post/authorizables");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("authorizableId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(authorizable_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("intermediatePath"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(intermediate_path)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("createUser"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(create_user)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("createGroup"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(create_group)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rep:password"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(reppassword)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("profile/givenName"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(profilegiven_name)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postAuthorizablesCallback);

    worker->execute(&input);
}

void
OAISlingApi::postAuthorizablesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postAuthorizablesSignal(output);
    } else {
        emit postAuthorizablesSignalE(output, error_type, error_str);
        emit postAuthorizablesSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postConfigAdobeGraniteSamlAuthenticationHandler(QString* key_store_password, QString* key_store_password_type_hint, qint32 service_ranking, QString* service_ranking_type_hint, bool idp_http_redirect, QString* idp_http_redirect_type_hint, bool create_user, QString* create_user_type_hint, QString* default_redirect_url, QString* default_redirect_url_type_hint, QString* user_id_attribute, QString* user_id_attribute_type_hint, QList<QString*>* default_groups, QString* default_groups_type_hint, QString* idp_cert_alias, QString* idp_cert_alias_type_hint, bool add_group_memberships, QString* add_group_memberships_type_hint, QList<QString*>* path, QString* path_type_hint, QList<QString*>* synchronize_attributes, QString* synchronize_attributes_type_hint, qint32 clock_tolerance, QString* clock_tolerance_type_hint, QString* group_membership_attribute, QString* group_membership_attribute_type_hint, QString* idp_url, QString* idp_url_type_hint, QString* logout_url, QString* logout_url_type_hint, QString* service_provider_entity_id, QString* service_provider_entity_id_type_hint, QString* assertion_consumer_service_url, QString* assertion_consumer_service_url_type_hint, bool handle_logout, QString* handle_logout_type_hint, QString* sp_private_key_alias, QString* sp_private_key_alias_type_hint, bool use_encryption, QString* use_encryption_type_hint, QString* name_id_format, QString* name_id_format_type_hint, QString* digest_method, QString* digest_method_type_hint, QString* signature_method, QString* signature_method_type_hint, QString* user_intermediate_path, QString* user_intermediate_path_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("keyStorePassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key_store_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("keyStorePassword@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key_store_password_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("service.ranking"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(service_ranking)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("service.ranking@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(service_ranking_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpHttpRedirect"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_http_redirect)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpHttpRedirect@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_http_redirect_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("createUser"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(create_user)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("createUser@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(create_user_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultRedirectUrl"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(default_redirect_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultRedirectUrl@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(default_redirect_url_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userIDAttribute"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(user_id_attribute)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userIDAttribute@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(user_id_attribute_type_hint)));



    if (default_groups->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *default_groups) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("defaultGroups=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("defaultGroups=");
        qint32 count = 0;
        foreach(QString* t, *default_groups) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("defaultGroups=");
        qint32 count = 0;
        foreach(QString* t, *default_groups) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("defaultGroups@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(default_groups_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpCertAlias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_cert_alias)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpCertAlias@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_cert_alias_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addGroupMemberships"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(add_group_memberships)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addGroupMemberships@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(add_group_memberships_type_hint)));



    if (path->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *path) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("path=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("path=");
        qint32 count = 0;
        foreach(QString* t, *path) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("path=");
        qint32 count = 0;
        foreach(QString* t, *path) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("path@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(path_type_hint)));



    if (synchronize_attributes->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *synchronize_attributes) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("synchronizeAttributes=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("synchronizeAttributes=");
        qint32 count = 0;
        foreach(QString* t, *synchronize_attributes) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("synchronizeAttributes=");
        qint32 count = 0;
        foreach(QString* t, *synchronize_attributes) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("synchronizeAttributes@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(synchronize_attributes_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("clockTolerance"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(clock_tolerance)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("clockTolerance@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(clock_tolerance_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("groupMembershipAttribute"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(group_membership_attribute)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("groupMembershipAttribute@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(group_membership_attribute_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpUrl"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("idpUrl@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(idp_url_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("logoutUrl"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(logout_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("logoutUrl@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(logout_url_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("serviceProviderEntityId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(service_provider_entity_id)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("serviceProviderEntityId@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(service_provider_entity_id_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("assertionConsumerServiceURL"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(assertion_consumer_service_url)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("assertionConsumerServiceURL@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(assertion_consumer_service_url_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("handleLogout"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(handle_logout)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("handleLogout@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(handle_logout_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("spPrivateKeyAlias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sp_private_key_alias)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("spPrivateKeyAlias@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(sp_private_key_alias_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("useEncryption"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(use_encryption)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("useEncryption@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(use_encryption_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("nameIdFormat"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(name_id_format)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("nameIdFormat@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(name_id_format_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("digestMethod"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(digest_method)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("digestMethod@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(digest_method_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("signatureMethod"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(signature_method)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("signatureMethod@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(signature_method_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userIntermediatePath"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(user_intermediate_path)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("userIntermediatePath@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(user_intermediate_path_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postConfigAdobeGraniteSamlAuthenticationHandlerCallback);

    worker->execute(&input);
}

void
OAISlingApi::postConfigAdobeGraniteSamlAuthenticationHandlerCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigAdobeGraniteSamlAuthenticationHandlerSignal();
    } else {
        emit postConfigAdobeGraniteSamlAuthenticationHandlerSignalE(error_type, error_str);
        emit postConfigAdobeGraniteSamlAuthenticationHandlerSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postConfigApacheFelixJettyBasedHttpService(bool org_apache_felix_https_nio, QString* org_apache_felix_https_nio_type_hint, QString* org_apache_felix_https_keystore, QString* org_apache_felix_https_keystore_type_hint, QString* org_apache_felix_https_keystore_password, QString* org_apache_felix_https_keystore_password_type_hint, QString* org_apache_felix_https_keystore_key, QString* org_apache_felix_https_keystore_key_type_hint, QString* org_apache_felix_https_keystore_key_password, QString* org_apache_felix_https_keystore_key_password_type_hint, QString* org_apache_felix_https_truststore, QString* org_apache_felix_https_truststore_type_hint, QString* org_apache_felix_https_truststore_password, QString* org_apache_felix_https_truststore_password_type_hint, QString* org_apache_felix_https_clientcertificate, QString* org_apache_felix_https_clientcertificate_type_hint, bool org_apache_felix_https_enable, QString* org_apache_felix_https_enable_type_hint, QString* org_osgi_service_http_port_secure, QString* org_osgi_service_http_port_secure_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/org.apache.felix.http");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.nio"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_nio)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.nio@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_nio_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore.password"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore.password@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore_password_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore.key"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore_key)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore.key@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore_key_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore.key.password"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore_key_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.keystore.key.password@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_keystore_key_password_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.truststore"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_truststore)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.truststore@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_truststore_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.truststore.password"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_truststore_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.truststore.password@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_truststore_password_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.clientcertificate"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_clientcertificate)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.clientcertificate@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_clientcertificate_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.enable"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_enable)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.apache.felix.https.enable@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_apache_felix_https_enable_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.osgi.service.http.port.secure"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_osgi_service_http_port_secure)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("org.osgi.service.http.port.secure@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(org_osgi_service_http_port_secure_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postConfigApacheFelixJettyBasedHttpServiceCallback);

    worker->execute(&input);
}

void
OAISlingApi::postConfigApacheFelixJettyBasedHttpServiceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigApacheFelixJettyBasedHttpServiceSignal();
    } else {
        emit postConfigApacheFelixJettyBasedHttpServiceSignalE(error_type, error_str);
        emit postConfigApacheFelixJettyBasedHttpServiceSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postConfigApacheHttpComponentsProxyConfiguration(QString* proxy_host, QString* proxy_host_type_hint, qint32 proxy_port, QString* proxy_port_type_hint, QList<QString*>* proxy_exceptions, QString* proxy_exceptions_type_hint, bool proxy_enabled, QString* proxy_enabled_type_hint, QString* proxy_user, QString* proxy_user_type_hint, QString* proxy_password, QString* proxy_password_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/org.apache.http.proxyconfigurator.config");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.host"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_host)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.host@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_host_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.port"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_port)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.port@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_port_type_hint)));



    if (proxy_exceptions->size() > 0) {
      if (QString("multi").indexOf("multi") == 0) {
        foreach(QString* t, *proxy_exceptions) {
          if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
          else
            fullPath.append("?");
          fullPath.append("proxy.exceptions=").append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("ssv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("proxy.exceptions=");
        qint32 count = 0;
        foreach(QString* t, *proxy_exceptions) {
          if (count > 0) {
            fullPath.append(" ");
          }
          fullPath.append(stringValue(t));
        }
      }
      else if (QString("multi").indexOf("tsv") == 0) {
        if (fullPath.indexOf("?") > 0)
          fullPath.append("&");
        else
          fullPath.append("?");
        fullPath.append("proxy.exceptions=");
        qint32 count = 0;
        foreach(QString* t, *proxy_exceptions) {
          if (count > 0) {
            fullPath.append("\t");
          }
          fullPath.append(stringValue(t));
        }
      }
    }

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.exceptions@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_exceptions_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.enabled"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_enabled)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.enabled@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_enabled_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.user"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_user)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.user@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_user_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.password"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("proxy.password@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(proxy_password_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postConfigApacheHttpComponentsProxyConfigurationCallback);

    worker->execute(&input);
}

void
OAISlingApi::postConfigApacheHttpComponentsProxyConfigurationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigApacheHttpComponentsProxyConfigurationSignal();
    } else {
        emit postConfigApacheHttpComponentsProxyConfigurationSignalE(error_type, error_str);
        emit postConfigApacheHttpComponentsProxyConfigurationSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postConfigApacheSlingDavExServlet(QString* alias, QString* alias_type_hint, bool dav_create_absolute_uri, QString* dav_create_absolute_uri_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("alias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(alias)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("alias@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(alias_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("dav.create-absolute-uri"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(dav_create_absolute_uri)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("dav.create-absolute-uri@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(dav_create_absolute_uri_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postConfigApacheSlingDavExServletCallback);

    worker->execute(&input);
}

void
OAISlingApi::postConfigApacheSlingDavExServletCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigApacheSlingDavExServletSignal();
    } else {
        emit postConfigApacheSlingDavExServletSignalE(error_type, error_str);
        emit postConfigApacheSlingDavExServletSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postConfigApacheSlingGetServlet(QString* json_maximumresults, QString* json_maximumresults_type_hint, bool enable_html, QString* enable_html_type_hint, bool enable_txt, QString* enable_txt_type_hint, bool enable_xml, QString* enable_xml_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("json.maximumresults"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(json_maximumresults)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("json.maximumresults@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(json_maximumresults_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("enable.html"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(enable_html)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("enable.html@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(enable_html_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("enable.txt"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(enable_txt)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("enable.txt@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(enable_txt_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("enable.xml"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(enable_xml)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("enable.xml@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(enable_xml_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postConfigApacheSlingGetServletCallback);

    worker->execute(&input);
}

void
OAISlingApi::postConfigApacheSlingGetServletCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigApacheSlingGetServletSignal();
    } else {
        emit postConfigApacheSlingGetServletSignalE(error_type, error_str);
        emit postConfigApacheSlingGetServletSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postConfigApacheSlingReferrerFilter(bool allow_empty, QString* allow_empty_type_hint, QString* allow_hosts, QString* allow_hosts_type_hint, QString* allow_hosts_regexp, QString* allow_hosts_regexp_type_hint, QString* filter_methods, QString* filter_methods_type_hint) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/system/config/org.apache.sling.security.impl.ReferrerFilter");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allow.empty"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allow_empty)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allow.empty@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allow_empty_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allow.hosts"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allow_hosts)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allow.hosts@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allow_hosts_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allow.hosts.regexp"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allow_hosts_regexp)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("allow.hosts.regexp@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(allow_hosts_regexp_type_hint)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter.methods"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_methods)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter.methods@TypeHint"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(filter_methods_type_hint)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postConfigApacheSlingReferrerFilterCallback);

    worker->execute(&input);
}

void
OAISlingApi::postConfigApacheSlingReferrerFilterCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postConfigApacheSlingReferrerFilterSignal();
    } else {
        emit postConfigApacheSlingReferrerFilterSignalE(error_type, error_str);
        emit postConfigApacheSlingReferrerFilterSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postNode(QString* path, QString* name, QString* operation, QString* delete_authorizable, OAIHttpRequestInputFileElement* file) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{path}/{name}");

    QString pathPathParam("{"); pathPathParam.append("path").append("}");
    fullPath.replace(pathPathParam, stringValue(path));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding(":operation"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(operation)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("deleteAuthorizable"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(delete_authorizable)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (file != nullptr) {
        input.add_file("file", (*file).local_filename, (*file).request_filename, (*file).mime_type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postNodeCallback);

    worker->execute(&input);
}

void
OAISlingApi::postNodeCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postNodeSignal();
    } else {
        emit postNodeSignalE(error_type, error_str);
        emit postNodeSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postNodeRw(QString* path, QString* name, QString* add_members) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{path}/{name}.rw.html");

    QString pathPathParam("{"); pathPathParam.append("path").append("}");
    fullPath.replace(pathPathParam, stringValue(path));
    QString namePathParam("{"); namePathParam.append("name").append("}");
    fullPath.replace(namePathParam, stringValue(name));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addMembers"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(add_members)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postNodeRwCallback);

    worker->execute(&input);
}

void
OAISlingApi::postNodeRwCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postNodeRwSignal();
    } else {
        emit postNodeRwSignalE(error_type, error_str);
        emit postNodeRwSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postPath(QString* path, QString* jcrprimary_type, QString* name) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/{path}/");

    QString pathPathParam("{"); pathPathParam.append("path").append("}");
    fullPath.replace(pathPathParam, stringValue(path));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("jcr:primaryType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(jcrprimary_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding(":name"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(name)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postPathCallback);

    worker->execute(&input);
}

void
OAISlingApi::postPathCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postPathSignal();
    } else {
        emit postPathSignalE(error_type, error_str);
        emit postPathSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postQuery(QString* path, OAINumber* p_limit, QString* _1_property, QString* _1_property_value) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/bin/querybuilder.json");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("path"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(path)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("p.limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(p_limit)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("1_property"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_1_property)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("1_property.value"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_1_property_value)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postQueryCallback);

    worker->execute(&input);
}

void
OAISlingApi::postQueryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postQuerySignal(output);
    } else {
        emit postQuerySignalE(output, error_type, error_str);
        emit postQuerySignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postTreeActivation(bool ignoredeactivated, bool onlymodified, QString* path) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/replication/treeactivation.html");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("ignoredeactivated"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(ignoredeactivated)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("onlymodified"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(onlymodified)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("path"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(path)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postTreeActivationCallback);

    worker->execute(&input);
}

void
OAISlingApi::postTreeActivationCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postTreeActivationSignal();
    } else {
        emit postTreeActivationSignalE(error_type, error_str);
        emit postTreeActivationSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postTruststore(QString* operation, QString* new_password, QString* re_password, QString* key_store_type, QString* remove_alias, OAIHttpRequestInputFileElement* certificate) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/libs/granite/security/post/truststore");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding(":operation"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(operation)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("newPassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(new_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("rePassword"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(re_password)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("keyStoreType"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(key_store_type)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("removeAlias"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(remove_alias)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (certificate != nullptr) {
        input.add_file("certificate", (*certificate).local_filename, (*certificate).request_filename, (*certificate).mime_type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postTruststoreCallback);

    worker->execute(&input);
}

void
OAISlingApi::postTruststoreCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postTruststoreSignal(output);
    } else {
        emit postTruststoreSignalE(output, error_type, error_str);
        emit postTruststoreSignalEFull(worker, error_type, error_str);
    }
}

void
OAISlingApi::postTruststorePKCS12(OAIHttpRequestInputFileElement* truststore_p12) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/etc/truststore");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (truststore_p12 != nullptr) {
        input.add_file("truststore.p12", (*truststore_p12).local_filename, (*truststore_p12).request_filename, (*truststore_p12).mime_type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISlingApi::postTruststorePKCS12Callback);

    worker->execute(&input);
}

void
OAISlingApi::postTruststorePKCS12Callback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new OAIQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit postTruststorePKCS12Signal(output);
    } else {
        emit postTruststorePKCS12SignalE(output, error_type, error_str);
        emit postTruststorePKCS12SignalEFull(worker, error_type, error_str);
    }
}


}
