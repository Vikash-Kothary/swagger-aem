/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAISlingApi_H_
#define _OAI_OAISlingApi_H_

#include "OAIHttpRequest.h"

#include "OAIHttpRequest.h"
#include "OAIOAIKeystoreInfo.h"
#include "OAIOAINumber.h"
#include "OAIOAITruststoreInfo.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAISlingApi: public QObject {
    Q_OBJECT

public:
    OAISlingApi();
    OAISlingApi(QString host, QString basePath);
    ~OAISlingApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void deleteAgent(QString* runmode, QString* name);
    void deleteNode(QString* path, QString* name);
    void getAgent(QString* runmode, QString* name);
    void getAgents(QString* runmode);
    void getAuthorizableKeystore(QString* intermediate_path, QString* authorizable_id);
    void getKeystore(QString* intermediate_path, QString* authorizable_id);
    void getNode(QString* path, QString* name);
    void getPackage(QString* group, QString* name, QString* version);
    void getPackageFilter(QString* group, QString* name, QString* version);
    void getQuery(QString* path, OAINumber* p_limit, QString* _1_property, QString* _1_property_value);
    void getTruststore();
    void getTruststoreInfo();
    void postAgent(QString* runmode, QString* name, bool jcrcontentcqdistribute, QString* jcrcontentcqdistribute_type_hint, QString* jcrcontentcqname, QString* jcrcontentcqtemplate, bool jcrcontentenabled, QString* jcrcontentjcrdescription, QString* jcrcontentjcrlast_modified, QString* jcrcontentjcrlast_modified_by, QString* jcrcontentjcrmixin_types, QString* jcrcontentjcrtitle, QString* jcrcontentlog_level, bool jcrcontentno_status_update, bool jcrcontentno_versioning, OAINumber* jcrcontentprotocol_connect_timeout, bool jcrcontentprotocol_http_connection_closed, QString* jcrcontentprotocol_http_expired, QList<QString*>* jcrcontentprotocol_http_headers, QString* jcrcontentprotocol_http_headers_type_hint, QString* jcrcontentprotocol_http_method, bool jcrcontentprotocol_https_relaxed, QString* jcrcontentprotocol_interface, OAINumber* jcrcontentprotocol_socket_timeout, QString* jcrcontentprotocol_version, QString* jcrcontentproxy_ntlm_domain, QString* jcrcontentproxy_ntlm_host, QString* jcrcontentproxy_host, QString* jcrcontentproxy_password, OAINumber* jcrcontentproxy_port, QString* jcrcontentproxy_user, OAINumber* jcrcontentqueue_batch_max_size, QString* jcrcontentqueue_batch_mode, OAINumber* jcrcontentqueue_batch_wait_time, QString* jcrcontentretry_delay, bool jcrcontentreverse_replication, QString* jcrcontentserialization_type, QString* jcrcontentslingresource_type, QString* jcrcontentssl, QString* jcrcontenttransport_ntlm_domain, QString* jcrcontenttransport_ntlm_host, QString* jcrcontenttransport_password, QString* jcrcontenttransport_uri, QString* jcrcontenttransport_user, bool jcrcontenttrigger_distribute, bool jcrcontenttrigger_modified, bool jcrcontenttrigger_on_off_time, bool jcrcontenttrigger_receive, bool jcrcontenttrigger_specific, QString* jcrcontentuser_id, QString* jcrprimary_type, QString* operation);
    void postAuthorizableKeystore(QString* intermediate_path, QString* authorizable_id, QString* operation, QString* current_password, QString* new_password, QString* re_password, QString* key_password, QString* key_store_pass, QString* alias, QString* new_alias, QString* remove_alias, OAIHttpRequestInputFileElement* cert_chain, OAIHttpRequestInputFileElement* pk, OAIHttpRequestInputFileElement* key_store);
    void postAuthorizables(QString* authorizable_id, QString* intermediate_path, QString* create_user, QString* create_group, QString* reppassword, QString* profilegiven_name);
    void postConfigAdobeGraniteSamlAuthenticationHandler(QString* key_store_password, QString* key_store_password_type_hint, qint32 service_ranking, QString* service_ranking_type_hint, bool idp_http_redirect, QString* idp_http_redirect_type_hint, bool create_user, QString* create_user_type_hint, QString* default_redirect_url, QString* default_redirect_url_type_hint, QString* user_id_attribute, QString* user_id_attribute_type_hint, QList<QString*>* default_groups, QString* default_groups_type_hint, QString* idp_cert_alias, QString* idp_cert_alias_type_hint, bool add_group_memberships, QString* add_group_memberships_type_hint, QList<QString*>* path, QString* path_type_hint, QList<QString*>* synchronize_attributes, QString* synchronize_attributes_type_hint, qint32 clock_tolerance, QString* clock_tolerance_type_hint, QString* group_membership_attribute, QString* group_membership_attribute_type_hint, QString* idp_url, QString* idp_url_type_hint, QString* logout_url, QString* logout_url_type_hint, QString* service_provider_entity_id, QString* service_provider_entity_id_type_hint, QString* assertion_consumer_service_url, QString* assertion_consumer_service_url_type_hint, bool handle_logout, QString* handle_logout_type_hint, QString* sp_private_key_alias, QString* sp_private_key_alias_type_hint, bool use_encryption, QString* use_encryption_type_hint, QString* name_id_format, QString* name_id_format_type_hint, QString* digest_method, QString* digest_method_type_hint, QString* signature_method, QString* signature_method_type_hint, QString* user_intermediate_path, QString* user_intermediate_path_type_hint);
    void postConfigApacheFelixJettyBasedHttpService(bool org_apache_felix_https_nio, QString* org_apache_felix_https_nio_type_hint, QString* org_apache_felix_https_keystore, QString* org_apache_felix_https_keystore_type_hint, QString* org_apache_felix_https_keystore_password, QString* org_apache_felix_https_keystore_password_type_hint, QString* org_apache_felix_https_keystore_key, QString* org_apache_felix_https_keystore_key_type_hint, QString* org_apache_felix_https_keystore_key_password, QString* org_apache_felix_https_keystore_key_password_type_hint, QString* org_apache_felix_https_truststore, QString* org_apache_felix_https_truststore_type_hint, QString* org_apache_felix_https_truststore_password, QString* org_apache_felix_https_truststore_password_type_hint, QString* org_apache_felix_https_clientcertificate, QString* org_apache_felix_https_clientcertificate_type_hint, bool org_apache_felix_https_enable, QString* org_apache_felix_https_enable_type_hint, QString* org_osgi_service_http_port_secure, QString* org_osgi_service_http_port_secure_type_hint);
    void postConfigApacheHttpComponentsProxyConfiguration(QString* proxy_host, QString* proxy_host_type_hint, qint32 proxy_port, QString* proxy_port_type_hint, QList<QString*>* proxy_exceptions, QString* proxy_exceptions_type_hint, bool proxy_enabled, QString* proxy_enabled_type_hint, QString* proxy_user, QString* proxy_user_type_hint, QString* proxy_password, QString* proxy_password_type_hint);
    void postConfigApacheSlingDavExServlet(QString* alias, QString* alias_type_hint, bool dav_create_absolute_uri, QString* dav_create_absolute_uri_type_hint);
    void postConfigApacheSlingGetServlet(QString* json_maximumresults, QString* json_maximumresults_type_hint, bool enable_html, QString* enable_html_type_hint, bool enable_txt, QString* enable_txt_type_hint, bool enable_xml, QString* enable_xml_type_hint);
    void postConfigApacheSlingReferrerFilter(bool allow_empty, QString* allow_empty_type_hint, QString* allow_hosts, QString* allow_hosts_type_hint, QString* allow_hosts_regexp, QString* allow_hosts_regexp_type_hint, QString* filter_methods, QString* filter_methods_type_hint);
    void postNode(QString* path, QString* name, QString* operation, QString* delete_authorizable, OAIHttpRequestInputFileElement* file);
    void postNodeRw(QString* path, QString* name, QString* add_members);
    void postPath(QString* path, QString* jcrprimary_type, QString* name);
    void postQuery(QString* path, OAINumber* p_limit, QString* _1_property, QString* _1_property_value);
    void postTreeActivation(bool ignoredeactivated, bool onlymodified, QString* path);
    void postTruststore(QString* operation, QString* new_password, QString* re_password, QString* key_store_type, QString* remove_alias, OAIHttpRequestInputFileElement* certificate);
    void postTruststorePKCS12(OAIHttpRequestInputFileElement* truststore_p12);
    
private:
    void deleteAgentCallback (OAIHttpRequestWorker * worker);
    void deleteNodeCallback (OAIHttpRequestWorker * worker);
    void getAgentCallback (OAIHttpRequestWorker * worker);
    void getAgentsCallback (OAIHttpRequestWorker * worker);
    void getAuthorizableKeystoreCallback (OAIHttpRequestWorker * worker);
    void getKeystoreCallback (OAIHttpRequestWorker * worker);
    void getNodeCallback (OAIHttpRequestWorker * worker);
    void getPackageCallback (OAIHttpRequestWorker * worker);
    void getPackageFilterCallback (OAIHttpRequestWorker * worker);
    void getQueryCallback (OAIHttpRequestWorker * worker);
    void getTruststoreCallback (OAIHttpRequestWorker * worker);
    void getTruststoreInfoCallback (OAIHttpRequestWorker * worker);
    void postAgentCallback (OAIHttpRequestWorker * worker);
    void postAuthorizableKeystoreCallback (OAIHttpRequestWorker * worker);
    void postAuthorizablesCallback (OAIHttpRequestWorker * worker);
    void postConfigAdobeGraniteSamlAuthenticationHandlerCallback (OAIHttpRequestWorker * worker);
    void postConfigApacheFelixJettyBasedHttpServiceCallback (OAIHttpRequestWorker * worker);
    void postConfigApacheHttpComponentsProxyConfigurationCallback (OAIHttpRequestWorker * worker);
    void postConfigApacheSlingDavExServletCallback (OAIHttpRequestWorker * worker);
    void postConfigApacheSlingGetServletCallback (OAIHttpRequestWorker * worker);
    void postConfigApacheSlingReferrerFilterCallback (OAIHttpRequestWorker * worker);
    void postNodeCallback (OAIHttpRequestWorker * worker);
    void postNodeRwCallback (OAIHttpRequestWorker * worker);
    void postPathCallback (OAIHttpRequestWorker * worker);
    void postQueryCallback (OAIHttpRequestWorker * worker);
    void postTreeActivationCallback (OAIHttpRequestWorker * worker);
    void postTruststoreCallback (OAIHttpRequestWorker * worker);
    void postTruststorePKCS12Callback (OAIHttpRequestWorker * worker);
    
signals:
    void deleteAgentSignal();
    void deleteNodeSignal();
    void getAgentSignal();
    void getAgentsSignal(QString* summary);
    void getAuthorizableKeystoreSignal(OAIKeystoreInfo* summary);
    void getKeystoreSignal(OAIHttpRequestInputFileElement* summary);
    void getNodeSignal();
    void getPackageSignal(OAIHttpRequestInputFileElement* summary);
    void getPackageFilterSignal(QString* summary);
    void getQuerySignal(QString* summary);
    void getTruststoreSignal(OAIHttpRequestInputFileElement* summary);
    void getTruststoreInfoSignal(OAITruststoreInfo* summary);
    void postAgentSignal();
    void postAuthorizableKeystoreSignal(OAIKeystoreInfo* summary);
    void postAuthorizablesSignal(QString* summary);
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignal();
    void postConfigApacheFelixJettyBasedHttpServiceSignal();
    void postConfigApacheHttpComponentsProxyConfigurationSignal();
    void postConfigApacheSlingDavExServletSignal();
    void postConfigApacheSlingGetServletSignal();
    void postConfigApacheSlingReferrerFilterSignal();
    void postNodeSignal();
    void postNodeRwSignal();
    void postPathSignal();
    void postQuerySignal(QString* summary);
    void postTreeActivationSignal();
    void postTruststoreSignal(QString* summary);
    void postTruststorePKCS12Signal(QString* summary);
    
    void deleteAgentSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteNodeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getAgentSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getAgentsSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAuthorizableKeystoreSignalE(OAIKeystoreInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getKeystoreSignalE(OAIHttpRequestInputFileElement* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getNodeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getPackageSignalE(OAIHttpRequestInputFileElement* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPackageFilterSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getQuerySignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTruststoreSignalE(OAIHttpRequestInputFileElement* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTruststoreInfoSignalE(OAITruststoreInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postAgentSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postAuthorizableKeystoreSignalE(OAIKeystoreInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postAuthorizablesSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheFelixJettyBasedHttpServiceSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheHttpComponentsProxyConfigurationSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheSlingDavExServletSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheSlingGetServletSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheSlingReferrerFilterSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postNodeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postNodeRwSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postPathSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postQuerySignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postTreeActivationSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postTruststoreSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postTruststorePKCS12SignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void deleteAgentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteNodeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAgentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAgentsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAuthorizableKeystoreSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getKeystoreSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getNodeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPackageSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPackageFilterSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getQuerySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTruststoreSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getTruststoreInfoSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postAgentSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postAuthorizableKeystoreSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postAuthorizablesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheFelixJettyBasedHttpServiceSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheHttpComponentsProxyConfigurationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheSlingDavExServletSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheSlingGetServletSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postConfigApacheSlingReferrerFilterSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postNodeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postNodeRwSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPathSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postQuerySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postTreeActivationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postTruststoreSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postTruststorePKCS12SignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
