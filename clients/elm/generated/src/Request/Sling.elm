{-
   Adobe Experience Manager (AEM) API
   Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

   OpenAPI spec version: 3.2.0-pre.0
   Contact: opensource@shinesolutions.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Sling exposing (deleteAgent, deleteNode, getAgent, getAgents, getAuthorizableKeystore, getKeystore, getNode, getPackage, getPackageFilter, getQuery, getTruststore, getTruststoreInfo, postAgent, postAuthorizableKeystore, postAuthorizables, postConfigAdobeGraniteSamlAuthenticationHandler, postConfigApacheFelixJettyBasedHttpService, postConfigApacheHttpComponentsProxyConfiguration, postConfigApacheSlingDavExServlet, postConfigApacheSlingGetServlet, postConfigApacheSlingReferrerFilter, postNode, postNodeRw, postPath, postQuery, postTreeActivation, postTruststore, postTruststorePKCS12)

import Data.KeystoreInfo exposing (KeystoreInfo, keystoreInfoDecoder)
import Data.TruststoreInfo exposing (TruststoreInfo, truststoreInfoDecoder)
import Dict
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


deleteAgent : String -> String -> Http.Request ()
deleteAgent runmode name =
    { method = "DELETE"
    , url = basePath ++ "/etc/replication/agents." ++ runmode ++ "/" ++ name
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


deleteNode : String -> String -> Http.Request ()
deleteNode path name =
    { method = "DELETE"
    , url = basePath ++ "/" ++ path ++ "/" ++ name
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getAgent : String -> String -> Http.Request ()
getAgent runmode name =
    { method = "GET"
    , url = basePath ++ "/etc/replication/agents." ++ runmode ++ "/" ++ name
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getAgents : String -> Http.Request String
getAgents runmode =
    { method = "GET"
    , url = basePath ++ "/etc/replication/agents." ++ runmode ++ ".-1.json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getAuthorizableKeystore : String -> String -> Http.Request KeystoreInfo
getAuthorizableKeystore intermediatePath authorizableId =
    { method = "GET"
    , url = basePath ++ "/" ++ intermediatePath ++ "/" ++ authorizableId ++ ".ks.json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson keystoreInfoDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getKeystore : String -> String -> Http.Request String
getKeystore intermediatePath authorizableId =
    { method = "GET"
    , url = basePath ++ "/" ++ intermediatePath ++ "/" ++ authorizableId ++ "/keystore/store.p12"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getNode : String -> String -> Http.Request ()
getNode path name =
    { method = "GET"
    , url = basePath ++ "/" ++ path ++ "/" ++ name
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getPackage : String -> String -> String -> Http.Request String
getPackage group name version =
    { method = "GET"
    , url = basePath ++ "/etc/packages/" ++ group ++ "/" ++ name ++ "-" ++ version ++ ".zip"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getPackageFilter : String -> String -> String -> Http.Request String
getPackageFilter group name version =
    { method = "GET"
    , url = basePath ++ "/etc/packages/" ++ group ++ "/" ++ name ++ "-" ++ version ++ ".zip/jcr:content/vlt:definition/filter.tidy.2.json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getQuery : Http.Request String
getQuery =
    { method = "GET"
    , url = basePath ++ "/bin/querybuilder.json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getTruststore : Http.Request String
getTruststore =
    { method = "GET"
    , url = basePath ++ "/etc/truststore/truststore.p12"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


getTruststoreInfo : Http.Request TruststoreInfo
getTruststoreInfo =
    { method = "GET"
    , url = basePath ++ "/libs/granite/security/truststore.json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson truststoreInfoDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postAgent : String -> String -> Http.Request ()
postAgent runmode name =
    { method = "POST"
    , url = basePath ++ "/etc/replication/agents." ++ runmode ++ "/" ++ name
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postAuthorizableKeystore : String -> String -> Http.Request KeystoreInfo
postAuthorizableKeystore intermediatePath authorizableId =
    { method = "POST"
    , url = basePath ++ "/" ++ intermediatePath ++ "/" ++ authorizableId ++ ".ks.html"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson keystoreInfoDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postAuthorizables : Http.Request String
postAuthorizables =
    { method = "POST"
    , url = basePath ++ "/libs/granite/security/post/authorizables"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postConfigAdobeGraniteSamlAuthenticationHandler : Http.Request ()
postConfigAdobeGraniteSamlAuthenticationHandler =
    { method = "POST"
    , url = basePath ++ "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postConfigApacheFelixJettyBasedHttpService : Http.Request ()
postConfigApacheFelixJettyBasedHttpService =
    { method = "POST"
    , url = basePath ++ "/apps/system/config/org.apache.felix.http"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postConfigApacheHttpComponentsProxyConfiguration : Http.Request ()
postConfigApacheHttpComponentsProxyConfiguration =
    { method = "POST"
    , url = basePath ++ "/apps/system/config/org.apache.http.proxyconfigurator.config"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postConfigApacheSlingDavExServlet : Http.Request ()
postConfigApacheSlingDavExServlet =
    { method = "POST"
    , url = basePath ++ "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postConfigApacheSlingGetServlet : Http.Request ()
postConfigApacheSlingGetServlet =
    { method = "POST"
    , url = basePath ++ "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postConfigApacheSlingReferrerFilter : Http.Request ()
postConfigApacheSlingReferrerFilter =
    { method = "POST"
    , url = basePath ++ "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postNode : String -> String -> Http.Request ()
postNode path name =
    { method = "POST"
    , url = basePath ++ "/" ++ path ++ "/" ++ name
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postNodeRw : String -> String -> Http.Request ()
postNodeRw path name =
    { method = "POST"
    , url = basePath ++ "/" ++ path ++ "/" ++ name ++ ".rw.html"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postPath : String -> Http.Request ()
postPath path =
    { method = "POST"
    , url = basePath ++ "/" ++ path ++ "/"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postQuery : Http.Request String
postQuery =
    { method = "POST"
    , url = basePath ++ "/bin/querybuilder.json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postTreeActivation : Http.Request ()
postTreeActivation =
    { method = "POST"
    , url = basePath ++ "/etc/replication/treeactivation.html"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postTruststore : Http.Request String
postTruststore =
    { method = "POST"
    , url = basePath ++ "/libs/granite/security/post/truststore"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


postTruststorePKCS12 : Http.Request String
postTruststorePKCS12 =
    { method = "POST"
    , url = basePath ++ "/etc/truststore"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request
