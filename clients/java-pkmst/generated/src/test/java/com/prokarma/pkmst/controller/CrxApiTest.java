/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import com.prokarma.pkmst.model.InstallStatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for CrxApi
 */
@Ignore
public class CrxApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final CrxApi api = new CrxApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCrxdeStatusTest() throws Exception {
    ResponseEntity<String> response = api.getCrxdeStatus(  accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getInstallStatusTest() throws Exception {
    ResponseEntity<InstallStatus> response = api.getInstallStatus(  accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPackageManagerServletTest() throws Exception {
    ResponseEntity<Void> response = api.getPackageManagerServlet(  accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPackageServiceTest() throws Exception {
        String cmd = null;
    ResponseEntity<String> response = api.postPackageService(cmd , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPackageServiceJsonTest() throws Exception {
        String path = null;
        String cmd = null;
        String groupName = null;
        String packageName = null;
        String packageVersion = null;
        String charset = null;
        Boolean force = null;
        Boolean recursive = null;
        MultipartFile _package = null;
    ResponseEntity<String> response = api.postPackageServiceJson(path, cmd, groupName, packageName, packageVersion, charset, force, recursive, _package , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPackageUpdateTest() throws Exception {
        String groupName = null;
        String packageName = null;
        String version = null;
        String path = null;
        String filter = null;
        String charset = null;
    ResponseEntity<String> response = api.postPackageUpdate(groupName, packageName, version, path, filter, charset , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postSetPasswordTest() throws Exception {
        String old = null;
        String plain = null;
        String verify = null;
    ResponseEntity<String> response = api.postSetPassword(old, plain, verify , accept);

        // TODO: test validations
    }
    
}
