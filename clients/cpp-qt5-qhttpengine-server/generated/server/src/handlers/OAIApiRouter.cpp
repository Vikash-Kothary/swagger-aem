/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QRegularExpression>

#include "OAIApiRouter.h"
#include "OAIConsoleApiRequest.h"
#include "OAICqApiRequest.h"
#include "OAICrxApiRequest.h"
#include "OAICustomApiRequest.h"
#include "OAISlingApiRequest.h"


namespace OpenAPI {

inline QHttpEngine::Socket::Method toQHttpEngineMethod(QString method){

    if( method == QString("OPTIONS"))
        return QHttpEngine::Socket::Method::OPTIONS;
    if( method == QString("GET"))
        return QHttpEngine::Socket::Method::GET;
    if( method == QString("HEAD"))
        return QHttpEngine::Socket::Method::HEAD;
    if( method == QString("POST"))
        return QHttpEngine::Socket::Method::POST;
    if( method == QString("PUT"))
        return QHttpEngine::Socket::Method::PUT;
    if( method == QString("DELETE"))
        return QHttpEngine::Socket::Method::DELETE;
    if( method == QString("TRACE"))
        return QHttpEngine::Socket::Method::TRACE;
    if( method == QString("CONNECT"))
        return QHttpEngine::Socket::Method::CONNECT;

     return static_cast<QHttpEngine::Socket::Method>(-1);
}

ApiRouter::ApiRouter() {    
    OAIConsoleApiApiHandler = new OAIConsoleApiHandler();
    OAICqApiApiHandler = new OAICqApiHandler();
    OAICrxApiApiHandler = new OAICrxApiHandler();
    OAICustomApiApiHandler = new OAICustomApiHandler();
    OAISlingApiApiHandler = new OAISlingApiHandler();
     
}

ApiRouter::~ApiRouter(){
    qDebug() << "~ApiRouter()";    
    delete OAIConsoleApiApiHandler;
    delete OAICqApiApiHandler;
    delete OAICrxApiApiHandler;
    delete OAICustomApiApiHandler;
    delete OAISlingApiApiHandler;
         
}

void ApiRouter::setUpRoutes() {
    
    Routes.insert("//system/console/status-productinfo.json",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIConsoleApiRequest(socket, OAIConsoleApiApiHandler);
            reqObj->getAemProductInfoRequest();
        }
    });
    Routes.insert("//system/console/configMgr",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAIConsoleApiRequest(socket, OAIConsoleApiApiHandler);
            reqObj->getConfigMgrRequest();
        }
    });
    Routes.insert("//system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAIConsoleApiRequest(socket, OAIConsoleApiApiHandler);
            reqObj->postSamlConfigurationRequest();
        }
    });
    Routes.insert("//libs/granite/core/content/login.html",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAICqApiRequest(socket, OAICqApiApiHandler);
            reqObj->getLoginPageRequest();
        }
    });
    Routes.insert("//.cqactions.html",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAICqApiRequest(socket, OAICqApiApiHandler);
            reqObj->postCqActionsRequest();
        }
    });
    Routes.insert("//crx/server/crx.default/jcr:root/.1.json",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAICrxApiRequest(socket, OAICrxApiApiHandler);
            reqObj->getCrxdeStatusRequest();
        }
    });
    Routes.insert("//crx/packmgr/installstatus.jsp",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAICrxApiRequest(socket, OAICrxApiApiHandler);
            reqObj->getInstallStatusRequest();
        }
    });
    Routes.insert("//crx/packmgr/service/script.html",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAICrxApiRequest(socket, OAICrxApiApiHandler);
            reqObj->getPackageManagerServletRequest();
        }
    });
    Routes.insert("//crx/packmgr/service.jsp",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAICrxApiRequest(socket, OAICrxApiApiHandler);
            reqObj->postPackageServiceRequest();
        }
    });
    Routes.insert("//crx/packmgr/update.jsp",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAICrxApiRequest(socket, OAICrxApiApiHandler);
            reqObj->postPackageUpdateRequest();
        }
    });
    Routes.insert("//crx/explorer/ui/setpassword.jsp",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAICrxApiRequest(socket, OAICrxApiApiHandler);
            reqObj->postSetPasswordRequest();
        }
    });
    Routes.insert("//system/health",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAICustomApiRequest(socket, OAICustomApiApiHandler);
            reqObj->getAemHealthCheckRequest();
        }
    });
    Routes.insert("//apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAICustomApiRequest(socket, OAICustomApiApiHandler);
            reqObj->postConfigAemHealthCheckServletRequest();
        }
    });
    Routes.insert("//apps/system/config/com.shinesolutions.aem.passwordreset.Activator",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAICustomApiRequest(socket, OAICustomApiApiHandler);
            reqObj->postConfigAemPasswordResetRequest();
        }
    });
    Routes.insert("//bin/querybuilder.json",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->getQueryRequest();
        }
    });
    Routes.insert("//etc/truststore/truststore.p12",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->getTruststoreRequest();
        }
    });
    Routes.insert("//libs/granite/security/truststore.json",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("GET") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->getTruststoreInfoRequest();
        }
    });
    Routes.insert("//libs/granite/security/post/authorizables",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postAuthorizablesRequest();
        }
    });
    Routes.insert("//apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postConfigAdobeGraniteSamlAuthenticationHandlerRequest();
        }
    });
    Routes.insert("//apps/system/config/org.apache.felix.http",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postConfigApacheFelixJettyBasedHttpServiceRequest();
        }
    });
    Routes.insert("//apps/system/config/org.apache.http.proxyconfigurator.config",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postConfigApacheHttpComponentsProxyConfigurationRequest();
        }
    });
    Routes.insert("//apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postConfigApacheSlingDavExServletRequest();
        }
    });
    Routes.insert("//apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postConfigApacheSlingGetServletRequest();
        }
    });
    Routes.insert("//apps/system/config/org.apache.sling.security.impl.ReferrerFilter",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postConfigApacheSlingReferrerFilterRequest();
        }
    });
    Routes.insert("//bin/querybuilder.json",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postQueryRequest();
        }
    });
    Routes.insert("//etc/replication/treeactivation.html",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postTreeActivationRequest();
        }
    });
    Routes.insert("//libs/granite/security/post/truststore",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postTruststoreRequest();
        }
    });
    Routes.insert("//etc/truststore",[this](QHttpEngine::Socket *socket) {
        if(toQHttpEngineMethod("POST") == socket->method()){
            auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
            reqObj->postTruststorePKCS12Request();
        }
    }); 
}

void ApiRouter::processRequest(QHttpEngine::Socket *socket){
    if (Routes.contains(socket->path())) {
        for(auto endpoints : Routes.values(socket->path())) {
            endpoints.operator()(socket);
        }
    } else
    {          
        { 
            QString completePath("//system/console/bundles/{name}");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIConsoleApiRequest(socket, OAIConsoleApiApiHandler);
                reqObj->postBundleRequest(pathparam);
                return; 
            }
        }        
        { 
            QString completePath("//system/console/jmx/com.adobe.granite:type=Repository/op/{action}");
            QString actionPathParam("{"); 
            actionPathParam.append("action").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(actionPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAIConsoleApiRequest(socket, OAIConsoleApiApiHandler);
                reqObj->postJmxRepositoryRequest(pathparam);
                return; 
            }
        }        
        { 
            QString completePath("//crx/packmgr/service/.json/{path}");
            QString pathPathParam("{"); 
            pathPathParam.append("path").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAICrxApiRequest(socket, OAICrxApiApiHandler);
                reqObj->postPackageServiceJsonRequest(pathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/replication/agents.{runmode}/{name}");
            QString runmodePathParam("{"); 
            runmodePathParam.append("runmode").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(runmodePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("DELETE") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->deleteAgentRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/replication/agents.{runmode}/{name}");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("DELETE") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->deleteAgentRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}");
            QString pathPathParam("{"); 
            pathPathParam.append("path").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("DELETE") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->deleteNodeRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("DELETE") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->deleteNodeRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/replication/agents.{runmode}/{name}");
            QString runmodePathParam("{"); 
            runmodePathParam.append("runmode").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(runmodePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getAgentRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/replication/agents.{runmode}/{name}");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getAgentRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/replication/agents.{runmode}.-1.json");
            QString runmodePathParam("{"); 
            runmodePathParam.append("runmode").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(runmodePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getAgentsRequest(pathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{intermediatePath}/{authorizableId}.ks.json");
            QString intermediate_pathPathParam("{"); 
            intermediate_pathPathParam.append("intermediatePath").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(intermediate_pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getAuthorizableKeystoreRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{intermediatePath}/{authorizableId}.ks.json");
            QString authorizable_idPathParam("{"); 
            authorizable_idPathParam.append("authorizableId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(authorizable_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getAuthorizableKeystoreRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{intermediatePath}/{authorizableId}/keystore/store.p12");
            QString intermediate_pathPathParam("{"); 
            intermediate_pathPathParam.append("intermediatePath").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(intermediate_pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getKeystoreRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{intermediatePath}/{authorizableId}/keystore/store.p12");
            QString authorizable_idPathParam("{"); 
            authorizable_idPathParam.append("authorizableId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(authorizable_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getKeystoreRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}");
            QString pathPathParam("{"); 
            pathPathParam.append("path").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getNodeRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getNodeRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/packages/{group}/{name}-{version}.zip");
            QString groupPathParam("{"); 
            groupPathParam.append("group").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(groupPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getPackageRequest(pathparampathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/packages/{group}/{name}-{version}.zip");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getPackageRequest(pathparampathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/packages/{group}/{name}-{version}.zip");
            QString versionPathParam("{"); 
            versionPathParam.append("version").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(versionPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getPackageRequest(pathparampathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json");
            QString groupPathParam("{"); 
            groupPathParam.append("group").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(groupPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getPackageFilterRequest(pathparampathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getPackageFilterRequest(pathparampathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json");
            QString versionPathParam("{"); 
            versionPathParam.append("version").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(versionPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("GET") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->getPackageFilterRequest(pathparampathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/replication/agents.{runmode}/{name}");
            QString runmodePathParam("{"); 
            runmodePathParam.append("runmode").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(runmodePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postAgentRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//etc/replication/agents.{runmode}/{name}");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postAgentRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{intermediatePath}/{authorizableId}.ks.html");
            QString intermediate_pathPathParam("{"); 
            intermediate_pathPathParam.append("intermediatePath").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(intermediate_pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postAuthorizableKeystoreRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{intermediatePath}/{authorizableId}.ks.html");
            QString authorizable_idPathParam("{"); 
            authorizable_idPathParam.append("authorizableId").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(authorizable_idPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postAuthorizableKeystoreRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}");
            QString pathPathParam("{"); 
            pathPathParam.append("path").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postNodeRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postNodeRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}.rw.html");
            QString pathPathParam("{"); 
            pathPathParam.append("path").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postNodeRwRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/{name}.rw.html");
            QString namePathParam("{"); 
            namePathParam.append("name").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(namePathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postNodeRwRequest(pathparampathparam);
                return; 
            }
        }        
        { 
            QString completePath("//{path}/");
            QString pathPathParam("{"); 
            pathPathParam.append("path").append("}");
            completePath.replace("/", "\\/"); // replace '/' with '\/' for regex 
            completePath.replace(pathPathParam, "([^\\/]*?)"); // match anything but '/''
            completePath.append("$");  // End of string
            QRegularExpression re(completePath, QRegularExpression::CaseInsensitiveOption);
            QRegularExpressionMatch match = re.match(socket->path());
            if ((toQHttpEngineMethod("POST") == socket->method()) && match.hasMatch() ) {
                QString pathparam = match.captured(1);
                auto reqObj = new OAISlingApiRequest(socket, OAISlingApiApiHandler);
                reqObj->postPathRequest(pathparam);
                return; 
            }
        }
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
    return;
}
}
