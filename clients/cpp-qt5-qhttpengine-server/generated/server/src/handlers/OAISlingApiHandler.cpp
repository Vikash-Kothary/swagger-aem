/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAISlingApiHandler.h"
#include "OAISlingApiRequest.h"

namespace OpenAPI {

OAISlingApiHandler::OAISlingApiHandler(){

}

OAISlingApiHandler::~OAISlingApiHandler(){

}

void OAISlingApiHandler::deleteAgent(QString runmode, QString name) {
    Q_UNUSED(runmode);
    Q_UNUSED(name);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->deleteAgentResponse();
    }    
}
void OAISlingApiHandler::deleteNode(QString path, QString name) {
    Q_UNUSED(path);
    Q_UNUSED(name);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->deleteNodeResponse();
    }    
}
void OAISlingApiHandler::getAgent(QString runmode, QString name) {
    Q_UNUSED(runmode);
    Q_UNUSED(name);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->getAgentResponse();
    }    
}
void OAISlingApiHandler::getAgents(QString runmode) {
    Q_UNUSED(runmode);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->getAgentsResponse(res);
    }    
}
void OAISlingApiHandler::getAuthorizableKeystore(QString intermediate_path, QString authorizable_id) {
    Q_UNUSED(intermediate_path);
    Q_UNUSED(authorizable_id);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIKeystoreInfo res;
        reqObj->getAuthorizableKeystoreResponse(res);
    }    
}
void OAISlingApiHandler::getKeystore(QString intermediate_path, QString authorizable_id) {
    Q_UNUSED(intermediate_path);
    Q_UNUSED(authorizable_id);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QIODevice* res;
        reqObj->getKeystoreResponse(res);
    }    
}
void OAISlingApiHandler::getNode(QString path, QString name) {
    Q_UNUSED(path);
    Q_UNUSED(name);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->getNodeResponse();
    }    
}
void OAISlingApiHandler::getPackage(QString group, QString name, QString version) {
    Q_UNUSED(group);
    Q_UNUSED(name);
    Q_UNUSED(version);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QIODevice* res;
        reqObj->getPackageResponse(res);
    }    
}
void OAISlingApiHandler::getPackageFilter(QString group, QString name, QString version) {
    Q_UNUSED(group);
    Q_UNUSED(name);
    Q_UNUSED(version);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->getPackageFilterResponse(res);
    }    
}
void OAISlingApiHandler::getQuery(QString path, OAINumber p_limit, QString _1_property, QString _1_property_value) {
    Q_UNUSED(path);
    Q_UNUSED(p_limit);
    Q_UNUSED(_1_property);
    Q_UNUSED(_1_property_value);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->getQueryResponse(res);
    }    
}
void OAISlingApiHandler::getTruststore() {
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QIODevice* res;
        reqObj->getTruststoreResponse(res);
    }    
}
void OAISlingApiHandler::getTruststoreInfo() {
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAITruststoreInfo res;
        reqObj->getTruststoreInfoResponse(res);
    }    
}
void OAISlingApiHandler::postAgent(QString runmode, QString name, bool jcrcontentcqdistribute, QString jcrcontentcqdistribute_type_hint, QString jcrcontentcqname, QString jcrcontentcqtemplate, bool jcrcontentenabled, QString jcrcontentjcrdescription, QString jcrcontentjcrlast_modified, QString jcrcontentjcrlast_modified_by, QString jcrcontentjcrmixin_types, QString jcrcontentjcrtitle, QString jcrcontentlog_level, bool jcrcontentno_status_update, bool jcrcontentno_versioning, OAINumber jcrcontentprotocol_connect_timeout, bool jcrcontentprotocol_http_connection_closed, QString jcrcontentprotocol_http_expired, QList<QString> jcrcontentprotocol_http_headers, QString jcrcontentprotocol_http_headers_type_hint, QString jcrcontentprotocol_http_method, bool jcrcontentprotocol_https_relaxed, QString jcrcontentprotocol_interface, OAINumber jcrcontentprotocol_socket_timeout, QString jcrcontentprotocol_version, QString jcrcontentproxy_ntlm_domain, QString jcrcontentproxy_ntlm_host, QString jcrcontentproxy_host, QString jcrcontentproxy_password, OAINumber jcrcontentproxy_port, QString jcrcontentproxy_user, OAINumber jcrcontentqueue_batch_max_size, QString jcrcontentqueue_batch_mode, OAINumber jcrcontentqueue_batch_wait_time, QString jcrcontentretry_delay, bool jcrcontentreverse_replication, QString jcrcontentserialization_type, QString jcrcontentslingresource_type, QString jcrcontentssl, QString jcrcontenttransport_ntlm_domain, QString jcrcontenttransport_ntlm_host, QString jcrcontenttransport_password, QString jcrcontenttransport_uri, QString jcrcontenttransport_user, bool jcrcontenttrigger_distribute, bool jcrcontenttrigger_modified, bool jcrcontenttrigger_on_off_time, bool jcrcontenttrigger_receive, bool jcrcontenttrigger_specific, QString jcrcontentuser_id, QString jcrprimary_type, QString operation) {
    Q_UNUSED(runmode);
    Q_UNUSED(name);
    Q_UNUSED(jcrcontentcqdistribute);
    Q_UNUSED(jcrcontentcqdistribute_type_hint);
    Q_UNUSED(jcrcontentcqname);
    Q_UNUSED(jcrcontentcqtemplate);
    Q_UNUSED(jcrcontentenabled);
    Q_UNUSED(jcrcontentjcrdescription);
    Q_UNUSED(jcrcontentjcrlast_modified);
    Q_UNUSED(jcrcontentjcrlast_modified_by);
    Q_UNUSED(jcrcontentjcrmixin_types);
    Q_UNUSED(jcrcontentjcrtitle);
    Q_UNUSED(jcrcontentlog_level);
    Q_UNUSED(jcrcontentno_status_update);
    Q_UNUSED(jcrcontentno_versioning);
    Q_UNUSED(jcrcontentprotocol_connect_timeout);
    Q_UNUSED(jcrcontentprotocol_http_connection_closed);
    Q_UNUSED(jcrcontentprotocol_http_expired);
    Q_UNUSED(jcrcontentprotocol_http_headers);
    Q_UNUSED(jcrcontentprotocol_http_headers_type_hint);
    Q_UNUSED(jcrcontentprotocol_http_method);
    Q_UNUSED(jcrcontentprotocol_https_relaxed);
    Q_UNUSED(jcrcontentprotocol_interface);
    Q_UNUSED(jcrcontentprotocol_socket_timeout);
    Q_UNUSED(jcrcontentprotocol_version);
    Q_UNUSED(jcrcontentproxy_ntlm_domain);
    Q_UNUSED(jcrcontentproxy_ntlm_host);
    Q_UNUSED(jcrcontentproxy_host);
    Q_UNUSED(jcrcontentproxy_password);
    Q_UNUSED(jcrcontentproxy_port);
    Q_UNUSED(jcrcontentproxy_user);
    Q_UNUSED(jcrcontentqueue_batch_max_size);
    Q_UNUSED(jcrcontentqueue_batch_mode);
    Q_UNUSED(jcrcontentqueue_batch_wait_time);
    Q_UNUSED(jcrcontentretry_delay);
    Q_UNUSED(jcrcontentreverse_replication);
    Q_UNUSED(jcrcontentserialization_type);
    Q_UNUSED(jcrcontentslingresource_type);
    Q_UNUSED(jcrcontentssl);
    Q_UNUSED(jcrcontenttransport_ntlm_domain);
    Q_UNUSED(jcrcontenttransport_ntlm_host);
    Q_UNUSED(jcrcontenttransport_password);
    Q_UNUSED(jcrcontenttransport_uri);
    Q_UNUSED(jcrcontenttransport_user);
    Q_UNUSED(jcrcontenttrigger_distribute);
    Q_UNUSED(jcrcontenttrigger_modified);
    Q_UNUSED(jcrcontenttrigger_on_off_time);
    Q_UNUSED(jcrcontenttrigger_receive);
    Q_UNUSED(jcrcontenttrigger_specific);
    Q_UNUSED(jcrcontentuser_id);
    Q_UNUSED(jcrprimary_type);
    Q_UNUSED(operation);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postAgentResponse();
    }    
}
void OAISlingApiHandler::postAuthorizableKeystore(QString intermediate_path, QString authorizable_id, QString operation, QString current_password, QString new_password, QString re_password, QString key_password, QString key_store_pass, QString alias, QString new_alias, QString remove_alias, QIODevice* cert_chain, QIODevice* pk, QIODevice* key_store) {
    Q_UNUSED(intermediate_path);
    Q_UNUSED(authorizable_id);
    Q_UNUSED(operation);
    Q_UNUSED(current_password);
    Q_UNUSED(new_password);
    Q_UNUSED(re_password);
    Q_UNUSED(key_password);
    Q_UNUSED(key_store_pass);
    Q_UNUSED(alias);
    Q_UNUSED(new_alias);
    Q_UNUSED(remove_alias);
    Q_UNUSED(cert_chain);
    Q_UNUSED(pk);
    Q_UNUSED(key_store);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIKeystoreInfo res;
        reqObj->postAuthorizableKeystoreResponse(res);
    }    
}
void OAISlingApiHandler::postAuthorizables(QString authorizable_id, QString intermediate_path, QString create_user, QString create_group, QString reppassword, QString profilegiven_name) {
    Q_UNUSED(authorizable_id);
    Q_UNUSED(intermediate_path);
    Q_UNUSED(create_user);
    Q_UNUSED(create_group);
    Q_UNUSED(reppassword);
    Q_UNUSED(profilegiven_name);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->postAuthorizablesResponse(res);
    }    
}
void OAISlingApiHandler::postConfigAdobeGraniteSamlAuthenticationHandler(QString key_store_password, QString key_store_password_type_hint, qint32 service_ranking, QString service_ranking_type_hint, bool idp_http_redirect, QString idp_http_redirect_type_hint, bool create_user, QString create_user_type_hint, QString default_redirect_url, QString default_redirect_url_type_hint, QString user_id_attribute, QString user_id_attribute_type_hint, QList<QString> default_groups, QString default_groups_type_hint, QString idp_cert_alias, QString idp_cert_alias_type_hint, bool add_group_memberships, QString add_group_memberships_type_hint, QList<QString> path, QString path_type_hint, QList<QString> synchronize_attributes, QString synchronize_attributes_type_hint, qint32 clock_tolerance, QString clock_tolerance_type_hint, QString group_membership_attribute, QString group_membership_attribute_type_hint, QString idp_url, QString idp_url_type_hint, QString logout_url, QString logout_url_type_hint, QString service_provider_entity_id, QString service_provider_entity_id_type_hint, QString assertion_consumer_service_url, QString assertion_consumer_service_url_type_hint, bool handle_logout, QString handle_logout_type_hint, QString sp_private_key_alias, QString sp_private_key_alias_type_hint, bool use_encryption, QString use_encryption_type_hint, QString name_id_format, QString name_id_format_type_hint, QString digest_method, QString digest_method_type_hint, QString signature_method, QString signature_method_type_hint, QString user_intermediate_path, QString user_intermediate_path_type_hint) {
    Q_UNUSED(key_store_password);
    Q_UNUSED(key_store_password_type_hint);
    Q_UNUSED(service_ranking);
    Q_UNUSED(service_ranking_type_hint);
    Q_UNUSED(idp_http_redirect);
    Q_UNUSED(idp_http_redirect_type_hint);
    Q_UNUSED(create_user);
    Q_UNUSED(create_user_type_hint);
    Q_UNUSED(default_redirect_url);
    Q_UNUSED(default_redirect_url_type_hint);
    Q_UNUSED(user_id_attribute);
    Q_UNUSED(user_id_attribute_type_hint);
    Q_UNUSED(default_groups);
    Q_UNUSED(default_groups_type_hint);
    Q_UNUSED(idp_cert_alias);
    Q_UNUSED(idp_cert_alias_type_hint);
    Q_UNUSED(add_group_memberships);
    Q_UNUSED(add_group_memberships_type_hint);
    Q_UNUSED(path);
    Q_UNUSED(path_type_hint);
    Q_UNUSED(synchronize_attributes);
    Q_UNUSED(synchronize_attributes_type_hint);
    Q_UNUSED(clock_tolerance);
    Q_UNUSED(clock_tolerance_type_hint);
    Q_UNUSED(group_membership_attribute);
    Q_UNUSED(group_membership_attribute_type_hint);
    Q_UNUSED(idp_url);
    Q_UNUSED(idp_url_type_hint);
    Q_UNUSED(logout_url);
    Q_UNUSED(logout_url_type_hint);
    Q_UNUSED(service_provider_entity_id);
    Q_UNUSED(service_provider_entity_id_type_hint);
    Q_UNUSED(assertion_consumer_service_url);
    Q_UNUSED(assertion_consumer_service_url_type_hint);
    Q_UNUSED(handle_logout);
    Q_UNUSED(handle_logout_type_hint);
    Q_UNUSED(sp_private_key_alias);
    Q_UNUSED(sp_private_key_alias_type_hint);
    Q_UNUSED(use_encryption);
    Q_UNUSED(use_encryption_type_hint);
    Q_UNUSED(name_id_format);
    Q_UNUSED(name_id_format_type_hint);
    Q_UNUSED(digest_method);
    Q_UNUSED(digest_method_type_hint);
    Q_UNUSED(signature_method);
    Q_UNUSED(signature_method_type_hint);
    Q_UNUSED(user_intermediate_path);
    Q_UNUSED(user_intermediate_path_type_hint);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postConfigAdobeGraniteSamlAuthenticationHandlerResponse();
    }    
}
void OAISlingApiHandler::postConfigApacheFelixJettyBasedHttpService(bool org_apache_felix_https_nio, QString org_apache_felix_https_nio_type_hint, QString org_apache_felix_https_keystore, QString org_apache_felix_https_keystore_type_hint, QString org_apache_felix_https_keystore_password, QString org_apache_felix_https_keystore_password_type_hint, QString org_apache_felix_https_keystore_key, QString org_apache_felix_https_keystore_key_type_hint, QString org_apache_felix_https_keystore_key_password, QString org_apache_felix_https_keystore_key_password_type_hint, QString org_apache_felix_https_truststore, QString org_apache_felix_https_truststore_type_hint, QString org_apache_felix_https_truststore_password, QString org_apache_felix_https_truststore_password_type_hint, QString org_apache_felix_https_clientcertificate, QString org_apache_felix_https_clientcertificate_type_hint, bool org_apache_felix_https_enable, QString org_apache_felix_https_enable_type_hint, QString org_osgi_service_http_port_secure, QString org_osgi_service_http_port_secure_type_hint) {
    Q_UNUSED(org_apache_felix_https_nio);
    Q_UNUSED(org_apache_felix_https_nio_type_hint);
    Q_UNUSED(org_apache_felix_https_keystore);
    Q_UNUSED(org_apache_felix_https_keystore_type_hint);
    Q_UNUSED(org_apache_felix_https_keystore_password);
    Q_UNUSED(org_apache_felix_https_keystore_password_type_hint);
    Q_UNUSED(org_apache_felix_https_keystore_key);
    Q_UNUSED(org_apache_felix_https_keystore_key_type_hint);
    Q_UNUSED(org_apache_felix_https_keystore_key_password);
    Q_UNUSED(org_apache_felix_https_keystore_key_password_type_hint);
    Q_UNUSED(org_apache_felix_https_truststore);
    Q_UNUSED(org_apache_felix_https_truststore_type_hint);
    Q_UNUSED(org_apache_felix_https_truststore_password);
    Q_UNUSED(org_apache_felix_https_truststore_password_type_hint);
    Q_UNUSED(org_apache_felix_https_clientcertificate);
    Q_UNUSED(org_apache_felix_https_clientcertificate_type_hint);
    Q_UNUSED(org_apache_felix_https_enable);
    Q_UNUSED(org_apache_felix_https_enable_type_hint);
    Q_UNUSED(org_osgi_service_http_port_secure);
    Q_UNUSED(org_osgi_service_http_port_secure_type_hint);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postConfigApacheFelixJettyBasedHttpServiceResponse();
    }    
}
void OAISlingApiHandler::postConfigApacheHttpComponentsProxyConfiguration(QString proxy_host, QString proxy_host_type_hint, qint32 proxy_port, QString proxy_port_type_hint, QList<QString> proxy_exceptions, QString proxy_exceptions_type_hint, bool proxy_enabled, QString proxy_enabled_type_hint, QString proxy_user, QString proxy_user_type_hint, QString proxy_password, QString proxy_password_type_hint) {
    Q_UNUSED(proxy_host);
    Q_UNUSED(proxy_host_type_hint);
    Q_UNUSED(proxy_port);
    Q_UNUSED(proxy_port_type_hint);
    Q_UNUSED(proxy_exceptions);
    Q_UNUSED(proxy_exceptions_type_hint);
    Q_UNUSED(proxy_enabled);
    Q_UNUSED(proxy_enabled_type_hint);
    Q_UNUSED(proxy_user);
    Q_UNUSED(proxy_user_type_hint);
    Q_UNUSED(proxy_password);
    Q_UNUSED(proxy_password_type_hint);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postConfigApacheHttpComponentsProxyConfigurationResponse();
    }    
}
void OAISlingApiHandler::postConfigApacheSlingDavExServlet(QString alias, QString alias_type_hint, bool dav_create_absolute_uri, QString dav_create_absolute_uri_type_hint) {
    Q_UNUSED(alias);
    Q_UNUSED(alias_type_hint);
    Q_UNUSED(dav_create_absolute_uri);
    Q_UNUSED(dav_create_absolute_uri_type_hint);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postConfigApacheSlingDavExServletResponse();
    }    
}
void OAISlingApiHandler::postConfigApacheSlingGetServlet(QString json_maximumresults, QString json_maximumresults_type_hint, bool enable_html, QString enable_html_type_hint, bool enable_txt, QString enable_txt_type_hint, bool enable_xml, QString enable_xml_type_hint) {
    Q_UNUSED(json_maximumresults);
    Q_UNUSED(json_maximumresults_type_hint);
    Q_UNUSED(enable_html);
    Q_UNUSED(enable_html_type_hint);
    Q_UNUSED(enable_txt);
    Q_UNUSED(enable_txt_type_hint);
    Q_UNUSED(enable_xml);
    Q_UNUSED(enable_xml_type_hint);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postConfigApacheSlingGetServletResponse();
    }    
}
void OAISlingApiHandler::postConfigApacheSlingReferrerFilter(bool allow_empty, QString allow_empty_type_hint, QString allow_hosts, QString allow_hosts_type_hint, QString allow_hosts_regexp, QString allow_hosts_regexp_type_hint, QString filter_methods, QString filter_methods_type_hint) {
    Q_UNUSED(allow_empty);
    Q_UNUSED(allow_empty_type_hint);
    Q_UNUSED(allow_hosts);
    Q_UNUSED(allow_hosts_type_hint);
    Q_UNUSED(allow_hosts_regexp);
    Q_UNUSED(allow_hosts_regexp_type_hint);
    Q_UNUSED(filter_methods);
    Q_UNUSED(filter_methods_type_hint);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postConfigApacheSlingReferrerFilterResponse();
    }    
}
void OAISlingApiHandler::postNode(QString path, QString name, QString operation, QString delete_authorizable, QIODevice* file) {
    Q_UNUSED(path);
    Q_UNUSED(name);
    Q_UNUSED(operation);
    Q_UNUSED(delete_authorizable);
    Q_UNUSED(file);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postNodeResponse();
    }    
}
void OAISlingApiHandler::postNodeRw(QString path, QString name, QString add_members) {
    Q_UNUSED(path);
    Q_UNUSED(name);
    Q_UNUSED(add_members);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postNodeRwResponse();
    }    
}
void OAISlingApiHandler::postPath(QString path, QString jcrprimary_type, QString name) {
    Q_UNUSED(path);
    Q_UNUSED(jcrprimary_type);
    Q_UNUSED(name);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postPathResponse();
    }    
}
void OAISlingApiHandler::postQuery(QString path, OAINumber p_limit, QString _1_property, QString _1_property_value) {
    Q_UNUSED(path);
    Q_UNUSED(p_limit);
    Q_UNUSED(_1_property);
    Q_UNUSED(_1_property_value);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->postQueryResponse(res);
    }    
}
void OAISlingApiHandler::postTreeActivation(bool ignoredeactivated, bool onlymodified, QString path) {
    Q_UNUSED(ignoredeactivated);
    Q_UNUSED(onlymodified);
    Q_UNUSED(path);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postTreeActivationResponse();
    }    
}
void OAISlingApiHandler::postTruststore(QString operation, QString new_password, QString re_password, QString key_store_type, QString remove_alias, QIODevice* certificate) {
    Q_UNUSED(operation);
    Q_UNUSED(new_password);
    Q_UNUSED(re_password);
    Q_UNUSED(key_store_type);
    Q_UNUSED(remove_alias);
    Q_UNUSED(certificate);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->postTruststoreResponse(res);
    }    
}
void OAISlingApiHandler::postTruststorePKCS12(QIODevice* truststore_p12) {
    Q_UNUSED(truststore_p12);
    auto reqObj = qobject_cast<OAISlingApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->postTruststorePKCS12Response(res);
    }    
}


}
