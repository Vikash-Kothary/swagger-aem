/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIConsoleApiHandler.h"
#include "OAIConsoleApiRequest.h"

namespace OpenAPI {

OAIConsoleApiHandler::OAIConsoleApiHandler(){

}

OAIConsoleApiHandler::~OAIConsoleApiHandler(){

}

void OAIConsoleApiHandler::getAemProductInfo() {
    auto reqObj = qobject_cast<OAIConsoleApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QList<QString> res;
        reqObj->getAemProductInfoResponse(res);
    }    
}
void OAIConsoleApiHandler::getConfigMgr() {
    auto reqObj = qobject_cast<OAIConsoleApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        QString res;
        reqObj->getConfigMgrResponse(res);
    }    
}
void OAIConsoleApiHandler::postBundle(QString name, QString action) {
    Q_UNUSED(name);
    Q_UNUSED(action);
    auto reqObj = qobject_cast<OAIConsoleApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postBundleResponse();
    }    
}
void OAIConsoleApiHandler::postJmxRepository(QString action) {
    Q_UNUSED(action);
    auto reqObj = qobject_cast<OAIConsoleApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->postJmxRepositoryResponse();
    }    
}
void OAIConsoleApiHandler::postSamlConfiguration(bool post, bool apply, bool _delete, QString action, QString location, QList<QString> path, qint32 service_ranking, QString idp_url, QString idp_cert_alias, bool idp_http_redirect, QString service_provider_entity_id, QString assertion_consumer_service_url, QString sp_private_key_alias, QString key_store_password, QString default_redirect_url, QString user_id_attribute, bool use_encryption, bool create_user, bool add_group_memberships, QString group_membership_attribute, QList<QString> default_groups, QString name_id_format, QList<QString> synchronize_attributes, bool handle_logout, QString logout_url, qint32 clock_tolerance, QString digest_method, QString signature_method, QString user_intermediate_path, QList<QString> propertylist) {
    Q_UNUSED(post);
    Q_UNUSED(apply);
    Q_UNUSED(_delete);
    Q_UNUSED(action);
    Q_UNUSED(location);
    Q_UNUSED(path);
    Q_UNUSED(service_ranking);
    Q_UNUSED(idp_url);
    Q_UNUSED(idp_cert_alias);
    Q_UNUSED(idp_http_redirect);
    Q_UNUSED(service_provider_entity_id);
    Q_UNUSED(assertion_consumer_service_url);
    Q_UNUSED(sp_private_key_alias);
    Q_UNUSED(key_store_password);
    Q_UNUSED(default_redirect_url);
    Q_UNUSED(user_id_attribute);
    Q_UNUSED(use_encryption);
    Q_UNUSED(create_user);
    Q_UNUSED(add_group_memberships);
    Q_UNUSED(group_membership_attribute);
    Q_UNUSED(default_groups);
    Q_UNUSED(name_id_format);
    Q_UNUSED(synchronize_attributes);
    Q_UNUSED(handle_logout);
    Q_UNUSED(logout_url);
    Q_UNUSED(clock_tolerance);
    Q_UNUSED(digest_method);
    Q_UNUSED(signature_method);
    Q_UNUSED(user_intermediate_path);
    Q_UNUSED(propertylist);
    auto reqObj = qobject_cast<OAIConsoleApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAISamlConfigurationInfo res;
        reqObj->postSamlConfigurationResponse(res);
    }    
}


}
