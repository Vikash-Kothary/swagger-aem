/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISlingApiHandler_H
#define OAI_OAISlingApiHandler_H

#include <QObject>

#include "OAIKeystoreInfo.h"
#include "OAINumber.h"
#include "OAITruststoreInfo.h"
#include <QIODevice>
#include <QString>

namespace OpenAPI {

class OAISlingApiHandler : public QObject
{
    Q_OBJECT
    
public:
    OAISlingApiHandler();
    virtual ~OAISlingApiHandler();


public slots:
    virtual void deleteAgent(QString runmode, QString name);
    virtual void deleteNode(QString path, QString name);
    virtual void getAgent(QString runmode, QString name);
    virtual void getAgents(QString runmode);
    virtual void getAuthorizableKeystore(QString intermediate_path, QString authorizable_id);
    virtual void getKeystore(QString intermediate_path, QString authorizable_id);
    virtual void getNode(QString path, QString name);
    virtual void getPackage(QString group, QString name, QString version);
    virtual void getPackageFilter(QString group, QString name, QString version);
    virtual void getQuery(QString path, OAINumber p_limit, QString _1_property, QString _1_property_value);
    virtual void getTruststore();
    virtual void getTruststoreInfo();
    virtual void postAgent(QString runmode, QString name, bool jcrcontentcqdistribute, QString jcrcontentcqdistribute_type_hint, QString jcrcontentcqname, QString jcrcontentcqtemplate, bool jcrcontentenabled, QString jcrcontentjcrdescription, QString jcrcontentjcrlast_modified, QString jcrcontentjcrlast_modified_by, QString jcrcontentjcrmixin_types, QString jcrcontentjcrtitle, QString jcrcontentlog_level, bool jcrcontentno_status_update, bool jcrcontentno_versioning, OAINumber jcrcontentprotocol_connect_timeout, bool jcrcontentprotocol_http_connection_closed, QString jcrcontentprotocol_http_expired, QList<QString> jcrcontentprotocol_http_headers, QString jcrcontentprotocol_http_headers_type_hint, QString jcrcontentprotocol_http_method, bool jcrcontentprotocol_https_relaxed, QString jcrcontentprotocol_interface, OAINumber jcrcontentprotocol_socket_timeout, QString jcrcontentprotocol_version, QString jcrcontentproxy_ntlm_domain, QString jcrcontentproxy_ntlm_host, QString jcrcontentproxy_host, QString jcrcontentproxy_password, OAINumber jcrcontentproxy_port, QString jcrcontentproxy_user, OAINumber jcrcontentqueue_batch_max_size, QString jcrcontentqueue_batch_mode, OAINumber jcrcontentqueue_batch_wait_time, QString jcrcontentretry_delay, bool jcrcontentreverse_replication, QString jcrcontentserialization_type, QString jcrcontentslingresource_type, QString jcrcontentssl, QString jcrcontenttransport_ntlm_domain, QString jcrcontenttransport_ntlm_host, QString jcrcontenttransport_password, QString jcrcontenttransport_uri, QString jcrcontenttransport_user, bool jcrcontenttrigger_distribute, bool jcrcontenttrigger_modified, bool jcrcontenttrigger_on_off_time, bool jcrcontenttrigger_receive, bool jcrcontenttrigger_specific, QString jcrcontentuser_id, QString jcrprimary_type, QString operation);
    virtual void postAuthorizableKeystore(QString intermediate_path, QString authorizable_id, QString operation, QString current_password, QString new_password, QString re_password, QString key_password, QString key_store_pass, QString alias, QString new_alias, QString remove_alias, QIODevice* cert_chain, QIODevice* pk, QIODevice* key_store);
    virtual void postAuthorizables(QString authorizable_id, QString intermediate_path, QString create_user, QString create_group, QString reppassword, QString profilegiven_name);
    virtual void postConfigAdobeGraniteSamlAuthenticationHandler(QString key_store_password, QString key_store_password_type_hint, qint32 service_ranking, QString service_ranking_type_hint, bool idp_http_redirect, QString idp_http_redirect_type_hint, bool create_user, QString create_user_type_hint, QString default_redirect_url, QString default_redirect_url_type_hint, QString user_id_attribute, QString user_id_attribute_type_hint, QList<QString> default_groups, QString default_groups_type_hint, QString idp_cert_alias, QString idp_cert_alias_type_hint, bool add_group_memberships, QString add_group_memberships_type_hint, QList<QString> path, QString path_type_hint, QList<QString> synchronize_attributes, QString synchronize_attributes_type_hint, qint32 clock_tolerance, QString clock_tolerance_type_hint, QString group_membership_attribute, QString group_membership_attribute_type_hint, QString idp_url, QString idp_url_type_hint, QString logout_url, QString logout_url_type_hint, QString service_provider_entity_id, QString service_provider_entity_id_type_hint, QString assertion_consumer_service_url, QString assertion_consumer_service_url_type_hint, bool handle_logout, QString handle_logout_type_hint, QString sp_private_key_alias, QString sp_private_key_alias_type_hint, bool use_encryption, QString use_encryption_type_hint, QString name_id_format, QString name_id_format_type_hint, QString digest_method, QString digest_method_type_hint, QString signature_method, QString signature_method_type_hint, QString user_intermediate_path, QString user_intermediate_path_type_hint);
    virtual void postConfigApacheFelixJettyBasedHttpService(bool org_apache_felix_https_nio, QString org_apache_felix_https_nio_type_hint, QString org_apache_felix_https_keystore, QString org_apache_felix_https_keystore_type_hint, QString org_apache_felix_https_keystore_password, QString org_apache_felix_https_keystore_password_type_hint, QString org_apache_felix_https_keystore_key, QString org_apache_felix_https_keystore_key_type_hint, QString org_apache_felix_https_keystore_key_password, QString org_apache_felix_https_keystore_key_password_type_hint, QString org_apache_felix_https_truststore, QString org_apache_felix_https_truststore_type_hint, QString org_apache_felix_https_truststore_password, QString org_apache_felix_https_truststore_password_type_hint, QString org_apache_felix_https_clientcertificate, QString org_apache_felix_https_clientcertificate_type_hint, bool org_apache_felix_https_enable, QString org_apache_felix_https_enable_type_hint, QString org_osgi_service_http_port_secure, QString org_osgi_service_http_port_secure_type_hint);
    virtual void postConfigApacheHttpComponentsProxyConfiguration(QString proxy_host, QString proxy_host_type_hint, qint32 proxy_port, QString proxy_port_type_hint, QList<QString> proxy_exceptions, QString proxy_exceptions_type_hint, bool proxy_enabled, QString proxy_enabled_type_hint, QString proxy_user, QString proxy_user_type_hint, QString proxy_password, QString proxy_password_type_hint);
    virtual void postConfigApacheSlingDavExServlet(QString alias, QString alias_type_hint, bool dav_create_absolute_uri, QString dav_create_absolute_uri_type_hint);
    virtual void postConfigApacheSlingGetServlet(QString json_maximumresults, QString json_maximumresults_type_hint, bool enable_html, QString enable_html_type_hint, bool enable_txt, QString enable_txt_type_hint, bool enable_xml, QString enable_xml_type_hint);
    virtual void postConfigApacheSlingReferrerFilter(bool allow_empty, QString allow_empty_type_hint, QString allow_hosts, QString allow_hosts_type_hint, QString allow_hosts_regexp, QString allow_hosts_regexp_type_hint, QString filter_methods, QString filter_methods_type_hint);
    virtual void postNode(QString path, QString name, QString operation, QString delete_authorizable, QIODevice* file);
    virtual void postNodeRw(QString path, QString name, QString add_members);
    virtual void postPath(QString path, QString jcrprimary_type, QString name);
    virtual void postQuery(QString path, OAINumber p_limit, QString _1_property, QString _1_property_value);
    virtual void postTreeActivation(bool ignoredeactivated, bool onlymodified, QString path);
    virtual void postTruststore(QString operation, QString new_password, QString re_password, QString key_store_type, QString remove_alias, QIODevice* certificate);
    virtual void postTruststorePKCS12(QIODevice* truststore_p12);
    

};

}

#endif // OAI_OAISlingApiHandler_H
