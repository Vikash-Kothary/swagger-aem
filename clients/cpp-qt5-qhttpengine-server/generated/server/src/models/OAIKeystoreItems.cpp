/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIKeystoreItems.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIKeystoreItems::OAIKeystoreItems(QString json) {
    this->fromJson(json);
}

OAIKeystoreItems::OAIKeystoreItems() {
    this->init();
}

OAIKeystoreItems::~OAIKeystoreItems() {
    
}

void
OAIKeystoreItems::init() {
    m_alias_isSet = false;
    m_entry_type_isSet = false;
    m_algorithm_isSet = false;
    m_format_isSet = false;
    m_chain_isSet = false;
}

void
OAIKeystoreItems::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIKeystoreItems::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(alias, json[QString("alias")]);
    
    ::OpenAPI::fromJsonValue(entry_type, json[QString("entryType")]);
    
    ::OpenAPI::fromJsonValue(algorithm, json[QString("algorithm")]);
    
    ::OpenAPI::fromJsonValue(format, json[QString("format")]);
    
    
    ::OpenAPI::fromJsonValue(chain, json[QString("chain")]);
}

QString
OAIKeystoreItems::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIKeystoreItems::asJsonObject() const {
    QJsonObject obj;
	if(m_alias_isSet){
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(alias));
    }
	if(m_entry_type_isSet){
        obj.insert(QString("entryType"), ::OpenAPI::toJsonValue(entry_type));
    }
	if(m_algorithm_isSet){
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(algorithm));
    }
	if(m_format_isSet){
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(format));
    }
	
    if(chain.size() > 0){
        obj.insert(QString("chain"), ::OpenAPI::toJsonValue(chain));
    } 
    return obj;
}

QString
OAIKeystoreItems::getAlias() const {
    return alias;
}
void
OAIKeystoreItems::setAlias(const QString &alias) {
    this->alias = alias;
    this->m_alias_isSet = true;
}

QString
OAIKeystoreItems::getEntryType() const {
    return entry_type;
}
void
OAIKeystoreItems::setEntryType(const QString &entry_type) {
    this->entry_type = entry_type;
    this->m_entry_type_isSet = true;
}

QString
OAIKeystoreItems::getAlgorithm() const {
    return algorithm;
}
void
OAIKeystoreItems::setAlgorithm(const QString &algorithm) {
    this->algorithm = algorithm;
    this->m_algorithm_isSet = true;
}

QString
OAIKeystoreItems::getFormat() const {
    return format;
}
void
OAIKeystoreItems::setFormat(const QString &format) {
    this->format = format;
    this->m_format_isSet = true;
}

QList<OAIKeystoreChainItems>
OAIKeystoreItems::getChain() const {
    return chain;
}
void
OAIKeystoreItems::setChain(const QList<OAIKeystoreChainItems> &chain) {
    this->chain = chain;
    this->m_chain_isSet = true;
}


bool
OAIKeystoreItems::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_alias_isSet){ isObjectUpdated = true; break;}
    
        if(m_entry_type_isSet){ isObjectUpdated = true; break;}
    
        if(m_algorithm_isSet){ isObjectUpdated = true; break;}
    
        if(m_format_isSet){ isObjectUpdated = true; break;}
    
        if(chain.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

