/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAITruststoreInfo.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAITruststoreInfo::OAITruststoreInfo(QString json) {
    this->fromJson(json);
}

OAITruststoreInfo::OAITruststoreInfo() {
    this->init();
}

OAITruststoreInfo::~OAITruststoreInfo() {
    
}

void
OAITruststoreInfo::init() {
    m_aliases_isSet = false;
    m_exists_isSet = false;
}

void
OAITruststoreInfo::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAITruststoreInfo::fromJsonObject(QJsonObject json) {
    
    ::OpenAPI::fromJsonValue(aliases, json[QString("aliases")]);
    ::OpenAPI::fromJsonValue(exists, json[QString("exists")]);
    
}

QString
OAITruststoreInfo::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAITruststoreInfo::asJsonObject() const {
    QJsonObject obj;
	
    if(aliases.size() > 0){
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(aliases));
    } 
	if(m_exists_isSet){
        obj.insert(QString("exists"), ::OpenAPI::toJsonValue(exists));
    }
    return obj;
}

QList<OAITruststoreItems>
OAITruststoreInfo::getAliases() const {
    return aliases;
}
void
OAITruststoreInfo::setAliases(const QList<OAITruststoreItems> &aliases) {
    this->aliases = aliases;
    this->m_aliases_isSet = true;
}

bool
OAITruststoreInfo::isExists() const {
    return exists;
}
void
OAITruststoreInfo::setExists(const bool &exists) {
    this->exists = exists;
    this->m_exists_isSet = true;
}


bool
OAITruststoreInfo::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(aliases.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_exists_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

