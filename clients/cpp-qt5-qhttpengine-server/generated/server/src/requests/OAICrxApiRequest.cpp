/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICrxApiRequest.h"

namespace OpenAPI {

OAICrxApiRequest::OAICrxApiRequest(QHttpEngine::Socket *s, OAICrxApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }     
}

OAICrxApiRequest::~OAICrxApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICrxApiRequest::~OAICrxApiRequest()";
}

QMap<QString, QString> 
OAICrxApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICrxApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICrxApiRequest::getRawSocket(){
    return socket;
}


void OAICrxApiRequest::getCrxdeStatusRequest(){
    qDebug() << "//crx/server/crx.default/jcr:root/.1.json";
    connect(this, &OAICrxApiRequest::getCrxdeStatus, handler, &OAICrxApiHandler::getCrxdeStatus);
    
    


    emit getCrxdeStatus();
}


void OAICrxApiRequest::getInstallStatusRequest(){
    qDebug() << "//crx/packmgr/installstatus.jsp";
    connect(this, &OAICrxApiRequest::getInstallStatus, handler, &OAICrxApiHandler::getInstallStatus);
    
    


    emit getInstallStatus();
}


void OAICrxApiRequest::getPackageManagerServletRequest(){
    qDebug() << "//crx/packmgr/service/script.html";
    connect(this, &OAICrxApiRequest::getPackageManagerServlet, handler, &OAICrxApiHandler::getPackageManagerServlet);
    
    


    emit getPackageManagerServlet();
}


void OAICrxApiRequest::postPackageServiceRequest(){
    qDebug() << "//crx/packmgr/service.jsp";
    connect(this, &OAICrxApiRequest::postPackageService, handler, &OAICrxApiHandler::postPackageService);
    
    
    QString cmd;   
    if(socket->queryString().keys().contains("cmd")){
        fromStringValue(socket->queryString().value("cmd"), cmd);
    }
    


    emit postPackageService( cmd);
}


void OAICrxApiRequest::postPackageServiceJsonRequest(const QString& pathstr){
    qDebug() << "//crx/packmgr/service/.json/{path}";
    connect(this, &OAICrxApiRequest::postPackageServiceJson, handler, &OAICrxApiHandler::postPackageServiceJson);
    
    
    QString cmd;   
    if(socket->queryString().keys().contains("cmd")){
        fromStringValue(socket->queryString().value("cmd"), cmd);
    }
    
    QString group_name;   
    if(socket->queryString().keys().contains("group_name")){
        fromStringValue(socket->queryString().value("group_name"), group_name);
    }
    
    QString package_name;   
    if(socket->queryString().keys().contains("package_name")){
        fromStringValue(socket->queryString().value("package_name"), package_name);
    }
    
    QString package_version;   
    if(socket->queryString().keys().contains("package_version")){
        fromStringValue(socket->queryString().value("package_version"), package_version);
    }
    
    QString _charset_;   
    if(socket->queryString().keys().contains("_charset_")){
        fromStringValue(socket->queryString().value("_charset_"), _charset_);
    }
    
    bool force;   
    if(socket->queryString().keys().contains("force")){
        fromStringValue(socket->queryString().value("force"), force);
    }
    
    bool recursive;   
    if(socket->queryString().keys().contains("recursive")){
        fromStringValue(socket->queryString().value("recursive"), recursive);
    }
    
    QString path;
    fromStringValue(pathstr, path);
    
    QIODevice* package;

    emit postPackageServiceJson( path,  cmd,  group_name,  package_name,  package_version,  _charset_,  force,  recursive,  package);
}


void OAICrxApiRequest::postPackageUpdateRequest(){
    qDebug() << "//crx/packmgr/update.jsp";
    connect(this, &OAICrxApiRequest::postPackageUpdate, handler, &OAICrxApiHandler::postPackageUpdate);
    
    
    QString group_name;   
    if(socket->queryString().keys().contains("group_name")){
        fromStringValue(socket->queryString().value("group_name"), group_name);
    }
    
    QString package_name;   
    if(socket->queryString().keys().contains("package_name")){
        fromStringValue(socket->queryString().value("package_name"), package_name);
    }
    
    QString version;   
    if(socket->queryString().keys().contains("version")){
        fromStringValue(socket->queryString().value("version"), version);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    QString filter;   
    if(socket->queryString().keys().contains("filter")){
        fromStringValue(socket->queryString().value("filter"), filter);
    }
    
    QString _charset_;   
    if(socket->queryString().keys().contains("_charset_")){
        fromStringValue(socket->queryString().value("_charset_"), _charset_);
    }
    


    emit postPackageUpdate( group_name,  package_name,  version,  path,  filter,  _charset_);
}


void OAICrxApiRequest::postSetPasswordRequest(){
    qDebug() << "//crx/explorer/ui/setpassword.jsp";
    connect(this, &OAICrxApiRequest::postSetPassword, handler, &OAICrxApiHandler::postSetPassword);
    
    
    QString old;   
    if(socket->queryString().keys().contains("old")){
        fromStringValue(socket->queryString().value("old"), old);
    }
    
    QString plain;   
    if(socket->queryString().keys().contains("plain")){
        fromStringValue(socket->queryString().value("plain"), plain);
    }
    
    QString verify;   
    if(socket->queryString().keys().contains("verify")){
        fromStringValue(socket->queryString().value("verify"), verify);
    }
    


    emit postSetPassword( old,  plain,  verify);
}

  

void OAICrxApiRequest::getCrxdeStatusResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::getInstallStatusResponse(const OAIInstallStatus& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::getPackageManagerServletResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postPackageServiceResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postPackageServiceJsonResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postPackageUpdateResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postSetPasswordResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICrxApiRequest::getCrxdeStatusError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::getInstallStatusError(const OAIInstallStatus& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::getPackageManagerServletError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postPackageServiceError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postPackageServiceJsonError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postPackageUpdateError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICrxApiRequest::postSetPasswordError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICrxApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}
    
void OAICrxApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
