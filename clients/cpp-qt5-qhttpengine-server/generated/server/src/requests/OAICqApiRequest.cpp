/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICqApiRequest.h"

namespace OpenAPI {

OAICqApiRequest::OAICqApiRequest(QHttpEngine::Socket *s, OAICqApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }     
}

OAICqApiRequest::~OAICqApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICqApiRequest::~OAICqApiRequest()";
}

QMap<QString, QString> 
OAICqApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICqApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICqApiRequest::getRawSocket(){
    return socket;
}


void OAICqApiRequest::getLoginPageRequest(){
    qDebug() << "//libs/granite/core/content/login.html";
    connect(this, &OAICqApiRequest::getLoginPage, handler, &OAICqApiHandler::getLoginPage);
    
    


    emit getLoginPage();
}


void OAICqApiRequest::postCqActionsRequest(){
    qDebug() << "//.cqactions.html";
    connect(this, &OAICqApiRequest::postCqActions, handler, &OAICqApiHandler::postCqActions);
    
    
    QString authorizable_id;   
    if(socket->queryString().keys().contains("authorizable_id")){
        fromStringValue(socket->queryString().value("authorizable_id"), authorizable_id);
    }
    
    QString changelog;   
    if(socket->queryString().keys().contains("changelog")){
        fromStringValue(socket->queryString().value("changelog"), changelog);
    }
    


    emit postCqActions( authorizable_id,  changelog);
}

  

void OAICqApiRequest::getLoginPageResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICqApiRequest::postCqActionsResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICqApiRequest::getLoginPageError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICqApiRequest::postCqActionsError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICqApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}
    
void OAICqApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
