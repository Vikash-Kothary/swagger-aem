/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAICustomApiRequest.h"

namespace OpenAPI {

OAICustomApiRequest::OAICustomApiRequest(QHttpEngine::Socket *s, OAICustomApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }     
}

OAICustomApiRequest::~OAICustomApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAICustomApiRequest::~OAICustomApiRequest()";
}

QMap<QString, QString> 
OAICustomApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAICustomApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAICustomApiRequest::getRawSocket(){
    return socket;
}


void OAICustomApiRequest::getAemHealthCheckRequest(){
    qDebug() << "//system/health";
    connect(this, &OAICustomApiRequest::getAemHealthCheck, handler, &OAICustomApiHandler::getAemHealthCheck);
    
    
    QString tags;   
    if(socket->queryString().keys().contains("tags")){
        fromStringValue(socket->queryString().value("tags"), tags);
    }
    
    bool combine_tags_or;   
    if(socket->queryString().keys().contains("combine_tags_or")){
        fromStringValue(socket->queryString().value("combine_tags_or"), combine_tags_or);
    }
    


    emit getAemHealthCheck( tags,  combine_tags_or);
}


void OAICustomApiRequest::postConfigAemHealthCheckServletRequest(){
    qDebug() << "//apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck";
    connect(this, &OAICustomApiRequest::postConfigAemHealthCheckServlet, handler, &OAICustomApiHandler::postConfigAemHealthCheckServlet);
    
    
    QList<QString> bundles_ignored;   
    if(socket->queryString().keys().contains("bundles_ignored")){
        fromStringValue(socket->queryString().values("bundles_ignored"), bundles_ignored);
    }
    
    QString bundles_ignored_type_hint;   
    if(socket->queryString().keys().contains("bundles_ignored_type_hint")){
        fromStringValue(socket->queryString().value("bundles_ignored_type_hint"), bundles_ignored_type_hint);
    }
    


    emit postConfigAemHealthCheckServlet( bundles_ignored,  bundles_ignored_type_hint);
}


void OAICustomApiRequest::postConfigAemPasswordResetRequest(){
    qDebug() << "//apps/system/config/com.shinesolutions.aem.passwordreset.Activator";
    connect(this, &OAICustomApiRequest::postConfigAemPasswordReset, handler, &OAICustomApiHandler::postConfigAemPasswordReset);
    
    
    QList<QString> pwdreset_authorizables;   
    if(socket->queryString().keys().contains("pwdreset_authorizables")){
        fromStringValue(socket->queryString().values("pwdreset_authorizables"), pwdreset_authorizables);
    }
    
    QString pwdreset_authorizables_type_hint;   
    if(socket->queryString().keys().contains("pwdreset_authorizables_type_hint")){
        fromStringValue(socket->queryString().value("pwdreset_authorizables_type_hint"), pwdreset_authorizables_type_hint);
    }
    


    emit postConfigAemPasswordReset( pwdreset_authorizables,  pwdreset_authorizables_type_hint);
}

  

void OAICustomApiRequest::getAemHealthCheckResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomApiRequest::postConfigAemHealthCheckServletResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomApiRequest::postConfigAemPasswordResetResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICustomApiRequest::getAemHealthCheckError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomApiRequest::postConfigAemHealthCheckServletError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAICustomApiRequest::postConfigAemPasswordResetError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAICustomApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}
    
void OAICustomApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
