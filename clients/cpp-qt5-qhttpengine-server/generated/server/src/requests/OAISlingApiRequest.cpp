/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAISlingApiRequest.h"

namespace OpenAPI {

OAISlingApiRequest::OAISlingApiRequest(QHttpEngine::Socket *s, OAISlingApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }     
}

OAISlingApiRequest::~OAISlingApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAISlingApiRequest::~OAISlingApiRequest()";
}

QMap<QString, QString> 
OAISlingApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAISlingApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAISlingApiRequest::getRawSocket(){
    return socket;
}


void OAISlingApiRequest::deleteAgentRequest(const QString& runmodestr, const QString& namestr){
    qDebug() << "//etc/replication/agents.{runmode}/{name}";
    connect(this, &OAISlingApiRequest::deleteAgent, handler, &OAISlingApiHandler::deleteAgent);
    
    
    QString runmode;
    fromStringValue(runmodestr, runmode);
        QString name;
    fromStringValue(namestr, name);
    

    emit deleteAgent( runmode,  name);
}


void OAISlingApiRequest::deleteNodeRequest(const QString& pathstr, const QString& namestr){
    qDebug() << "//{path}/{name}";
    connect(this, &OAISlingApiRequest::deleteNode, handler, &OAISlingApiHandler::deleteNode);
    
    
    QString path;
    fromStringValue(pathstr, path);
        QString name;
    fromStringValue(namestr, name);
    

    emit deleteNode( path,  name);
}


void OAISlingApiRequest::getAgentRequest(const QString& runmodestr, const QString& namestr){
    qDebug() << "//etc/replication/agents.{runmode}/{name}";
    connect(this, &OAISlingApiRequest::getAgent, handler, &OAISlingApiHandler::getAgent);
    
    
    QString runmode;
    fromStringValue(runmodestr, runmode);
        QString name;
    fromStringValue(namestr, name);
    

    emit getAgent( runmode,  name);
}


void OAISlingApiRequest::getAgentsRequest(const QString& runmodestr){
    qDebug() << "//etc/replication/agents.{runmode}.-1.json";
    connect(this, &OAISlingApiRequest::getAgents, handler, &OAISlingApiHandler::getAgents);
    
    
    QString runmode;
    fromStringValue(runmodestr, runmode);
    

    emit getAgents( runmode);
}


void OAISlingApiRequest::getAuthorizableKeystoreRequest(const QString& intermediate_pathstr, const QString& authorizable_idstr){
    qDebug() << "//{intermediatePath}/{authorizableId}.ks.json";
    connect(this, &OAISlingApiRequest::getAuthorizableKeystore, handler, &OAISlingApiHandler::getAuthorizableKeystore);
    
    
    QString intermediate_path;
    fromStringValue(intermediate_pathstr, intermediate_path);
        QString authorizable_id;
    fromStringValue(authorizable_idstr, authorizable_id);
    

    emit getAuthorizableKeystore( intermediate_path,  authorizable_id);
}


void OAISlingApiRequest::getKeystoreRequest(const QString& intermediate_pathstr, const QString& authorizable_idstr){
    qDebug() << "//{intermediatePath}/{authorizableId}/keystore/store.p12";
    connect(this, &OAISlingApiRequest::getKeystore, handler, &OAISlingApiHandler::getKeystore);
    
    
    QString intermediate_path;
    fromStringValue(intermediate_pathstr, intermediate_path);
        QString authorizable_id;
    fromStringValue(authorizable_idstr, authorizable_id);
    

    emit getKeystore( intermediate_path,  authorizable_id);
}


void OAISlingApiRequest::getNodeRequest(const QString& pathstr, const QString& namestr){
    qDebug() << "//{path}/{name}";
    connect(this, &OAISlingApiRequest::getNode, handler, &OAISlingApiHandler::getNode);
    
    
    QString path;
    fromStringValue(pathstr, path);
        QString name;
    fromStringValue(namestr, name);
    

    emit getNode( path,  name);
}


void OAISlingApiRequest::getPackageRequest(const QString& groupstr, const QString& namestr, const QString& versionstr){
    qDebug() << "//etc/packages/{group}/{name}-{version}.zip";
    connect(this, &OAISlingApiRequest::getPackage, handler, &OAISlingApiHandler::getPackage);
    
    
    QString group;
    fromStringValue(groupstr, group);
        QString name;
    fromStringValue(namestr, name);
        QString version;
    fromStringValue(versionstr, version);
    

    emit getPackage( group,  name,  version);
}


void OAISlingApiRequest::getPackageFilterRequest(const QString& groupstr, const QString& namestr, const QString& versionstr){
    qDebug() << "//etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json";
    connect(this, &OAISlingApiRequest::getPackageFilter, handler, &OAISlingApiHandler::getPackageFilter);
    
    
    QString group;
    fromStringValue(groupstr, group);
        QString name;
    fromStringValue(namestr, name);
        QString version;
    fromStringValue(versionstr, version);
    

    emit getPackageFilter( group,  name,  version);
}


void OAISlingApiRequest::getQueryRequest(){
    qDebug() << "//bin/querybuilder.json";
    connect(this, &OAISlingApiRequest::getQuery, handler, &OAISlingApiHandler::getQuery);
    
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    OAINumber p_limit;   
    if(socket->queryString().keys().contains("p_limit")){
        fromStringValue(socket->queryString().value("p_limit"), p_limit);
    }
    
    QString _1_property;   
    if(socket->queryString().keys().contains("_1_property")){
        fromStringValue(socket->queryString().value("_1_property"), _1_property);
    }
    
    QString _1_property_value;   
    if(socket->queryString().keys().contains("_1_property_value")){
        fromStringValue(socket->queryString().value("_1_property_value"), _1_property_value);
    }
    


    emit getQuery( path,  p_limit,  _1_property,  _1_property_value);
}


void OAISlingApiRequest::getTruststoreRequest(){
    qDebug() << "//etc/truststore/truststore.p12";
    connect(this, &OAISlingApiRequest::getTruststore, handler, &OAISlingApiHandler::getTruststore);
    
    


    emit getTruststore();
}


void OAISlingApiRequest::getTruststoreInfoRequest(){
    qDebug() << "//libs/granite/security/truststore.json";
    connect(this, &OAISlingApiRequest::getTruststoreInfo, handler, &OAISlingApiHandler::getTruststoreInfo);
    
    


    emit getTruststoreInfo();
}


void OAISlingApiRequest::postAgentRequest(const QString& runmodestr, const QString& namestr){
    qDebug() << "//etc/replication/agents.{runmode}/{name}";
    connect(this, &OAISlingApiRequest::postAgent, handler, &OAISlingApiHandler::postAgent);
    
    
    bool jcrcontentcqdistribute;   
    if(socket->queryString().keys().contains("jcrcontentcqdistribute")){
        fromStringValue(socket->queryString().value("jcrcontentcqdistribute"), jcrcontentcqdistribute);
    }
    
    QString jcrcontentcqdistribute_type_hint;   
    if(socket->queryString().keys().contains("jcrcontentcqdistribute_type_hint")){
        fromStringValue(socket->queryString().value("jcrcontentcqdistribute_type_hint"), jcrcontentcqdistribute_type_hint);
    }
    
    QString jcrcontentcqname;   
    if(socket->queryString().keys().contains("jcrcontentcqname")){
        fromStringValue(socket->queryString().value("jcrcontentcqname"), jcrcontentcqname);
    }
    
    QString jcrcontentcqtemplate;   
    if(socket->queryString().keys().contains("jcrcontentcqtemplate")){
        fromStringValue(socket->queryString().value("jcrcontentcqtemplate"), jcrcontentcqtemplate);
    }
    
    bool jcrcontentenabled;   
    if(socket->queryString().keys().contains("jcrcontentenabled")){
        fromStringValue(socket->queryString().value("jcrcontentenabled"), jcrcontentenabled);
    }
    
    QString jcrcontentjcrdescription;   
    if(socket->queryString().keys().contains("jcrcontentjcrdescription")){
        fromStringValue(socket->queryString().value("jcrcontentjcrdescription"), jcrcontentjcrdescription);
    }
    
    QString jcrcontentjcrlast_modified;   
    if(socket->queryString().keys().contains("jcrcontentjcrlast_modified")){
        fromStringValue(socket->queryString().value("jcrcontentjcrlast_modified"), jcrcontentjcrlast_modified);
    }
    
    QString jcrcontentjcrlast_modified_by;   
    if(socket->queryString().keys().contains("jcrcontentjcrlast_modified_by")){
        fromStringValue(socket->queryString().value("jcrcontentjcrlast_modified_by"), jcrcontentjcrlast_modified_by);
    }
    
    QString jcrcontentjcrmixin_types;   
    if(socket->queryString().keys().contains("jcrcontentjcrmixin_types")){
        fromStringValue(socket->queryString().value("jcrcontentjcrmixin_types"), jcrcontentjcrmixin_types);
    }
    
    QString jcrcontentjcrtitle;   
    if(socket->queryString().keys().contains("jcrcontentjcrtitle")){
        fromStringValue(socket->queryString().value("jcrcontentjcrtitle"), jcrcontentjcrtitle);
    }
    
    QString jcrcontentlog_level;   
    if(socket->queryString().keys().contains("jcrcontentlog_level")){
        fromStringValue(socket->queryString().value("jcrcontentlog_level"), jcrcontentlog_level);
    }
    
    bool jcrcontentno_status_update;   
    if(socket->queryString().keys().contains("jcrcontentno_status_update")){
        fromStringValue(socket->queryString().value("jcrcontentno_status_update"), jcrcontentno_status_update);
    }
    
    bool jcrcontentno_versioning;   
    if(socket->queryString().keys().contains("jcrcontentno_versioning")){
        fromStringValue(socket->queryString().value("jcrcontentno_versioning"), jcrcontentno_versioning);
    }
    
    OAINumber jcrcontentprotocol_connect_timeout;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_connect_timeout")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_connect_timeout"), jcrcontentprotocol_connect_timeout);
    }
    
    bool jcrcontentprotocol_http_connection_closed;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_http_connection_closed")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_http_connection_closed"), jcrcontentprotocol_http_connection_closed);
    }
    
    QString jcrcontentprotocol_http_expired;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_http_expired")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_http_expired"), jcrcontentprotocol_http_expired);
    }
    
    QList<QString> jcrcontentprotocol_http_headers;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_http_headers")){
        fromStringValue(socket->queryString().values("jcrcontentprotocol_http_headers"), jcrcontentprotocol_http_headers);
    }
    
    QString jcrcontentprotocol_http_headers_type_hint;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_http_headers_type_hint")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_http_headers_type_hint"), jcrcontentprotocol_http_headers_type_hint);
    }
    
    QString jcrcontentprotocol_http_method;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_http_method")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_http_method"), jcrcontentprotocol_http_method);
    }
    
    bool jcrcontentprotocol_https_relaxed;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_https_relaxed")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_https_relaxed"), jcrcontentprotocol_https_relaxed);
    }
    
    QString jcrcontentprotocol_interface;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_interface")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_interface"), jcrcontentprotocol_interface);
    }
    
    OAINumber jcrcontentprotocol_socket_timeout;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_socket_timeout")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_socket_timeout"), jcrcontentprotocol_socket_timeout);
    }
    
    QString jcrcontentprotocol_version;   
    if(socket->queryString().keys().contains("jcrcontentprotocol_version")){
        fromStringValue(socket->queryString().value("jcrcontentprotocol_version"), jcrcontentprotocol_version);
    }
    
    QString jcrcontentproxy_ntlm_domain;   
    if(socket->queryString().keys().contains("jcrcontentproxy_ntlm_domain")){
        fromStringValue(socket->queryString().value("jcrcontentproxy_ntlm_domain"), jcrcontentproxy_ntlm_domain);
    }
    
    QString jcrcontentproxy_ntlm_host;   
    if(socket->queryString().keys().contains("jcrcontentproxy_ntlm_host")){
        fromStringValue(socket->queryString().value("jcrcontentproxy_ntlm_host"), jcrcontentproxy_ntlm_host);
    }
    
    QString jcrcontentproxy_host;   
    if(socket->queryString().keys().contains("jcrcontentproxy_host")){
        fromStringValue(socket->queryString().value("jcrcontentproxy_host"), jcrcontentproxy_host);
    }
    
    QString jcrcontentproxy_password;   
    if(socket->queryString().keys().contains("jcrcontentproxy_password")){
        fromStringValue(socket->queryString().value("jcrcontentproxy_password"), jcrcontentproxy_password);
    }
    
    OAINumber jcrcontentproxy_port;   
    if(socket->queryString().keys().contains("jcrcontentproxy_port")){
        fromStringValue(socket->queryString().value("jcrcontentproxy_port"), jcrcontentproxy_port);
    }
    
    QString jcrcontentproxy_user;   
    if(socket->queryString().keys().contains("jcrcontentproxy_user")){
        fromStringValue(socket->queryString().value("jcrcontentproxy_user"), jcrcontentproxy_user);
    }
    
    OAINumber jcrcontentqueue_batch_max_size;   
    if(socket->queryString().keys().contains("jcrcontentqueue_batch_max_size")){
        fromStringValue(socket->queryString().value("jcrcontentqueue_batch_max_size"), jcrcontentqueue_batch_max_size);
    }
    
    QString jcrcontentqueue_batch_mode;   
    if(socket->queryString().keys().contains("jcrcontentqueue_batch_mode")){
        fromStringValue(socket->queryString().value("jcrcontentqueue_batch_mode"), jcrcontentqueue_batch_mode);
    }
    
    OAINumber jcrcontentqueue_batch_wait_time;   
    if(socket->queryString().keys().contains("jcrcontentqueue_batch_wait_time")){
        fromStringValue(socket->queryString().value("jcrcontentqueue_batch_wait_time"), jcrcontentqueue_batch_wait_time);
    }
    
    QString jcrcontentretry_delay;   
    if(socket->queryString().keys().contains("jcrcontentretry_delay")){
        fromStringValue(socket->queryString().value("jcrcontentretry_delay"), jcrcontentretry_delay);
    }
    
    bool jcrcontentreverse_replication;   
    if(socket->queryString().keys().contains("jcrcontentreverse_replication")){
        fromStringValue(socket->queryString().value("jcrcontentreverse_replication"), jcrcontentreverse_replication);
    }
    
    QString jcrcontentserialization_type;   
    if(socket->queryString().keys().contains("jcrcontentserialization_type")){
        fromStringValue(socket->queryString().value("jcrcontentserialization_type"), jcrcontentserialization_type);
    }
    
    QString jcrcontentslingresource_type;   
    if(socket->queryString().keys().contains("jcrcontentslingresource_type")){
        fromStringValue(socket->queryString().value("jcrcontentslingresource_type"), jcrcontentslingresource_type);
    }
    
    QString jcrcontentssl;   
    if(socket->queryString().keys().contains("jcrcontentssl")){
        fromStringValue(socket->queryString().value("jcrcontentssl"), jcrcontentssl);
    }
    
    QString jcrcontenttransport_ntlm_domain;   
    if(socket->queryString().keys().contains("jcrcontenttransport_ntlm_domain")){
        fromStringValue(socket->queryString().value("jcrcontenttransport_ntlm_domain"), jcrcontenttransport_ntlm_domain);
    }
    
    QString jcrcontenttransport_ntlm_host;   
    if(socket->queryString().keys().contains("jcrcontenttransport_ntlm_host")){
        fromStringValue(socket->queryString().value("jcrcontenttransport_ntlm_host"), jcrcontenttransport_ntlm_host);
    }
    
    QString jcrcontenttransport_password;   
    if(socket->queryString().keys().contains("jcrcontenttransport_password")){
        fromStringValue(socket->queryString().value("jcrcontenttransport_password"), jcrcontenttransport_password);
    }
    
    QString jcrcontenttransport_uri;   
    if(socket->queryString().keys().contains("jcrcontenttransport_uri")){
        fromStringValue(socket->queryString().value("jcrcontenttransport_uri"), jcrcontenttransport_uri);
    }
    
    QString jcrcontenttransport_user;   
    if(socket->queryString().keys().contains("jcrcontenttransport_user")){
        fromStringValue(socket->queryString().value("jcrcontenttransport_user"), jcrcontenttransport_user);
    }
    
    bool jcrcontenttrigger_distribute;   
    if(socket->queryString().keys().contains("jcrcontenttrigger_distribute")){
        fromStringValue(socket->queryString().value("jcrcontenttrigger_distribute"), jcrcontenttrigger_distribute);
    }
    
    bool jcrcontenttrigger_modified;   
    if(socket->queryString().keys().contains("jcrcontenttrigger_modified")){
        fromStringValue(socket->queryString().value("jcrcontenttrigger_modified"), jcrcontenttrigger_modified);
    }
    
    bool jcrcontenttrigger_on_off_time;   
    if(socket->queryString().keys().contains("jcrcontenttrigger_on_off_time")){
        fromStringValue(socket->queryString().value("jcrcontenttrigger_on_off_time"), jcrcontenttrigger_on_off_time);
    }
    
    bool jcrcontenttrigger_receive;   
    if(socket->queryString().keys().contains("jcrcontenttrigger_receive")){
        fromStringValue(socket->queryString().value("jcrcontenttrigger_receive"), jcrcontenttrigger_receive);
    }
    
    bool jcrcontenttrigger_specific;   
    if(socket->queryString().keys().contains("jcrcontenttrigger_specific")){
        fromStringValue(socket->queryString().value("jcrcontenttrigger_specific"), jcrcontenttrigger_specific);
    }
    
    QString jcrcontentuser_id;   
    if(socket->queryString().keys().contains("jcrcontentuser_id")){
        fromStringValue(socket->queryString().value("jcrcontentuser_id"), jcrcontentuser_id);
    }
    
    QString jcrprimary_type;   
    if(socket->queryString().keys().contains("jcrprimary_type")){
        fromStringValue(socket->queryString().value("jcrprimary_type"), jcrprimary_type);
    }
    
    QString operation;   
    if(socket->queryString().keys().contains("operation")){
        fromStringValue(socket->queryString().value("operation"), operation);
    }
    
    QString runmode;
    fromStringValue(runmodestr, runmode);
        QString name;
    fromStringValue(namestr, name);
    

    emit postAgent( runmode,  name,  jcrcontentcqdistribute,  jcrcontentcqdistribute_type_hint,  jcrcontentcqname,  jcrcontentcqtemplate,  jcrcontentenabled,  jcrcontentjcrdescription,  jcrcontentjcrlast_modified,  jcrcontentjcrlast_modified_by,  jcrcontentjcrmixin_types,  jcrcontentjcrtitle,  jcrcontentlog_level,  jcrcontentno_status_update,  jcrcontentno_versioning,  jcrcontentprotocol_connect_timeout,  jcrcontentprotocol_http_connection_closed,  jcrcontentprotocol_http_expired,  jcrcontentprotocol_http_headers,  jcrcontentprotocol_http_headers_type_hint,  jcrcontentprotocol_http_method,  jcrcontentprotocol_https_relaxed,  jcrcontentprotocol_interface,  jcrcontentprotocol_socket_timeout,  jcrcontentprotocol_version,  jcrcontentproxy_ntlm_domain,  jcrcontentproxy_ntlm_host,  jcrcontentproxy_host,  jcrcontentproxy_password,  jcrcontentproxy_port,  jcrcontentproxy_user,  jcrcontentqueue_batch_max_size,  jcrcontentqueue_batch_mode,  jcrcontentqueue_batch_wait_time,  jcrcontentretry_delay,  jcrcontentreverse_replication,  jcrcontentserialization_type,  jcrcontentslingresource_type,  jcrcontentssl,  jcrcontenttransport_ntlm_domain,  jcrcontenttransport_ntlm_host,  jcrcontenttransport_password,  jcrcontenttransport_uri,  jcrcontenttransport_user,  jcrcontenttrigger_distribute,  jcrcontenttrigger_modified,  jcrcontenttrigger_on_off_time,  jcrcontenttrigger_receive,  jcrcontenttrigger_specific,  jcrcontentuser_id,  jcrprimary_type,  operation);
}


void OAISlingApiRequest::postAuthorizableKeystoreRequest(const QString& intermediate_pathstr, const QString& authorizable_idstr){
    qDebug() << "//{intermediatePath}/{authorizableId}.ks.html";
    connect(this, &OAISlingApiRequest::postAuthorizableKeystore, handler, &OAISlingApiHandler::postAuthorizableKeystore);
    
    
    QString operation;   
    if(socket->queryString().keys().contains("operation")){
        fromStringValue(socket->queryString().value("operation"), operation);
    }
    
    QString current_password;   
    if(socket->queryString().keys().contains("current_password")){
        fromStringValue(socket->queryString().value("current_password"), current_password);
    }
    
    QString new_password;   
    if(socket->queryString().keys().contains("new_password")){
        fromStringValue(socket->queryString().value("new_password"), new_password);
    }
    
    QString re_password;   
    if(socket->queryString().keys().contains("re_password")){
        fromStringValue(socket->queryString().value("re_password"), re_password);
    }
    
    QString key_password;   
    if(socket->queryString().keys().contains("key_password")){
        fromStringValue(socket->queryString().value("key_password"), key_password);
    }
    
    QString key_store_pass;   
    if(socket->queryString().keys().contains("key_store_pass")){
        fromStringValue(socket->queryString().value("key_store_pass"), key_store_pass);
    }
    
    QString alias;   
    if(socket->queryString().keys().contains("alias")){
        fromStringValue(socket->queryString().value("alias"), alias);
    }
    
    QString new_alias;   
    if(socket->queryString().keys().contains("new_alias")){
        fromStringValue(socket->queryString().value("new_alias"), new_alias);
    }
    
    QString remove_alias;   
    if(socket->queryString().keys().contains("remove_alias")){
        fromStringValue(socket->queryString().value("remove_alias"), remove_alias);
    }
    
    QString intermediate_path;
    fromStringValue(intermediate_pathstr, intermediate_path);
        QString authorizable_id;
    fromStringValue(authorizable_idstr, authorizable_id);
    
    QIODevice* cert_chain;
    QIODevice* pk;
    QIODevice* key_store;

    emit postAuthorizableKeystore( intermediate_path,  authorizable_id,  operation,  current_password,  new_password,  re_password,  key_password,  key_store_pass,  alias,  new_alias,  remove_alias,  cert_chain,  pk,  key_store);
}


void OAISlingApiRequest::postAuthorizablesRequest(){
    qDebug() << "//libs/granite/security/post/authorizables";
    connect(this, &OAISlingApiRequest::postAuthorizables, handler, &OAISlingApiHandler::postAuthorizables);
    
    
    QString authorizable_id;   
    if(socket->queryString().keys().contains("authorizable_id")){
        fromStringValue(socket->queryString().value("authorizable_id"), authorizable_id);
    }
    
    QString intermediate_path;   
    if(socket->queryString().keys().contains("intermediate_path")){
        fromStringValue(socket->queryString().value("intermediate_path"), intermediate_path);
    }
    
    QString create_user;   
    if(socket->queryString().keys().contains("create_user")){
        fromStringValue(socket->queryString().value("create_user"), create_user);
    }
    
    QString create_group;   
    if(socket->queryString().keys().contains("create_group")){
        fromStringValue(socket->queryString().value("create_group"), create_group);
    }
    
    QString reppassword;   
    if(socket->queryString().keys().contains("reppassword")){
        fromStringValue(socket->queryString().value("reppassword"), reppassword);
    }
    
    QString profilegiven_name;   
    if(socket->queryString().keys().contains("profilegiven_name")){
        fromStringValue(socket->queryString().value("profilegiven_name"), profilegiven_name);
    }
    


    emit postAuthorizables( authorizable_id,  intermediate_path,  create_user,  create_group,  reppassword,  profilegiven_name);
}


void OAISlingApiRequest::postConfigAdobeGraniteSamlAuthenticationHandlerRequest(){
    qDebug() << "//apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config";
    connect(this, &OAISlingApiRequest::postConfigAdobeGraniteSamlAuthenticationHandler, handler, &OAISlingApiHandler::postConfigAdobeGraniteSamlAuthenticationHandler);
    
    
    QString key_store_password;   
    if(socket->queryString().keys().contains("key_store_password")){
        fromStringValue(socket->queryString().value("key_store_password"), key_store_password);
    }
    
    QString key_store_password_type_hint;   
    if(socket->queryString().keys().contains("key_store_password_type_hint")){
        fromStringValue(socket->queryString().value("key_store_password_type_hint"), key_store_password_type_hint);
    }
    
    qint32 service_ranking;   
    if(socket->queryString().keys().contains("service_ranking")){
        fromStringValue(socket->queryString().value("service_ranking"), service_ranking);
    }
    
    QString service_ranking_type_hint;   
    if(socket->queryString().keys().contains("service_ranking_type_hint")){
        fromStringValue(socket->queryString().value("service_ranking_type_hint"), service_ranking_type_hint);
    }
    
    bool idp_http_redirect;   
    if(socket->queryString().keys().contains("idp_http_redirect")){
        fromStringValue(socket->queryString().value("idp_http_redirect"), idp_http_redirect);
    }
    
    QString idp_http_redirect_type_hint;   
    if(socket->queryString().keys().contains("idp_http_redirect_type_hint")){
        fromStringValue(socket->queryString().value("idp_http_redirect_type_hint"), idp_http_redirect_type_hint);
    }
    
    bool create_user;   
    if(socket->queryString().keys().contains("create_user")){
        fromStringValue(socket->queryString().value("create_user"), create_user);
    }
    
    QString create_user_type_hint;   
    if(socket->queryString().keys().contains("create_user_type_hint")){
        fromStringValue(socket->queryString().value("create_user_type_hint"), create_user_type_hint);
    }
    
    QString default_redirect_url;   
    if(socket->queryString().keys().contains("default_redirect_url")){
        fromStringValue(socket->queryString().value("default_redirect_url"), default_redirect_url);
    }
    
    QString default_redirect_url_type_hint;   
    if(socket->queryString().keys().contains("default_redirect_url_type_hint")){
        fromStringValue(socket->queryString().value("default_redirect_url_type_hint"), default_redirect_url_type_hint);
    }
    
    QString user_id_attribute;   
    if(socket->queryString().keys().contains("user_id_attribute")){
        fromStringValue(socket->queryString().value("user_id_attribute"), user_id_attribute);
    }
    
    QString user_id_attribute_type_hint;   
    if(socket->queryString().keys().contains("user_id_attribute_type_hint")){
        fromStringValue(socket->queryString().value("user_id_attribute_type_hint"), user_id_attribute_type_hint);
    }
    
    QList<QString> default_groups;   
    if(socket->queryString().keys().contains("default_groups")){
        fromStringValue(socket->queryString().values("default_groups"), default_groups);
    }
    
    QString default_groups_type_hint;   
    if(socket->queryString().keys().contains("default_groups_type_hint")){
        fromStringValue(socket->queryString().value("default_groups_type_hint"), default_groups_type_hint);
    }
    
    QString idp_cert_alias;   
    if(socket->queryString().keys().contains("idp_cert_alias")){
        fromStringValue(socket->queryString().value("idp_cert_alias"), idp_cert_alias);
    }
    
    QString idp_cert_alias_type_hint;   
    if(socket->queryString().keys().contains("idp_cert_alias_type_hint")){
        fromStringValue(socket->queryString().value("idp_cert_alias_type_hint"), idp_cert_alias_type_hint);
    }
    
    bool add_group_memberships;   
    if(socket->queryString().keys().contains("add_group_memberships")){
        fromStringValue(socket->queryString().value("add_group_memberships"), add_group_memberships);
    }
    
    QString add_group_memberships_type_hint;   
    if(socket->queryString().keys().contains("add_group_memberships_type_hint")){
        fromStringValue(socket->queryString().value("add_group_memberships_type_hint"), add_group_memberships_type_hint);
    }
    
    QList<QString> path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().values("path"), path);
    }
    
    QString path_type_hint;   
    if(socket->queryString().keys().contains("path_type_hint")){
        fromStringValue(socket->queryString().value("path_type_hint"), path_type_hint);
    }
    
    QList<QString> synchronize_attributes;   
    if(socket->queryString().keys().contains("synchronize_attributes")){
        fromStringValue(socket->queryString().values("synchronize_attributes"), synchronize_attributes);
    }
    
    QString synchronize_attributes_type_hint;   
    if(socket->queryString().keys().contains("synchronize_attributes_type_hint")){
        fromStringValue(socket->queryString().value("synchronize_attributes_type_hint"), synchronize_attributes_type_hint);
    }
    
    qint32 clock_tolerance;   
    if(socket->queryString().keys().contains("clock_tolerance")){
        fromStringValue(socket->queryString().value("clock_tolerance"), clock_tolerance);
    }
    
    QString clock_tolerance_type_hint;   
    if(socket->queryString().keys().contains("clock_tolerance_type_hint")){
        fromStringValue(socket->queryString().value("clock_tolerance_type_hint"), clock_tolerance_type_hint);
    }
    
    QString group_membership_attribute;   
    if(socket->queryString().keys().contains("group_membership_attribute")){
        fromStringValue(socket->queryString().value("group_membership_attribute"), group_membership_attribute);
    }
    
    QString group_membership_attribute_type_hint;   
    if(socket->queryString().keys().contains("group_membership_attribute_type_hint")){
        fromStringValue(socket->queryString().value("group_membership_attribute_type_hint"), group_membership_attribute_type_hint);
    }
    
    QString idp_url;   
    if(socket->queryString().keys().contains("idp_url")){
        fromStringValue(socket->queryString().value("idp_url"), idp_url);
    }
    
    QString idp_url_type_hint;   
    if(socket->queryString().keys().contains("idp_url_type_hint")){
        fromStringValue(socket->queryString().value("idp_url_type_hint"), idp_url_type_hint);
    }
    
    QString logout_url;   
    if(socket->queryString().keys().contains("logout_url")){
        fromStringValue(socket->queryString().value("logout_url"), logout_url);
    }
    
    QString logout_url_type_hint;   
    if(socket->queryString().keys().contains("logout_url_type_hint")){
        fromStringValue(socket->queryString().value("logout_url_type_hint"), logout_url_type_hint);
    }
    
    QString service_provider_entity_id;   
    if(socket->queryString().keys().contains("service_provider_entity_id")){
        fromStringValue(socket->queryString().value("service_provider_entity_id"), service_provider_entity_id);
    }
    
    QString service_provider_entity_id_type_hint;   
    if(socket->queryString().keys().contains("service_provider_entity_id_type_hint")){
        fromStringValue(socket->queryString().value("service_provider_entity_id_type_hint"), service_provider_entity_id_type_hint);
    }
    
    QString assertion_consumer_service_url;   
    if(socket->queryString().keys().contains("assertion_consumer_service_url")){
        fromStringValue(socket->queryString().value("assertion_consumer_service_url"), assertion_consumer_service_url);
    }
    
    QString assertion_consumer_service_url_type_hint;   
    if(socket->queryString().keys().contains("assertion_consumer_service_url_type_hint")){
        fromStringValue(socket->queryString().value("assertion_consumer_service_url_type_hint"), assertion_consumer_service_url_type_hint);
    }
    
    bool handle_logout;   
    if(socket->queryString().keys().contains("handle_logout")){
        fromStringValue(socket->queryString().value("handle_logout"), handle_logout);
    }
    
    QString handle_logout_type_hint;   
    if(socket->queryString().keys().contains("handle_logout_type_hint")){
        fromStringValue(socket->queryString().value("handle_logout_type_hint"), handle_logout_type_hint);
    }
    
    QString sp_private_key_alias;   
    if(socket->queryString().keys().contains("sp_private_key_alias")){
        fromStringValue(socket->queryString().value("sp_private_key_alias"), sp_private_key_alias);
    }
    
    QString sp_private_key_alias_type_hint;   
    if(socket->queryString().keys().contains("sp_private_key_alias_type_hint")){
        fromStringValue(socket->queryString().value("sp_private_key_alias_type_hint"), sp_private_key_alias_type_hint);
    }
    
    bool use_encryption;   
    if(socket->queryString().keys().contains("use_encryption")){
        fromStringValue(socket->queryString().value("use_encryption"), use_encryption);
    }
    
    QString use_encryption_type_hint;   
    if(socket->queryString().keys().contains("use_encryption_type_hint")){
        fromStringValue(socket->queryString().value("use_encryption_type_hint"), use_encryption_type_hint);
    }
    
    QString name_id_format;   
    if(socket->queryString().keys().contains("name_id_format")){
        fromStringValue(socket->queryString().value("name_id_format"), name_id_format);
    }
    
    QString name_id_format_type_hint;   
    if(socket->queryString().keys().contains("name_id_format_type_hint")){
        fromStringValue(socket->queryString().value("name_id_format_type_hint"), name_id_format_type_hint);
    }
    
    QString digest_method;   
    if(socket->queryString().keys().contains("digest_method")){
        fromStringValue(socket->queryString().value("digest_method"), digest_method);
    }
    
    QString digest_method_type_hint;   
    if(socket->queryString().keys().contains("digest_method_type_hint")){
        fromStringValue(socket->queryString().value("digest_method_type_hint"), digest_method_type_hint);
    }
    
    QString signature_method;   
    if(socket->queryString().keys().contains("signature_method")){
        fromStringValue(socket->queryString().value("signature_method"), signature_method);
    }
    
    QString signature_method_type_hint;   
    if(socket->queryString().keys().contains("signature_method_type_hint")){
        fromStringValue(socket->queryString().value("signature_method_type_hint"), signature_method_type_hint);
    }
    
    QString user_intermediate_path;   
    if(socket->queryString().keys().contains("user_intermediate_path")){
        fromStringValue(socket->queryString().value("user_intermediate_path"), user_intermediate_path);
    }
    
    QString user_intermediate_path_type_hint;   
    if(socket->queryString().keys().contains("user_intermediate_path_type_hint")){
        fromStringValue(socket->queryString().value("user_intermediate_path_type_hint"), user_intermediate_path_type_hint);
    }
    


    emit postConfigAdobeGraniteSamlAuthenticationHandler( key_store_password,  key_store_password_type_hint,  service_ranking,  service_ranking_type_hint,  idp_http_redirect,  idp_http_redirect_type_hint,  create_user,  create_user_type_hint,  default_redirect_url,  default_redirect_url_type_hint,  user_id_attribute,  user_id_attribute_type_hint,  default_groups,  default_groups_type_hint,  idp_cert_alias,  idp_cert_alias_type_hint,  add_group_memberships,  add_group_memberships_type_hint,  path,  path_type_hint,  synchronize_attributes,  synchronize_attributes_type_hint,  clock_tolerance,  clock_tolerance_type_hint,  group_membership_attribute,  group_membership_attribute_type_hint,  idp_url,  idp_url_type_hint,  logout_url,  logout_url_type_hint,  service_provider_entity_id,  service_provider_entity_id_type_hint,  assertion_consumer_service_url,  assertion_consumer_service_url_type_hint,  handle_logout,  handle_logout_type_hint,  sp_private_key_alias,  sp_private_key_alias_type_hint,  use_encryption,  use_encryption_type_hint,  name_id_format,  name_id_format_type_hint,  digest_method,  digest_method_type_hint,  signature_method,  signature_method_type_hint,  user_intermediate_path,  user_intermediate_path_type_hint);
}


void OAISlingApiRequest::postConfigApacheFelixJettyBasedHttpServiceRequest(){
    qDebug() << "//apps/system/config/org.apache.felix.http";
    connect(this, &OAISlingApiRequest::postConfigApacheFelixJettyBasedHttpService, handler, &OAISlingApiHandler::postConfigApacheFelixJettyBasedHttpService);
    
    
    bool org_apache_felix_https_nio;   
    if(socket->queryString().keys().contains("org_apache_felix_https_nio")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_nio"), org_apache_felix_https_nio);
    }
    
    QString org_apache_felix_https_nio_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_nio_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_nio_type_hint"), org_apache_felix_https_nio_type_hint);
    }
    
    QString org_apache_felix_https_keystore;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore"), org_apache_felix_https_keystore);
    }
    
    QString org_apache_felix_https_keystore_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_type_hint"), org_apache_felix_https_keystore_type_hint);
    }
    
    QString org_apache_felix_https_keystore_password;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_password")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_password"), org_apache_felix_https_keystore_password);
    }
    
    QString org_apache_felix_https_keystore_password_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_password_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_password_type_hint"), org_apache_felix_https_keystore_password_type_hint);
    }
    
    QString org_apache_felix_https_keystore_key;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_key")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_key"), org_apache_felix_https_keystore_key);
    }
    
    QString org_apache_felix_https_keystore_key_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_key_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_key_type_hint"), org_apache_felix_https_keystore_key_type_hint);
    }
    
    QString org_apache_felix_https_keystore_key_password;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_key_password")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_key_password"), org_apache_felix_https_keystore_key_password);
    }
    
    QString org_apache_felix_https_keystore_key_password_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_keystore_key_password_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_keystore_key_password_type_hint"), org_apache_felix_https_keystore_key_password_type_hint);
    }
    
    QString org_apache_felix_https_truststore;   
    if(socket->queryString().keys().contains("org_apache_felix_https_truststore")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_truststore"), org_apache_felix_https_truststore);
    }
    
    QString org_apache_felix_https_truststore_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_truststore_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_truststore_type_hint"), org_apache_felix_https_truststore_type_hint);
    }
    
    QString org_apache_felix_https_truststore_password;   
    if(socket->queryString().keys().contains("org_apache_felix_https_truststore_password")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_truststore_password"), org_apache_felix_https_truststore_password);
    }
    
    QString org_apache_felix_https_truststore_password_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_truststore_password_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_truststore_password_type_hint"), org_apache_felix_https_truststore_password_type_hint);
    }
    
    QString org_apache_felix_https_clientcertificate;   
    if(socket->queryString().keys().contains("org_apache_felix_https_clientcertificate")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_clientcertificate"), org_apache_felix_https_clientcertificate);
    }
    
    QString org_apache_felix_https_clientcertificate_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_clientcertificate_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_clientcertificate_type_hint"), org_apache_felix_https_clientcertificate_type_hint);
    }
    
    bool org_apache_felix_https_enable;   
    if(socket->queryString().keys().contains("org_apache_felix_https_enable")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_enable"), org_apache_felix_https_enable);
    }
    
    QString org_apache_felix_https_enable_type_hint;   
    if(socket->queryString().keys().contains("org_apache_felix_https_enable_type_hint")){
        fromStringValue(socket->queryString().value("org_apache_felix_https_enable_type_hint"), org_apache_felix_https_enable_type_hint);
    }
    
    QString org_osgi_service_http_port_secure;   
    if(socket->queryString().keys().contains("org_osgi_service_http_port_secure")){
        fromStringValue(socket->queryString().value("org_osgi_service_http_port_secure"), org_osgi_service_http_port_secure);
    }
    
    QString org_osgi_service_http_port_secure_type_hint;   
    if(socket->queryString().keys().contains("org_osgi_service_http_port_secure_type_hint")){
        fromStringValue(socket->queryString().value("org_osgi_service_http_port_secure_type_hint"), org_osgi_service_http_port_secure_type_hint);
    }
    


    emit postConfigApacheFelixJettyBasedHttpService( org_apache_felix_https_nio,  org_apache_felix_https_nio_type_hint,  org_apache_felix_https_keystore,  org_apache_felix_https_keystore_type_hint,  org_apache_felix_https_keystore_password,  org_apache_felix_https_keystore_password_type_hint,  org_apache_felix_https_keystore_key,  org_apache_felix_https_keystore_key_type_hint,  org_apache_felix_https_keystore_key_password,  org_apache_felix_https_keystore_key_password_type_hint,  org_apache_felix_https_truststore,  org_apache_felix_https_truststore_type_hint,  org_apache_felix_https_truststore_password,  org_apache_felix_https_truststore_password_type_hint,  org_apache_felix_https_clientcertificate,  org_apache_felix_https_clientcertificate_type_hint,  org_apache_felix_https_enable,  org_apache_felix_https_enable_type_hint,  org_osgi_service_http_port_secure,  org_osgi_service_http_port_secure_type_hint);
}


void OAISlingApiRequest::postConfigApacheHttpComponentsProxyConfigurationRequest(){
    qDebug() << "//apps/system/config/org.apache.http.proxyconfigurator.config";
    connect(this, &OAISlingApiRequest::postConfigApacheHttpComponentsProxyConfiguration, handler, &OAISlingApiHandler::postConfigApacheHttpComponentsProxyConfiguration);
    
    
    QString proxy_host;   
    if(socket->queryString().keys().contains("proxy_host")){
        fromStringValue(socket->queryString().value("proxy_host"), proxy_host);
    }
    
    QString proxy_host_type_hint;   
    if(socket->queryString().keys().contains("proxy_host_type_hint")){
        fromStringValue(socket->queryString().value("proxy_host_type_hint"), proxy_host_type_hint);
    }
    
    qint32 proxy_port;   
    if(socket->queryString().keys().contains("proxy_port")){
        fromStringValue(socket->queryString().value("proxy_port"), proxy_port);
    }
    
    QString proxy_port_type_hint;   
    if(socket->queryString().keys().contains("proxy_port_type_hint")){
        fromStringValue(socket->queryString().value("proxy_port_type_hint"), proxy_port_type_hint);
    }
    
    QList<QString> proxy_exceptions;   
    if(socket->queryString().keys().contains("proxy_exceptions")){
        fromStringValue(socket->queryString().values("proxy_exceptions"), proxy_exceptions);
    }
    
    QString proxy_exceptions_type_hint;   
    if(socket->queryString().keys().contains("proxy_exceptions_type_hint")){
        fromStringValue(socket->queryString().value("proxy_exceptions_type_hint"), proxy_exceptions_type_hint);
    }
    
    bool proxy_enabled;   
    if(socket->queryString().keys().contains("proxy_enabled")){
        fromStringValue(socket->queryString().value("proxy_enabled"), proxy_enabled);
    }
    
    QString proxy_enabled_type_hint;   
    if(socket->queryString().keys().contains("proxy_enabled_type_hint")){
        fromStringValue(socket->queryString().value("proxy_enabled_type_hint"), proxy_enabled_type_hint);
    }
    
    QString proxy_user;   
    if(socket->queryString().keys().contains("proxy_user")){
        fromStringValue(socket->queryString().value("proxy_user"), proxy_user);
    }
    
    QString proxy_user_type_hint;   
    if(socket->queryString().keys().contains("proxy_user_type_hint")){
        fromStringValue(socket->queryString().value("proxy_user_type_hint"), proxy_user_type_hint);
    }
    
    QString proxy_password;   
    if(socket->queryString().keys().contains("proxy_password")){
        fromStringValue(socket->queryString().value("proxy_password"), proxy_password);
    }
    
    QString proxy_password_type_hint;   
    if(socket->queryString().keys().contains("proxy_password_type_hint")){
        fromStringValue(socket->queryString().value("proxy_password_type_hint"), proxy_password_type_hint);
    }
    


    emit postConfigApacheHttpComponentsProxyConfiguration( proxy_host,  proxy_host_type_hint,  proxy_port,  proxy_port_type_hint,  proxy_exceptions,  proxy_exceptions_type_hint,  proxy_enabled,  proxy_enabled_type_hint,  proxy_user,  proxy_user_type_hint,  proxy_password,  proxy_password_type_hint);
}


void OAISlingApiRequest::postConfigApacheSlingDavExServletRequest(){
    qDebug() << "//apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";
    connect(this, &OAISlingApiRequest::postConfigApacheSlingDavExServlet, handler, &OAISlingApiHandler::postConfigApacheSlingDavExServlet);
    
    
    QString alias;   
    if(socket->queryString().keys().contains("alias")){
        fromStringValue(socket->queryString().value("alias"), alias);
    }
    
    QString alias_type_hint;   
    if(socket->queryString().keys().contains("alias_type_hint")){
        fromStringValue(socket->queryString().value("alias_type_hint"), alias_type_hint);
    }
    
    bool dav_create_absolute_uri;   
    if(socket->queryString().keys().contains("dav_create_absolute_uri")){
        fromStringValue(socket->queryString().value("dav_create_absolute_uri"), dav_create_absolute_uri);
    }
    
    QString dav_create_absolute_uri_type_hint;   
    if(socket->queryString().keys().contains("dav_create_absolute_uri_type_hint")){
        fromStringValue(socket->queryString().value("dav_create_absolute_uri_type_hint"), dav_create_absolute_uri_type_hint);
    }
    


    emit postConfigApacheSlingDavExServlet( alias,  alias_type_hint,  dav_create_absolute_uri,  dav_create_absolute_uri_type_hint);
}


void OAISlingApiRequest::postConfigApacheSlingGetServletRequest(){
    qDebug() << "//apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet";
    connect(this, &OAISlingApiRequest::postConfigApacheSlingGetServlet, handler, &OAISlingApiHandler::postConfigApacheSlingGetServlet);
    
    
    QString json_maximumresults;   
    if(socket->queryString().keys().contains("json_maximumresults")){
        fromStringValue(socket->queryString().value("json_maximumresults"), json_maximumresults);
    }
    
    QString json_maximumresults_type_hint;   
    if(socket->queryString().keys().contains("json_maximumresults_type_hint")){
        fromStringValue(socket->queryString().value("json_maximumresults_type_hint"), json_maximumresults_type_hint);
    }
    
    bool enable_html;   
    if(socket->queryString().keys().contains("enable_html")){
        fromStringValue(socket->queryString().value("enable_html"), enable_html);
    }
    
    QString enable_html_type_hint;   
    if(socket->queryString().keys().contains("enable_html_type_hint")){
        fromStringValue(socket->queryString().value("enable_html_type_hint"), enable_html_type_hint);
    }
    
    bool enable_txt;   
    if(socket->queryString().keys().contains("enable_txt")){
        fromStringValue(socket->queryString().value("enable_txt"), enable_txt);
    }
    
    QString enable_txt_type_hint;   
    if(socket->queryString().keys().contains("enable_txt_type_hint")){
        fromStringValue(socket->queryString().value("enable_txt_type_hint"), enable_txt_type_hint);
    }
    
    bool enable_xml;   
    if(socket->queryString().keys().contains("enable_xml")){
        fromStringValue(socket->queryString().value("enable_xml"), enable_xml);
    }
    
    QString enable_xml_type_hint;   
    if(socket->queryString().keys().contains("enable_xml_type_hint")){
        fromStringValue(socket->queryString().value("enable_xml_type_hint"), enable_xml_type_hint);
    }
    


    emit postConfigApacheSlingGetServlet( json_maximumresults,  json_maximumresults_type_hint,  enable_html,  enable_html_type_hint,  enable_txt,  enable_txt_type_hint,  enable_xml,  enable_xml_type_hint);
}


void OAISlingApiRequest::postConfigApacheSlingReferrerFilterRequest(){
    qDebug() << "//apps/system/config/org.apache.sling.security.impl.ReferrerFilter";
    connect(this, &OAISlingApiRequest::postConfigApacheSlingReferrerFilter, handler, &OAISlingApiHandler::postConfigApacheSlingReferrerFilter);
    
    
    bool allow_empty;   
    if(socket->queryString().keys().contains("allow_empty")){
        fromStringValue(socket->queryString().value("allow_empty"), allow_empty);
    }
    
    QString allow_empty_type_hint;   
    if(socket->queryString().keys().contains("allow_empty_type_hint")){
        fromStringValue(socket->queryString().value("allow_empty_type_hint"), allow_empty_type_hint);
    }
    
    QString allow_hosts;   
    if(socket->queryString().keys().contains("allow_hosts")){
        fromStringValue(socket->queryString().value("allow_hosts"), allow_hosts);
    }
    
    QString allow_hosts_type_hint;   
    if(socket->queryString().keys().contains("allow_hosts_type_hint")){
        fromStringValue(socket->queryString().value("allow_hosts_type_hint"), allow_hosts_type_hint);
    }
    
    QString allow_hosts_regexp;   
    if(socket->queryString().keys().contains("allow_hosts_regexp")){
        fromStringValue(socket->queryString().value("allow_hosts_regexp"), allow_hosts_regexp);
    }
    
    QString allow_hosts_regexp_type_hint;   
    if(socket->queryString().keys().contains("allow_hosts_regexp_type_hint")){
        fromStringValue(socket->queryString().value("allow_hosts_regexp_type_hint"), allow_hosts_regexp_type_hint);
    }
    
    QString filter_methods;   
    if(socket->queryString().keys().contains("filter_methods")){
        fromStringValue(socket->queryString().value("filter_methods"), filter_methods);
    }
    
    QString filter_methods_type_hint;   
    if(socket->queryString().keys().contains("filter_methods_type_hint")){
        fromStringValue(socket->queryString().value("filter_methods_type_hint"), filter_methods_type_hint);
    }
    


    emit postConfigApacheSlingReferrerFilter( allow_empty,  allow_empty_type_hint,  allow_hosts,  allow_hosts_type_hint,  allow_hosts_regexp,  allow_hosts_regexp_type_hint,  filter_methods,  filter_methods_type_hint);
}


void OAISlingApiRequest::postNodeRequest(const QString& pathstr, const QString& namestr){
    qDebug() << "//{path}/{name}";
    connect(this, &OAISlingApiRequest::postNode, handler, &OAISlingApiHandler::postNode);
    
    
    QString operation;   
    if(socket->queryString().keys().contains("operation")){
        fromStringValue(socket->queryString().value("operation"), operation);
    }
    
    QString delete_authorizable;   
    if(socket->queryString().keys().contains("delete_authorizable")){
        fromStringValue(socket->queryString().value("delete_authorizable"), delete_authorizable);
    }
    
    QString path;
    fromStringValue(pathstr, path);
        QString name;
    fromStringValue(namestr, name);
    
    QIODevice* file;

    emit postNode( path,  name,  operation,  delete_authorizable,  file);
}


void OAISlingApiRequest::postNodeRwRequest(const QString& pathstr, const QString& namestr){
    qDebug() << "//{path}/{name}.rw.html";
    connect(this, &OAISlingApiRequest::postNodeRw, handler, &OAISlingApiHandler::postNodeRw);
    
    
    QString add_members;   
    if(socket->queryString().keys().contains("add_members")){
        fromStringValue(socket->queryString().value("add_members"), add_members);
    }
    
    QString path;
    fromStringValue(pathstr, path);
        QString name;
    fromStringValue(namestr, name);
    

    emit postNodeRw( path,  name,  add_members);
}


void OAISlingApiRequest::postPathRequest(const QString& pathstr){
    qDebug() << "//{path}/";
    connect(this, &OAISlingApiRequest::postPath, handler, &OAISlingApiHandler::postPath);
    
    
    QString jcrprimary_type;   
    if(socket->queryString().keys().contains("jcrprimary_type")){
        fromStringValue(socket->queryString().value("jcrprimary_type"), jcrprimary_type);
    }
    
    QString name;   
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString path;
    fromStringValue(pathstr, path);
    

    emit postPath( path,  jcrprimary_type,  name);
}


void OAISlingApiRequest::postQueryRequest(){
    qDebug() << "//bin/querybuilder.json";
    connect(this, &OAISlingApiRequest::postQuery, handler, &OAISlingApiHandler::postQuery);
    
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    
    OAINumber p_limit;   
    if(socket->queryString().keys().contains("p_limit")){
        fromStringValue(socket->queryString().value("p_limit"), p_limit);
    }
    
    QString _1_property;   
    if(socket->queryString().keys().contains("_1_property")){
        fromStringValue(socket->queryString().value("_1_property"), _1_property);
    }
    
    QString _1_property_value;   
    if(socket->queryString().keys().contains("_1_property_value")){
        fromStringValue(socket->queryString().value("_1_property_value"), _1_property_value);
    }
    


    emit postQuery( path,  p_limit,  _1_property,  _1_property_value);
}


void OAISlingApiRequest::postTreeActivationRequest(){
    qDebug() << "//etc/replication/treeactivation.html";
    connect(this, &OAISlingApiRequest::postTreeActivation, handler, &OAISlingApiHandler::postTreeActivation);
    
    
    bool ignoredeactivated;   
    if(socket->queryString().keys().contains("ignoredeactivated")){
        fromStringValue(socket->queryString().value("ignoredeactivated"), ignoredeactivated);
    }
    
    bool onlymodified;   
    if(socket->queryString().keys().contains("onlymodified")){
        fromStringValue(socket->queryString().value("onlymodified"), onlymodified);
    }
    
    QString path;   
    if(socket->queryString().keys().contains("path")){
        fromStringValue(socket->queryString().value("path"), path);
    }
    


    emit postTreeActivation( ignoredeactivated,  onlymodified,  path);
}


void OAISlingApiRequest::postTruststoreRequest(){
    qDebug() << "//libs/granite/security/post/truststore";
    connect(this, &OAISlingApiRequest::postTruststore, handler, &OAISlingApiHandler::postTruststore);
    
    
    QString operation;   
    if(socket->queryString().keys().contains("operation")){
        fromStringValue(socket->queryString().value("operation"), operation);
    }
    
    QString new_password;   
    if(socket->queryString().keys().contains("new_password")){
        fromStringValue(socket->queryString().value("new_password"), new_password);
    }
    
    QString re_password;   
    if(socket->queryString().keys().contains("re_password")){
        fromStringValue(socket->queryString().value("re_password"), re_password);
    }
    
    QString key_store_type;   
    if(socket->queryString().keys().contains("key_store_type")){
        fromStringValue(socket->queryString().value("key_store_type"), key_store_type);
    }
    
    QString remove_alias;   
    if(socket->queryString().keys().contains("remove_alias")){
        fromStringValue(socket->queryString().value("remove_alias"), remove_alias);
    }
    

    QIODevice* certificate;

    emit postTruststore( operation,  new_password,  re_password,  key_store_type,  remove_alias,  certificate);
}


void OAISlingApiRequest::postTruststorePKCS12Request(){
    qDebug() << "//etc/truststore";
    connect(this, &OAISlingApiRequest::postTruststorePKCS12, handler, &OAISlingApiHandler::postTruststorePKCS12);
    
    

    QIODevice* truststore_p12;

    emit postTruststorePKCS12( truststore_p12);
}

  

void OAISlingApiRequest::deleteAgentResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::deleteNodeResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getAgentResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getAgentsResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getAuthorizableKeystoreResponse(const OAIKeystoreInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getKeystoreResponse(const QIODevice*& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getNodeResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getPackageResponse(const QIODevice*& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getPackageFilterResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getQueryResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getTruststoreResponse(const QIODevice*& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getTruststoreInfoResponse(const OAITruststoreInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postAgentResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postAuthorizableKeystoreResponse(const OAIKeystoreInfo& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postAuthorizablesResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigAdobeGraniteSamlAuthenticationHandlerResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheFelixJettyBasedHttpServiceResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheHttpComponentsProxyConfigurationResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheSlingDavExServletResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheSlingGetServletResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheSlingReferrerFilterResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postNodeResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postNodeRwResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postPathResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postQueryResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postTreeActivationResponse(){
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postTruststoreResponse(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postTruststorePKCS12Response(const QString& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISlingApiRequest::deleteAgentError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::deleteNodeError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getAgentError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getAgentsError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getAuthorizableKeystoreError(const OAIKeystoreInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getKeystoreError(const QIODevice*& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getNodeError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getPackageError(const QIODevice*& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getPackageFilterError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getQueryError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getTruststoreError(const QIODevice*& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::getTruststoreInfoError(const OAITruststoreInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postAgentError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postAuthorizableKeystoreError(const OAIKeystoreInfo& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postAuthorizablesError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigAdobeGraniteSamlAuthenticationHandlerError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheFelixJettyBasedHttpServiceError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheHttpComponentsProxyConfigurationError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheSlingDavExServletError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheSlingGetServletError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postConfigApacheSlingReferrerFilterError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postNodeError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postNodeRwError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postPathError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postQueryError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postTreeActivationError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();    
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postTruststoreError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISlingApiRequest::postTruststorePKCS12Error(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISlingApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}
    
void OAISlingApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
