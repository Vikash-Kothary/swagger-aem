/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICrxApiRequest_H
#define OAI_OAICrxApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIInstallStatus.h"
#include <QIODevice>
#include <QString>
#include "OAICrxApiHandler.h"

namespace OpenAPI {

class OAICrxApiRequest : public QObject
{
    Q_OBJECT
    
public:
    OAICrxApiRequest(QHttpEngine::Socket *s, OAICrxApiHandler* handler);
    virtual ~OAICrxApiRequest();

    void getCrxdeStatusRequest();
    void getInstallStatusRequest();
    void getPackageManagerServletRequest();
    void postPackageServiceRequest();
    void postPackageServiceJsonRequest(const QString& path);
    void postPackageUpdateRequest();
    void postSetPasswordRequest();
    

    void getCrxdeStatusResponse(const QString& res);
    void getInstallStatusResponse(const OAIInstallStatus& res);
    void getPackageManagerServletResponse();
    void postPackageServiceResponse(const QString& res);
    void postPackageServiceJsonResponse(const QString& res);
    void postPackageUpdateResponse(const QString& res);
    void postSetPasswordResponse(const QString& res);
    

    void getCrxdeStatusError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getInstallStatusError(const OAIInstallStatus& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPackageManagerServletError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageServiceError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageServiceJsonError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPackageUpdateError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void postSetPasswordError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void getCrxdeStatus();
    void getInstallStatus();
    void getPackageManagerServlet();
    void postPackageService(QString cmd);
    void postPackageServiceJson(QString path, QString cmd, QString group_name, QString package_name, QString package_version, QString _charset_, bool force, bool recursive, QIODevice* package);
    void postPackageUpdate(QString group_name, QString package_name, QString version, QString path, QString filter, QString _charset_);
    void postSetPassword(QString old, QString plain, QString verify);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    OAICrxApiHandler *handler;

    inline void writeResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
        socket->writeHeaders();        
    }
};

}

#endif // OAI_OAICrxApiRequest_H
