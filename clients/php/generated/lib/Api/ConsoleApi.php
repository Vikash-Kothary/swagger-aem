<?php
/**
 * ConsoleApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ConsoleApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConsoleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAemProductInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getAemProductInfo()
    {
        list($response) = $this->getAemProductInfoWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAemProductInfoWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAemProductInfoWithHttpInfo()
    {
        $request = $this->getAemProductInfoRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                default:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAemProductInfoAsync
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAemProductInfoAsync()
    {
        return $this->getAemProductInfoAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAemProductInfoAsyncWithHttpInfo
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAemProductInfoAsyncWithHttpInfo()
    {
        $returnType = 'string[]';
        $request = $this->getAemProductInfoRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAemProductInfo'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAemProductInfoRequest()
    {

        $resourcePath = '/system/console/status-productinfo.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConfigMgr
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getConfigMgr()
    {
        list($response) = $this->getConfigMgrWithHttpInfo();
        return $response;
    }

    /**
     * Operation getConfigMgrWithHttpInfo
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigMgrWithHttpInfo()
    {
        $request = $this->getConfigMgrRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConfigMgrAsync
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigMgrAsync()
    {
        return $this->getConfigMgrAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConfigMgrAsyncWithHttpInfo
     *
     * 
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigMgrAsyncWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->getConfigMgrRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConfigMgr'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConfigMgrRequest()
    {

        $resourcePath = '/system/console/configMgr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBundle
     *
     * @param  string $name name (required)
     * @param  string $action action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postBundle($name, $action)
    {
        $this->postBundleWithHttpInfo($name, $action);
    }

    /**
     * Operation postBundleWithHttpInfo
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBundleWithHttpInfo($name, $action)
    {
        $request = $this->postBundleRequest($name, $action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postBundleAsync
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBundleAsync($name, $action)
    {
        return $this->postBundleAsyncWithHttpInfo($name, $action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBundleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postBundleAsyncWithHttpInfo($name, $action)
    {
        $returnType = '';
        $request = $this->postBundleRequest($name, $action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBundle'
     *
     * @param  string $name (required)
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postBundleRequest($name, $action)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postBundle'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling postBundle'
            );
        }

        $resourcePath = '/system/console/bundles/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($action !== null) {
            $queryParams['action'] = ObjectSerializer::toQueryValue($action);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postJmxRepository
     *
     * @param  string $action action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postJmxRepository($action)
    {
        $this->postJmxRepositoryWithHttpInfo($action);
    }

    /**
     * Operation postJmxRepositoryWithHttpInfo
     *
     * @param  string $action (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJmxRepositoryWithHttpInfo($action)
    {
        $request = $this->postJmxRepositoryRequest($action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postJmxRepositoryAsync
     *
     * 
     *
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postJmxRepositoryAsync($action)
    {
        return $this->postJmxRepositoryAsyncWithHttpInfo($action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postJmxRepositoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postJmxRepositoryAsyncWithHttpInfo($action)
    {
        $returnType = '';
        $request = $this->postJmxRepositoryRequest($action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postJmxRepository'
     *
     * @param  string $action (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postJmxRepositoryRequest($action)
    {
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling postJmxRepository'
            );
        }

        $resourcePath = '/system/console/jmx/com.adobe.granite:type=Repository/op/{action}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                '{' . 'action' . '}',
                ObjectSerializer::toPathValue($action),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSamlConfiguration
     *
     * @param  bool $post post (optional)
     * @param  bool $apply apply (optional)
     * @param  bool $delete delete (optional)
     * @param  string $action action (optional)
     * @param  string $location location (optional)
     * @param  string[] $path path (optional)
     * @param  int $service_ranking service_ranking (optional)
     * @param  string $idp_url idp_url (optional)
     * @param  string $idp_cert_alias idp_cert_alias (optional)
     * @param  bool $idp_http_redirect idp_http_redirect (optional)
     * @param  string $service_provider_entity_id service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias sp_private_key_alias (optional)
     * @param  string $key_store_password key_store_password (optional)
     * @param  string $default_redirect_url default_redirect_url (optional)
     * @param  string $user_id_attribute user_id_attribute (optional)
     * @param  bool $use_encryption use_encryption (optional)
     * @param  bool $create_user create_user (optional)
     * @param  bool $add_group_memberships add_group_memberships (optional)
     * @param  string $group_membership_attribute group_membership_attribute (optional)
     * @param  string[] $default_groups default_groups (optional)
     * @param  string $name_id_format name_id_format (optional)
     * @param  string[] $synchronize_attributes synchronize_attributes (optional)
     * @param  bool $handle_logout handle_logout (optional)
     * @param  string $logout_url logout_url (optional)
     * @param  int $clock_tolerance clock_tolerance (optional)
     * @param  string $digest_method digest_method (optional)
     * @param  string $signature_method signature_method (optional)
     * @param  string $user_intermediate_path user_intermediate_path (optional)
     * @param  string[] $propertylist propertylist (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SamlConfigurationInfo|string|string
     */
    public function postSamlConfiguration($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        list($response) = $this->postSamlConfigurationWithHttpInfo($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist);
        return $response;
    }

    /**
     * Operation postSamlConfigurationWithHttpInfo
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SamlConfigurationInfo|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSamlConfigurationWithHttpInfo($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        $request = $this->postSamlConfigurationRequest($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SamlConfigurationInfo' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\OpenAPI\Client\Model\SamlConfigurationInfo' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SamlConfigurationInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 302:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SamlConfigurationInfo';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SamlConfigurationInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 302:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSamlConfigurationAsync
     *
     * 
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSamlConfigurationAsync($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        return $this->postSamlConfigurationAsyncWithHttpInfo($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSamlConfigurationAsyncWithHttpInfo
     *
     * 
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSamlConfigurationAsyncWithHttpInfo($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {
        $returnType = '\OpenAPI\Client\Model\SamlConfigurationInfo';
        $request = $this->postSamlConfigurationRequest($post, $apply, $delete, $action, $location, $path, $service_ranking, $idp_url, $idp_cert_alias, $idp_http_redirect, $service_provider_entity_id, $assertion_consumer_service_url, $sp_private_key_alias, $key_store_password, $default_redirect_url, $user_id_attribute, $use_encryption, $create_user, $add_group_memberships, $group_membership_attribute, $default_groups, $name_id_format, $synchronize_attributes, $handle_logout, $logout_url, $clock_tolerance, $digest_method, $signature_method, $user_intermediate_path, $propertylist);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSamlConfiguration'
     *
     * @param  bool $post (optional)
     * @param  bool $apply (optional)
     * @param  bool $delete (optional)
     * @param  string $action (optional)
     * @param  string $location (optional)
     * @param  string[] $path (optional)
     * @param  int $service_ranking (optional)
     * @param  string $idp_url (optional)
     * @param  string $idp_cert_alias (optional)
     * @param  bool $idp_http_redirect (optional)
     * @param  string $service_provider_entity_id (optional)
     * @param  string $assertion_consumer_service_url (optional)
     * @param  string $sp_private_key_alias (optional)
     * @param  string $key_store_password (optional)
     * @param  string $default_redirect_url (optional)
     * @param  string $user_id_attribute (optional)
     * @param  bool $use_encryption (optional)
     * @param  bool $create_user (optional)
     * @param  bool $add_group_memberships (optional)
     * @param  string $group_membership_attribute (optional)
     * @param  string[] $default_groups (optional)
     * @param  string $name_id_format (optional)
     * @param  string[] $synchronize_attributes (optional)
     * @param  bool $handle_logout (optional)
     * @param  string $logout_url (optional)
     * @param  int $clock_tolerance (optional)
     * @param  string $digest_method (optional)
     * @param  string $signature_method (optional)
     * @param  string $user_intermediate_path (optional)
     * @param  string[] $propertylist (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSamlConfigurationRequest($post = null, $apply = null, $delete = null, $action = null, $location = null, $path = null, $service_ranking = null, $idp_url = null, $idp_cert_alias = null, $idp_http_redirect = null, $service_provider_entity_id = null, $assertion_consumer_service_url = null, $sp_private_key_alias = null, $key_store_password = null, $default_redirect_url = null, $user_id_attribute = null, $use_encryption = null, $create_user = null, $add_group_memberships = null, $group_membership_attribute = null, $default_groups = null, $name_id_format = null, $synchronize_attributes = null, $handle_logout = null, $logout_url = null, $clock_tolerance = null, $digest_method = null, $signature_method = null, $user_intermediate_path = null, $propertylist = null)
    {

        $resourcePath = '/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($post !== null) {
            $queryParams['post'] = ObjectSerializer::toQueryValue($post);
        }
        // query params
        if ($apply !== null) {
            $queryParams['apply'] = ObjectSerializer::toQueryValue($apply);
        }
        // query params
        if ($delete !== null) {
            $queryParams['delete'] = ObjectSerializer::toQueryValue($delete);
        }
        // query params
        if ($action !== null) {
            $queryParams['action'] = ObjectSerializer::toQueryValue($action);
        }
        // query params
        if ($location !== null) {
            $queryParams['$location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if (is_array($path)) {
            $path = ObjectSerializer::serializeCollection($path, 'multi', true);
        }
        if ($path !== null) {
            $queryParams['path'] = ObjectSerializer::toQueryValue($path);
        }
        // query params
        if ($service_ranking !== null) {
            $queryParams['service.ranking'] = ObjectSerializer::toQueryValue($service_ranking);
        }
        // query params
        if ($idp_url !== null) {
            $queryParams['idpUrl'] = ObjectSerializer::toQueryValue($idp_url);
        }
        // query params
        if ($idp_cert_alias !== null) {
            $queryParams['idpCertAlias'] = ObjectSerializer::toQueryValue($idp_cert_alias);
        }
        // query params
        if ($idp_http_redirect !== null) {
            $queryParams['idpHttpRedirect'] = ObjectSerializer::toQueryValue($idp_http_redirect);
        }
        // query params
        if ($service_provider_entity_id !== null) {
            $queryParams['serviceProviderEntityId'] = ObjectSerializer::toQueryValue($service_provider_entity_id);
        }
        // query params
        if ($assertion_consumer_service_url !== null) {
            $queryParams['assertionConsumerServiceURL'] = ObjectSerializer::toQueryValue($assertion_consumer_service_url);
        }
        // query params
        if ($sp_private_key_alias !== null) {
            $queryParams['spPrivateKeyAlias'] = ObjectSerializer::toQueryValue($sp_private_key_alias);
        }
        // query params
        if ($key_store_password !== null) {
            $queryParams['keyStorePassword'] = ObjectSerializer::toQueryValue($key_store_password);
        }
        // query params
        if ($default_redirect_url !== null) {
            $queryParams['defaultRedirectUrl'] = ObjectSerializer::toQueryValue($default_redirect_url);
        }
        // query params
        if ($user_id_attribute !== null) {
            $queryParams['userIDAttribute'] = ObjectSerializer::toQueryValue($user_id_attribute);
        }
        // query params
        if ($use_encryption !== null) {
            $queryParams['useEncryption'] = ObjectSerializer::toQueryValue($use_encryption);
        }
        // query params
        if ($create_user !== null) {
            $queryParams['createUser'] = ObjectSerializer::toQueryValue($create_user);
        }
        // query params
        if ($add_group_memberships !== null) {
            $queryParams['addGroupMemberships'] = ObjectSerializer::toQueryValue($add_group_memberships);
        }
        // query params
        if ($group_membership_attribute !== null) {
            $queryParams['groupMembershipAttribute'] = ObjectSerializer::toQueryValue($group_membership_attribute);
        }
        // query params
        if (is_array($default_groups)) {
            $default_groups = ObjectSerializer::serializeCollection($default_groups, 'multi', true);
        }
        if ($default_groups !== null) {
            $queryParams['defaultGroups'] = ObjectSerializer::toQueryValue($default_groups);
        }
        // query params
        if ($name_id_format !== null) {
            $queryParams['nameIdFormat'] = ObjectSerializer::toQueryValue($name_id_format);
        }
        // query params
        if (is_array($synchronize_attributes)) {
            $synchronize_attributes = ObjectSerializer::serializeCollection($synchronize_attributes, 'multi', true);
        }
        if ($synchronize_attributes !== null) {
            $queryParams['synchronizeAttributes'] = ObjectSerializer::toQueryValue($synchronize_attributes);
        }
        // query params
        if ($handle_logout !== null) {
            $queryParams['handleLogout'] = ObjectSerializer::toQueryValue($handle_logout);
        }
        // query params
        if ($logout_url !== null) {
            $queryParams['logoutUrl'] = ObjectSerializer::toQueryValue($logout_url);
        }
        // query params
        if ($clock_tolerance !== null) {
            $queryParams['clockTolerance'] = ObjectSerializer::toQueryValue($clock_tolerance);
        }
        // query params
        if ($digest_method !== null) {
            $queryParams['digestMethod'] = ObjectSerializer::toQueryValue($digest_method);
        }
        // query params
        if ($signature_method !== null) {
            $queryParams['signatureMethod'] = ObjectSerializer::toQueryValue($signature_method);
        }
        // query params
        if ($user_intermediate_path !== null) {
            $queryParams['userIntermediatePath'] = ObjectSerializer::toQueryValue($user_intermediate_path);
        }
        // query params
        if (is_array($propertylist)) {
            $propertylist = ObjectSerializer::serializeCollection($propertylist, 'csv', true);
        }
        if ($propertylist !== null) {
            $queryParams['propertylist'] = ObjectSerializer::toQueryValue($propertylist);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
