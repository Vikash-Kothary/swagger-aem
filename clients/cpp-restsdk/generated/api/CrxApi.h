/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CrxApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CrxApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CrxApi_H_


#include "../ApiClient.h"

#include "HttpContent.h"
#include "InstallStatus.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CrxApi 
{
public:

    explicit CrxApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~CrxApi() = default;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<utility::string_t> getCrxdeStatus(
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<InstallStatus>> getInstallStatus(
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> getPackageManagerServlet(
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cmd"></param>
    pplx::task<utility::string_t> postPackageService(
        utility::string_t cmd
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="path"></param>
    /// <param name="cmd"></param>
    /// <param name="groupName"> (optional)</param>
    /// <param name="packageName"> (optional)</param>
    /// <param name="packageVersion"> (optional)</param>
    /// <param name="charset"> (optional)</param>
    /// <param name="force"> (optional)</param>
    /// <param name="recursive"> (optional)</param>
    /// <param name="package"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<utility::string_t> postPackageServiceJson(
        utility::string_t path,
        utility::string_t cmd,
        boost::optional<utility::string_t> groupName,
        boost::optional<utility::string_t> packageName,
        boost::optional<utility::string_t> packageVersion,
        boost::optional<utility::string_t> charset,
        boost::optional<bool> force,
        boost::optional<bool> recursive,
        boost::optional<std::shared_ptr<HttpContent>> package
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="groupName"></param>
    /// <param name="packageName"></param>
    /// <param name="version"></param>
    /// <param name="path"></param>
    /// <param name="filter"> (optional)</param>
    /// <param name="charset"> (optional)</param>
    pplx::task<utility::string_t> postPackageUpdate(
        utility::string_t groupName,
        utility::string_t packageName,
        utility::string_t version,
        utility::string_t path,
        boost::optional<utility::string_t> filter,
        boost::optional<utility::string_t> charset
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="old"></param>
    /// <param name="plain"></param>
    /// <param name="verify"></param>
    pplx::task<utility::string_t> postSetPassword(
        utility::string_t old,
        utility::string_t plain,
        utility::string_t verify
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CrxApi_H_ */

