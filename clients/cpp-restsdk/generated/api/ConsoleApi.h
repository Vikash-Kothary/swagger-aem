/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConsoleApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ConsoleApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ConsoleApi_H_


#include "../ApiClient.h"

#include "SamlConfigurationInfo.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ConsoleApi 
{
public:

    explicit ConsoleApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~ConsoleApi() = default;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<utility::string_t>> getAemProductInfo(
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<utility::string_t> getConfigMgr(
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name"></param>
    /// <param name="action"></param>
    pplx::task<void> postBundle(
        utility::string_t name,
        utility::string_t action
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="action"></param>
    pplx::task<void> postJmxRepository(
        utility::string_t action
    );
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="_delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="idpUrl"> (optional)</param>
    /// <param name="idpCertAlias"> (optional)</param>
    /// <param name="idpHttpRedirect"> (optional)</param>
    /// <param name="serviceProviderEntityId"> (optional)</param>
    /// <param name="assertionConsumerServiceURL"> (optional)</param>
    /// <param name="spPrivateKeyAlias"> (optional)</param>
    /// <param name="keyStorePassword"> (optional)</param>
    /// <param name="defaultRedirectUrl"> (optional)</param>
    /// <param name="userIDAttribute"> (optional)</param>
    /// <param name="useEncryption"> (optional)</param>
    /// <param name="createUser"> (optional)</param>
    /// <param name="addGroupMemberships"> (optional)</param>
    /// <param name="groupMembershipAttribute"> (optional)</param>
    /// <param name="defaultGroups"> (optional)</param>
    /// <param name="nameIdFormat"> (optional)</param>
    /// <param name="synchronizeAttributes"> (optional)</param>
    /// <param name="handleLogout"> (optional)</param>
    /// <param name="logoutUrl"> (optional)</param>
    /// <param name="clockTolerance"> (optional)</param>
    /// <param name="digestMethod"> (optional)</param>
    /// <param name="signatureMethod"> (optional)</param>
    /// <param name="userIntermediatePath"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    pplx::task<std::shared_ptr<SamlConfigurationInfo>> postSamlConfiguration(
        boost::optional<bool> post,
        boost::optional<bool> apply,
        boost::optional<bool> _delete,
        boost::optional<utility::string_t> action,
        boost::optional<utility::string_t> Dollarlocation,
        boost::optional<std::vector<utility::string_t>> path,
        boost::optional<int32_t> servicePeriodranking,
        boost::optional<utility::string_t> idpUrl,
        boost::optional<utility::string_t> idpCertAlias,
        boost::optional<bool> idpHttpRedirect,
        boost::optional<utility::string_t> serviceProviderEntityId,
        boost::optional<utility::string_t> assertionConsumerServiceURL,
        boost::optional<utility::string_t> spPrivateKeyAlias,
        boost::optional<utility::string_t> keyStorePassword,
        boost::optional<utility::string_t> defaultRedirectUrl,
        boost::optional<utility::string_t> userIDAttribute,
        boost::optional<bool> useEncryption,
        boost::optional<bool> createUser,
        boost::optional<bool> addGroupMemberships,
        boost::optional<utility::string_t> groupMembershipAttribute,
        boost::optional<std::vector<utility::string_t>> defaultGroups,
        boost::optional<utility::string_t> nameIdFormat,
        boost::optional<std::vector<utility::string_t>> synchronizeAttributes,
        boost::optional<bool> handleLogout,
        boost::optional<utility::string_t> logoutUrl,
        boost::optional<int32_t> clockTolerance,
        boost::optional<utility::string_t> digestMethod,
        boost::optional<utility::string_t> signatureMethod,
        boost::optional<utility::string_t> userIntermediatePath,
        boost::optional<std::vector<utility::string_t>> propertylist
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ConsoleApi_H_ */

