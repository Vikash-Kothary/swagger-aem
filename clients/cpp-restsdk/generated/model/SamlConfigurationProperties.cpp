/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SamlConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SamlConfigurationProperties::SamlConfigurationProperties()
{
    m_PathIsSet = false;
    m_Service_rankingIsSet = false;
    m_IdpUrlIsSet = false;
    m_IdpCertAliasIsSet = false;
    m_IdpHttpRedirectIsSet = false;
    m_ServiceProviderEntityIdIsSet = false;
    m_AssertionConsumerServiceURLIsSet = false;
    m_SpPrivateKeyAliasIsSet = false;
    m_KeyStorePasswordIsSet = false;
    m_DefaultRedirectUrlIsSet = false;
    m_UserIDAttributeIsSet = false;
    m_UseEncryptionIsSet = false;
    m_CreateUserIsSet = false;
    m_AddGroupMembershipsIsSet = false;
    m_GroupMembershipAttributeIsSet = false;
    m_DefaultGroupsIsSet = false;
    m_NameIdFormatIsSet = false;
    m_SynchronizeAttributesIsSet = false;
    m_HandleLogoutIsSet = false;
    m_LogoutUrlIsSet = false;
    m_ClockToleranceIsSet = false;
    m_DigestMethodIsSet = false;
    m_SignatureMethodIsSet = false;
    m_UserIntermediatePathIsSet = false;
}

SamlConfigurationProperties::~SamlConfigurationProperties()
{
}

void SamlConfigurationProperties::validate()
{
    // TODO: implement validation
}

web::json::value SamlConfigurationProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_Service_rankingIsSet)
    {
        val[utility::conversions::to_string_t("service.ranking")] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_IdpUrlIsSet)
    {
        val[utility::conversions::to_string_t("idpUrl")] = ModelBase::toJson(m_IdpUrl);
    }
    if(m_IdpCertAliasIsSet)
    {
        val[utility::conversions::to_string_t("idpCertAlias")] = ModelBase::toJson(m_IdpCertAlias);
    }
    if(m_IdpHttpRedirectIsSet)
    {
        val[utility::conversions::to_string_t("idpHttpRedirect")] = ModelBase::toJson(m_IdpHttpRedirect);
    }
    if(m_ServiceProviderEntityIdIsSet)
    {
        val[utility::conversions::to_string_t("serviceProviderEntityId")] = ModelBase::toJson(m_ServiceProviderEntityId);
    }
    if(m_AssertionConsumerServiceURLIsSet)
    {
        val[utility::conversions::to_string_t("assertionConsumerServiceURL")] = ModelBase::toJson(m_AssertionConsumerServiceURL);
    }
    if(m_SpPrivateKeyAliasIsSet)
    {
        val[utility::conversions::to_string_t("spPrivateKeyAlias")] = ModelBase::toJson(m_SpPrivateKeyAlias);
    }
    if(m_KeyStorePasswordIsSet)
    {
        val[utility::conversions::to_string_t("keyStorePassword")] = ModelBase::toJson(m_KeyStorePassword);
    }
    if(m_DefaultRedirectUrlIsSet)
    {
        val[utility::conversions::to_string_t("defaultRedirectUrl")] = ModelBase::toJson(m_DefaultRedirectUrl);
    }
    if(m_UserIDAttributeIsSet)
    {
        val[utility::conversions::to_string_t("userIDAttribute")] = ModelBase::toJson(m_UserIDAttribute);
    }
    if(m_UseEncryptionIsSet)
    {
        val[utility::conversions::to_string_t("useEncryption")] = ModelBase::toJson(m_UseEncryption);
    }
    if(m_CreateUserIsSet)
    {
        val[utility::conversions::to_string_t("createUser")] = ModelBase::toJson(m_CreateUser);
    }
    if(m_AddGroupMembershipsIsSet)
    {
        val[utility::conversions::to_string_t("addGroupMemberships")] = ModelBase::toJson(m_AddGroupMemberships);
    }
    if(m_GroupMembershipAttributeIsSet)
    {
        val[utility::conversions::to_string_t("groupMembershipAttribute")] = ModelBase::toJson(m_GroupMembershipAttribute);
    }
    if(m_DefaultGroupsIsSet)
    {
        val[utility::conversions::to_string_t("defaultGroups")] = ModelBase::toJson(m_DefaultGroups);
    }
    if(m_NameIdFormatIsSet)
    {
        val[utility::conversions::to_string_t("nameIdFormat")] = ModelBase::toJson(m_NameIdFormat);
    }
    if(m_SynchronizeAttributesIsSet)
    {
        val[utility::conversions::to_string_t("synchronizeAttributes")] = ModelBase::toJson(m_SynchronizeAttributes);
    }
    if(m_HandleLogoutIsSet)
    {
        val[utility::conversions::to_string_t("handleLogout")] = ModelBase::toJson(m_HandleLogout);
    }
    if(m_LogoutUrlIsSet)
    {
        val[utility::conversions::to_string_t("logoutUrl")] = ModelBase::toJson(m_LogoutUrl);
    }
    if(m_ClockToleranceIsSet)
    {
        val[utility::conversions::to_string_t("clockTolerance")] = ModelBase::toJson(m_ClockTolerance);
    }
    if(m_DigestMethodIsSet)
    {
        val[utility::conversions::to_string_t("digestMethod")] = ModelBase::toJson(m_DigestMethod);
    }
    if(m_SignatureMethodIsSet)
    {
        val[utility::conversions::to_string_t("signatureMethod")] = ModelBase::toJson(m_SignatureMethod);
    }
    if(m_UserIntermediatePathIsSet)
    {
        val[utility::conversions::to_string_t("userIntermediatePath")] = ModelBase::toJson(m_UserIntermediatePath);
    }

    return val;
}

void SamlConfigurationProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> newItem(new SamlConfigurationPropertyItemsArray());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("service.ranking")))
    {
        if(!val[utility::conversions::to_string_t("service.ranking")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsLong> newItem(new SamlConfigurationPropertyItemsLong());
            newItem->fromJson(val[utility::conversions::to_string_t("service.ranking")]);
            setServiceRanking( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idpUrl")))
    {
        if(!val[utility::conversions::to_string_t("idpUrl")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("idpUrl")]);
            setIdpUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idpCertAlias")))
    {
        if(!val[utility::conversions::to_string_t("idpCertAlias")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("idpCertAlias")]);
            setIdpCertAlias( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("idpHttpRedirect")))
    {
        if(!val[utility::conversions::to_string_t("idpHttpRedirect")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("idpHttpRedirect")]);
            setIdpHttpRedirect( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceProviderEntityId")))
    {
        if(!val[utility::conversions::to_string_t("serviceProviderEntityId")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("serviceProviderEntityId")]);
            setServiceProviderEntityId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("assertionConsumerServiceURL")))
    {
        if(!val[utility::conversions::to_string_t("assertionConsumerServiceURL")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("assertionConsumerServiceURL")]);
            setAssertionConsumerServiceURL( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("spPrivateKeyAlias")))
    {
        if(!val[utility::conversions::to_string_t("spPrivateKeyAlias")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("spPrivateKeyAlias")]);
            setSpPrivateKeyAlias( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("keyStorePassword")))
    {
        if(!val[utility::conversions::to_string_t("keyStorePassword")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("keyStorePassword")]);
            setKeyStorePassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultRedirectUrl")))
    {
        if(!val[utility::conversions::to_string_t("defaultRedirectUrl")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultRedirectUrl")]);
            setDefaultRedirectUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userIDAttribute")))
    {
        if(!val[utility::conversions::to_string_t("userIDAttribute")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("userIDAttribute")]);
            setUserIDAttribute( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("useEncryption")))
    {
        if(!val[utility::conversions::to_string_t("useEncryption")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("useEncryption")]);
            setUseEncryption( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createUser")))
    {
        if(!val[utility::conversions::to_string_t("createUser")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("createUser")]);
            setCreateUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addGroupMemberships")))
    {
        if(!val[utility::conversions::to_string_t("addGroupMemberships")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("addGroupMemberships")]);
            setAddGroupMemberships( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupMembershipAttribute")))
    {
        if(!val[utility::conversions::to_string_t("groupMembershipAttribute")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("groupMembershipAttribute")]);
            setGroupMembershipAttribute( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultGroups")))
    {
        if(!val[utility::conversions::to_string_t("defaultGroups")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> newItem(new SamlConfigurationPropertyItemsArray());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultGroups")]);
            setDefaultGroups( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nameIdFormat")))
    {
        if(!val[utility::conversions::to_string_t("nameIdFormat")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("nameIdFormat")]);
            setNameIdFormat( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("synchronizeAttributes")))
    {
        if(!val[utility::conversions::to_string_t("synchronizeAttributes")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> newItem(new SamlConfigurationPropertyItemsArray());
            newItem->fromJson(val[utility::conversions::to_string_t("synchronizeAttributes")]);
            setSynchronizeAttributes( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("handleLogout")))
    {
        if(!val[utility::conversions::to_string_t("handleLogout")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("handleLogout")]);
            setHandleLogout( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("logoutUrl")))
    {
        if(!val[utility::conversions::to_string_t("logoutUrl")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("logoutUrl")]);
            setLogoutUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clockTolerance")))
    {
        if(!val[utility::conversions::to_string_t("clockTolerance")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsLong> newItem(new SamlConfigurationPropertyItemsLong());
            newItem->fromJson(val[utility::conversions::to_string_t("clockTolerance")]);
            setClockTolerance( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("digestMethod")))
    {
        if(!val[utility::conversions::to_string_t("digestMethod")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("digestMethod")]);
            setDigestMethod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signatureMethod")))
    {
        if(!val[utility::conversions::to_string_t("signatureMethod")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("signatureMethod")]);
            setSignatureMethod( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userIntermediatePath")))
    {
        if(!val[utility::conversions::to_string_t("userIntermediatePath")].is_null())
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromJson(val[utility::conversions::to_string_t("userIntermediatePath")]);
            setUserIntermediatePath( newItem );
        }
    }
}

void SamlConfigurationProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
    if(m_Service_rankingIsSet)
    {
        if (m_Service_ranking.get())
        {
            m_Service_ranking->toMultipart(multipart, utility::conversions::to_string_t("service.ranking."));
        }
    }
    if(m_IdpUrlIsSet)
    {
        if (m_IdpUrl.get())
        {
            m_IdpUrl->toMultipart(multipart, utility::conversions::to_string_t("idpUrl."));
        }
    }
    if(m_IdpCertAliasIsSet)
    {
        if (m_IdpCertAlias.get())
        {
            m_IdpCertAlias->toMultipart(multipart, utility::conversions::to_string_t("idpCertAlias."));
        }
    }
    if(m_IdpHttpRedirectIsSet)
    {
        if (m_IdpHttpRedirect.get())
        {
            m_IdpHttpRedirect->toMultipart(multipart, utility::conversions::to_string_t("idpHttpRedirect."));
        }
    }
    if(m_ServiceProviderEntityIdIsSet)
    {
        if (m_ServiceProviderEntityId.get())
        {
            m_ServiceProviderEntityId->toMultipart(multipart, utility::conversions::to_string_t("serviceProviderEntityId."));
        }
    }
    if(m_AssertionConsumerServiceURLIsSet)
    {
        if (m_AssertionConsumerServiceURL.get())
        {
            m_AssertionConsumerServiceURL->toMultipart(multipart, utility::conversions::to_string_t("assertionConsumerServiceURL."));
        }
    }
    if(m_SpPrivateKeyAliasIsSet)
    {
        if (m_SpPrivateKeyAlias.get())
        {
            m_SpPrivateKeyAlias->toMultipart(multipart, utility::conversions::to_string_t("spPrivateKeyAlias."));
        }
    }
    if(m_KeyStorePasswordIsSet)
    {
        if (m_KeyStorePassword.get())
        {
            m_KeyStorePassword->toMultipart(multipart, utility::conversions::to_string_t("keyStorePassword."));
        }
    }
    if(m_DefaultRedirectUrlIsSet)
    {
        if (m_DefaultRedirectUrl.get())
        {
            m_DefaultRedirectUrl->toMultipart(multipart, utility::conversions::to_string_t("defaultRedirectUrl."));
        }
    }
    if(m_UserIDAttributeIsSet)
    {
        if (m_UserIDAttribute.get())
        {
            m_UserIDAttribute->toMultipart(multipart, utility::conversions::to_string_t("userIDAttribute."));
        }
    }
    if(m_UseEncryptionIsSet)
    {
        if (m_UseEncryption.get())
        {
            m_UseEncryption->toMultipart(multipart, utility::conversions::to_string_t("useEncryption."));
        }
    }
    if(m_CreateUserIsSet)
    {
        if (m_CreateUser.get())
        {
            m_CreateUser->toMultipart(multipart, utility::conversions::to_string_t("createUser."));
        }
    }
    if(m_AddGroupMembershipsIsSet)
    {
        if (m_AddGroupMemberships.get())
        {
            m_AddGroupMemberships->toMultipart(multipart, utility::conversions::to_string_t("addGroupMemberships."));
        }
    }
    if(m_GroupMembershipAttributeIsSet)
    {
        if (m_GroupMembershipAttribute.get())
        {
            m_GroupMembershipAttribute->toMultipart(multipart, utility::conversions::to_string_t("groupMembershipAttribute."));
        }
    }
    if(m_DefaultGroupsIsSet)
    {
        if (m_DefaultGroups.get())
        {
            m_DefaultGroups->toMultipart(multipart, utility::conversions::to_string_t("defaultGroups."));
        }
    }
    if(m_NameIdFormatIsSet)
    {
        if (m_NameIdFormat.get())
        {
            m_NameIdFormat->toMultipart(multipart, utility::conversions::to_string_t("nameIdFormat."));
        }
    }
    if(m_SynchronizeAttributesIsSet)
    {
        if (m_SynchronizeAttributes.get())
        {
            m_SynchronizeAttributes->toMultipart(multipart, utility::conversions::to_string_t("synchronizeAttributes."));
        }
    }
    if(m_HandleLogoutIsSet)
    {
        if (m_HandleLogout.get())
        {
            m_HandleLogout->toMultipart(multipart, utility::conversions::to_string_t("handleLogout."));
        }
    }
    if(m_LogoutUrlIsSet)
    {
        if (m_LogoutUrl.get())
        {
            m_LogoutUrl->toMultipart(multipart, utility::conversions::to_string_t("logoutUrl."));
        }
    }
    if(m_ClockToleranceIsSet)
    {
        if (m_ClockTolerance.get())
        {
            m_ClockTolerance->toMultipart(multipart, utility::conversions::to_string_t("clockTolerance."));
        }
    }
    if(m_DigestMethodIsSet)
    {
        if (m_DigestMethod.get())
        {
            m_DigestMethod->toMultipart(multipart, utility::conversions::to_string_t("digestMethod."));
        }
    }
    if(m_SignatureMethodIsSet)
    {
        if (m_SignatureMethod.get())
        {
            m_SignatureMethod->toMultipart(multipart, utility::conversions::to_string_t("signatureMethod."));
        }
    }
    if(m_UserIntermediatePathIsSet)
    {
        if (m_UserIntermediatePath.get())
        {
            m_UserIntermediatePath->toMultipart(multipart, utility::conversions::to_string_t("userIntermediatePath."));
        }
    }
}

void SamlConfigurationProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> newItem(new SamlConfigurationPropertyItemsArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("service.ranking")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsLong> newItem(new SamlConfigurationPropertyItemsLong());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("service.ranking."));
            setServiceRanking( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idpUrl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("idpUrl")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("idpUrl."));
            setIdpUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idpCertAlias")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("idpCertAlias")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("idpCertAlias."));
            setIdpCertAlias( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idpHttpRedirect")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("idpHttpRedirect")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("idpHttpRedirect."));
            setIdpHttpRedirect( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceProviderEntityId")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("serviceProviderEntityId")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("serviceProviderEntityId."));
            setServiceProviderEntityId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assertionConsumerServiceURL")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("assertionConsumerServiceURL")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("assertionConsumerServiceURL."));
            setAssertionConsumerServiceURL( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("spPrivateKeyAlias")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("spPrivateKeyAlias")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("spPrivateKeyAlias."));
            setSpPrivateKeyAlias( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keyStorePassword")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("keyStorePassword")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("keyStorePassword."));
            setKeyStorePassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultRedirectUrl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultRedirectUrl")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultRedirectUrl."));
            setDefaultRedirectUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userIDAttribute")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("userIDAttribute")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("userIDAttribute."));
            setUserIDAttribute( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("useEncryption")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("useEncryption")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("useEncryption."));
            setUseEncryption( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createUser")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("createUser")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("createUser."));
            setCreateUser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addGroupMemberships")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("addGroupMemberships")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("addGroupMemberships."));
            setAddGroupMemberships( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupMembershipAttribute")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("groupMembershipAttribute")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("groupMembershipAttribute."));
            setGroupMembershipAttribute( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultGroups")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultGroups")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> newItem(new SamlConfigurationPropertyItemsArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultGroups."));
            setDefaultGroups( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nameIdFormat")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nameIdFormat")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nameIdFormat."));
            setNameIdFormat( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("synchronizeAttributes")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("synchronizeAttributes")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsArray> newItem(new SamlConfigurationPropertyItemsArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("synchronizeAttributes."));
            setSynchronizeAttributes( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("handleLogout")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("handleLogout")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsBoolean> newItem(new SamlConfigurationPropertyItemsBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("handleLogout."));
            setHandleLogout( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("logoutUrl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("logoutUrl")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("logoutUrl."));
            setLogoutUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clockTolerance")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("clockTolerance")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsLong> newItem(new SamlConfigurationPropertyItemsLong());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("clockTolerance."));
            setClockTolerance( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("digestMethod")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("digestMethod")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("digestMethod."));
            setDigestMethod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signatureMethod")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("signatureMethod")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("signatureMethod."));
            setSignatureMethod( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userIntermediatePath")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("userIntermediatePath")))
        {
            std::shared_ptr<SamlConfigurationPropertyItemsString> newItem(new SamlConfigurationPropertyItemsString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("userIntermediatePath."));
            setUserIntermediatePath( newItem );
        }
    }
}

std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getPath() const
{
    return m_Path;
}


void SamlConfigurationProperties::setPath(std::shared_ptr<SamlConfigurationPropertyItemsArray> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool SamlConfigurationProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void SamlConfigurationProperties::unsetPath()
{
    m_PathIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsLong> SamlConfigurationProperties::getServiceRanking() const
{
    return m_Service_ranking;
}


void SamlConfigurationProperties::setServiceRanking(std::shared_ptr<SamlConfigurationPropertyItemsLong> value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool SamlConfigurationProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}

void SamlConfigurationProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getIdpUrl() const
{
    return m_IdpUrl;
}


void SamlConfigurationProperties::setIdpUrl(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_IdpUrl = value;
    m_IdpUrlIsSet = true;
}
bool SamlConfigurationProperties::idpUrlIsSet() const
{
    return m_IdpUrlIsSet;
}

void SamlConfigurationProperties::unsetIdpUrl()
{
    m_IdpUrlIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getIdpCertAlias() const
{
    return m_IdpCertAlias;
}


void SamlConfigurationProperties::setIdpCertAlias(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_IdpCertAlias = value;
    m_IdpCertAliasIsSet = true;
}
bool SamlConfigurationProperties::idpCertAliasIsSet() const
{
    return m_IdpCertAliasIsSet;
}

void SamlConfigurationProperties::unsetIdpCertAlias()
{
    m_IdpCertAliasIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getIdpHttpRedirect() const
{
    return m_IdpHttpRedirect;
}


void SamlConfigurationProperties::setIdpHttpRedirect(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
    m_IdpHttpRedirect = value;
    m_IdpHttpRedirectIsSet = true;
}
bool SamlConfigurationProperties::idpHttpRedirectIsSet() const
{
    return m_IdpHttpRedirectIsSet;
}

void SamlConfigurationProperties::unsetIdpHttpRedirect()
{
    m_IdpHttpRedirectIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getServiceProviderEntityId() const
{
    return m_ServiceProviderEntityId;
}


void SamlConfigurationProperties::setServiceProviderEntityId(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_ServiceProviderEntityId = value;
    m_ServiceProviderEntityIdIsSet = true;
}
bool SamlConfigurationProperties::serviceProviderEntityIdIsSet() const
{
    return m_ServiceProviderEntityIdIsSet;
}

void SamlConfigurationProperties::unsetServiceProviderEntityId()
{
    m_ServiceProviderEntityIdIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getAssertionConsumerServiceURL() const
{
    return m_AssertionConsumerServiceURL;
}


void SamlConfigurationProperties::setAssertionConsumerServiceURL(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_AssertionConsumerServiceURL = value;
    m_AssertionConsumerServiceURLIsSet = true;
}
bool SamlConfigurationProperties::assertionConsumerServiceURLIsSet() const
{
    return m_AssertionConsumerServiceURLIsSet;
}

void SamlConfigurationProperties::unsetAssertionConsumerServiceURL()
{
    m_AssertionConsumerServiceURLIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getSpPrivateKeyAlias() const
{
    return m_SpPrivateKeyAlias;
}


void SamlConfigurationProperties::setSpPrivateKeyAlias(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_SpPrivateKeyAlias = value;
    m_SpPrivateKeyAliasIsSet = true;
}
bool SamlConfigurationProperties::spPrivateKeyAliasIsSet() const
{
    return m_SpPrivateKeyAliasIsSet;
}

void SamlConfigurationProperties::unsetSpPrivateKeyAlias()
{
    m_SpPrivateKeyAliasIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getKeyStorePassword() const
{
    return m_KeyStorePassword;
}


void SamlConfigurationProperties::setKeyStorePassword(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_KeyStorePassword = value;
    m_KeyStorePasswordIsSet = true;
}
bool SamlConfigurationProperties::keyStorePasswordIsSet() const
{
    return m_KeyStorePasswordIsSet;
}

void SamlConfigurationProperties::unsetKeyStorePassword()
{
    m_KeyStorePasswordIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getDefaultRedirectUrl() const
{
    return m_DefaultRedirectUrl;
}


void SamlConfigurationProperties::setDefaultRedirectUrl(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_DefaultRedirectUrl = value;
    m_DefaultRedirectUrlIsSet = true;
}
bool SamlConfigurationProperties::defaultRedirectUrlIsSet() const
{
    return m_DefaultRedirectUrlIsSet;
}

void SamlConfigurationProperties::unsetDefaultRedirectUrl()
{
    m_DefaultRedirectUrlIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getUserIDAttribute() const
{
    return m_UserIDAttribute;
}


void SamlConfigurationProperties::setUserIDAttribute(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_UserIDAttribute = value;
    m_UserIDAttributeIsSet = true;
}
bool SamlConfigurationProperties::userIDAttributeIsSet() const
{
    return m_UserIDAttributeIsSet;
}

void SamlConfigurationProperties::unsetUserIDAttribute()
{
    m_UserIDAttributeIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getUseEncryption() const
{
    return m_UseEncryption;
}


void SamlConfigurationProperties::setUseEncryption(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
    m_UseEncryption = value;
    m_UseEncryptionIsSet = true;
}
bool SamlConfigurationProperties::useEncryptionIsSet() const
{
    return m_UseEncryptionIsSet;
}

void SamlConfigurationProperties::unsetUseEncryption()
{
    m_UseEncryptionIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getCreateUser() const
{
    return m_CreateUser;
}


void SamlConfigurationProperties::setCreateUser(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
    m_CreateUser = value;
    m_CreateUserIsSet = true;
}
bool SamlConfigurationProperties::createUserIsSet() const
{
    return m_CreateUserIsSet;
}

void SamlConfigurationProperties::unsetCreateUser()
{
    m_CreateUserIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getAddGroupMemberships() const
{
    return m_AddGroupMemberships;
}


void SamlConfigurationProperties::setAddGroupMemberships(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
    m_AddGroupMemberships = value;
    m_AddGroupMembershipsIsSet = true;
}
bool SamlConfigurationProperties::addGroupMembershipsIsSet() const
{
    return m_AddGroupMembershipsIsSet;
}

void SamlConfigurationProperties::unsetAddGroupMemberships()
{
    m_AddGroupMembershipsIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getGroupMembershipAttribute() const
{
    return m_GroupMembershipAttribute;
}


void SamlConfigurationProperties::setGroupMembershipAttribute(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_GroupMembershipAttribute = value;
    m_GroupMembershipAttributeIsSet = true;
}
bool SamlConfigurationProperties::groupMembershipAttributeIsSet() const
{
    return m_GroupMembershipAttributeIsSet;
}

void SamlConfigurationProperties::unsetGroupMembershipAttribute()
{
    m_GroupMembershipAttributeIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getDefaultGroups() const
{
    return m_DefaultGroups;
}


void SamlConfigurationProperties::setDefaultGroups(std::shared_ptr<SamlConfigurationPropertyItemsArray> value)
{
    m_DefaultGroups = value;
    m_DefaultGroupsIsSet = true;
}
bool SamlConfigurationProperties::defaultGroupsIsSet() const
{
    return m_DefaultGroupsIsSet;
}

void SamlConfigurationProperties::unsetDefaultGroups()
{
    m_DefaultGroupsIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getNameIdFormat() const
{
    return m_NameIdFormat;
}


void SamlConfigurationProperties::setNameIdFormat(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_NameIdFormat = value;
    m_NameIdFormatIsSet = true;
}
bool SamlConfigurationProperties::nameIdFormatIsSet() const
{
    return m_NameIdFormatIsSet;
}

void SamlConfigurationProperties::unsetNameIdFormat()
{
    m_NameIdFormatIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsArray> SamlConfigurationProperties::getSynchronizeAttributes() const
{
    return m_SynchronizeAttributes;
}


void SamlConfigurationProperties::setSynchronizeAttributes(std::shared_ptr<SamlConfigurationPropertyItemsArray> value)
{
    m_SynchronizeAttributes = value;
    m_SynchronizeAttributesIsSet = true;
}
bool SamlConfigurationProperties::synchronizeAttributesIsSet() const
{
    return m_SynchronizeAttributesIsSet;
}

void SamlConfigurationProperties::unsetSynchronizeAttributes()
{
    m_SynchronizeAttributesIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsBoolean> SamlConfigurationProperties::getHandleLogout() const
{
    return m_HandleLogout;
}


void SamlConfigurationProperties::setHandleLogout(std::shared_ptr<SamlConfigurationPropertyItemsBoolean> value)
{
    m_HandleLogout = value;
    m_HandleLogoutIsSet = true;
}
bool SamlConfigurationProperties::handleLogoutIsSet() const
{
    return m_HandleLogoutIsSet;
}

void SamlConfigurationProperties::unsetHandleLogout()
{
    m_HandleLogoutIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getLogoutUrl() const
{
    return m_LogoutUrl;
}


void SamlConfigurationProperties::setLogoutUrl(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_LogoutUrl = value;
    m_LogoutUrlIsSet = true;
}
bool SamlConfigurationProperties::logoutUrlIsSet() const
{
    return m_LogoutUrlIsSet;
}

void SamlConfigurationProperties::unsetLogoutUrl()
{
    m_LogoutUrlIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsLong> SamlConfigurationProperties::getClockTolerance() const
{
    return m_ClockTolerance;
}


void SamlConfigurationProperties::setClockTolerance(std::shared_ptr<SamlConfigurationPropertyItemsLong> value)
{
    m_ClockTolerance = value;
    m_ClockToleranceIsSet = true;
}
bool SamlConfigurationProperties::clockToleranceIsSet() const
{
    return m_ClockToleranceIsSet;
}

void SamlConfigurationProperties::unsetClockTolerance()
{
    m_ClockToleranceIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getDigestMethod() const
{
    return m_DigestMethod;
}


void SamlConfigurationProperties::setDigestMethod(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_DigestMethod = value;
    m_DigestMethodIsSet = true;
}
bool SamlConfigurationProperties::digestMethodIsSet() const
{
    return m_DigestMethodIsSet;
}

void SamlConfigurationProperties::unsetDigestMethod()
{
    m_DigestMethodIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getSignatureMethod() const
{
    return m_SignatureMethod;
}


void SamlConfigurationProperties::setSignatureMethod(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_SignatureMethod = value;
    m_SignatureMethodIsSet = true;
}
bool SamlConfigurationProperties::signatureMethodIsSet() const
{
    return m_SignatureMethodIsSet;
}

void SamlConfigurationProperties::unsetSignatureMethod()
{
    m_SignatureMethodIsSet = false;
}

std::shared_ptr<SamlConfigurationPropertyItemsString> SamlConfigurationProperties::getUserIntermediatePath() const
{
    return m_UserIntermediatePath;
}


void SamlConfigurationProperties::setUserIntermediatePath(std::shared_ptr<SamlConfigurationPropertyItemsString> value)
{
    m_UserIntermediatePath = value;
    m_UserIntermediatePathIsSet = true;
}
bool SamlConfigurationProperties::userIntermediatePathIsSet() const
{
    return m_UserIntermediatePathIsSet;
}

void SamlConfigurationProperties::unsetUserIntermediatePath()
{
    m_UserIntermediatePathIsSet = false;
}

}
}
}
}

