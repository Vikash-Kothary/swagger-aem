/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TruststoreItems.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

TruststoreItems::TruststoreItems()
{
    m_Alias = utility::conversions::to_string_t("");
    m_AliasIsSet = false;
    m_EntryType = utility::conversions::to_string_t("");
    m_EntryTypeIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_Issuer = utility::conversions::to_string_t("");
    m_IssuerIsSet = false;
    m_NotBefore = utility::conversions::to_string_t("");
    m_NotBeforeIsSet = false;
    m_NotAfter = utility::conversions::to_string_t("");
    m_NotAfterIsSet = false;
    m_SerialNumber = 0;
    m_SerialNumberIsSet = false;
}

TruststoreItems::~TruststoreItems()
{
}

void TruststoreItems::validate()
{
    // TODO: implement validation
}

web::json::value TruststoreItems::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AliasIsSet)
    {
        val[utility::conversions::to_string_t("alias")] = ModelBase::toJson(m_Alias);
    }
    if(m_EntryTypeIsSet)
    {
        val[utility::conversions::to_string_t("entryType")] = ModelBase::toJson(m_EntryType);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t("issuer")] = ModelBase::toJson(m_Issuer);
    }
    if(m_NotBeforeIsSet)
    {
        val[utility::conversions::to_string_t("notBefore")] = ModelBase::toJson(m_NotBefore);
    }
    if(m_NotAfterIsSet)
    {
        val[utility::conversions::to_string_t("notAfter")] = ModelBase::toJson(m_NotAfter);
    }
    if(m_SerialNumberIsSet)
    {
        val[utility::conversions::to_string_t("serialNumber")] = ModelBase::toJson(m_SerialNumber);
    }

    return val;
}

void TruststoreItems::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("alias")))
    {
        setAlias(ModelBase::stringFromJson(val[utility::conversions::to_string_t("alias")]));
    }
    if(val.has_field(utility::conversions::to_string_t("entryType")))
    {
        setEntryType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("entryType")]));
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        setSubject(ModelBase::stringFromJson(val[utility::conversions::to_string_t("subject")]));
    }
    if(val.has_field(utility::conversions::to_string_t("issuer")))
    {
        setIssuer(ModelBase::stringFromJson(val[utility::conversions::to_string_t("issuer")]));
    }
    if(val.has_field(utility::conversions::to_string_t("notBefore")))
    {
        setNotBefore(ModelBase::stringFromJson(val[utility::conversions::to_string_t("notBefore")]));
    }
    if(val.has_field(utility::conversions::to_string_t("notAfter")))
    {
        setNotAfter(ModelBase::stringFromJson(val[utility::conversions::to_string_t("notAfter")]));
    }
    if(val.has_field(utility::conversions::to_string_t("serialNumber")))
    {
        setSerialNumber(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("serialNumber")]));
    }
}

void TruststoreItems::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AliasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alias"), m_Alias));
    }
    if(m_EntryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entryType"), m_EntryType));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("issuer"), m_Issuer));
    }
    if(m_NotBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notBefore"), m_NotBefore));
    }
    if(m_NotAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notAfter"), m_NotAfter));
    }
    if(m_SerialNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serialNumber"), m_SerialNumber));
    }
}

void TruststoreItems::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("alias")))
    {
        setAlias(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alias"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entryType")))
    {
        setEntryType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("entryType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        setSubject(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("issuer")))
    {
        setIssuer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("issuer"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notBefore")))
    {
        setNotBefore(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("notBefore"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notAfter")))
    {
        setNotAfter(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("notAfter"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serialNumber")))
    {
        setSerialNumber(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("serialNumber"))));
    }
}

utility::string_t TruststoreItems::getAlias() const
{
    return m_Alias;
}


void TruststoreItems::setAlias(utility::string_t value)
{
    m_Alias = value;
    m_AliasIsSet = true;
}
bool TruststoreItems::aliasIsSet() const
{
    return m_AliasIsSet;
}

void TruststoreItems::unsetAlias()
{
    m_AliasIsSet = false;
}

utility::string_t TruststoreItems::getEntryType() const
{
    return m_EntryType;
}


void TruststoreItems::setEntryType(utility::string_t value)
{
    m_EntryType = value;
    m_EntryTypeIsSet = true;
}
bool TruststoreItems::entryTypeIsSet() const
{
    return m_EntryTypeIsSet;
}

void TruststoreItems::unsetEntryType()
{
    m_EntryTypeIsSet = false;
}

utility::string_t TruststoreItems::getSubject() const
{
    return m_Subject;
}


void TruststoreItems::setSubject(utility::string_t value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}
bool TruststoreItems::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void TruststoreItems::unsetSubject()
{
    m_SubjectIsSet = false;
}

utility::string_t TruststoreItems::getIssuer() const
{
    return m_Issuer;
}


void TruststoreItems::setIssuer(utility::string_t value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}
bool TruststoreItems::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void TruststoreItems::unsetIssuer()
{
    m_IssuerIsSet = false;
}

utility::string_t TruststoreItems::getNotBefore() const
{
    return m_NotBefore;
}


void TruststoreItems::setNotBefore(utility::string_t value)
{
    m_NotBefore = value;
    m_NotBeforeIsSet = true;
}
bool TruststoreItems::notBeforeIsSet() const
{
    return m_NotBeforeIsSet;
}

void TruststoreItems::unsetNotBefore()
{
    m_NotBeforeIsSet = false;
}

utility::string_t TruststoreItems::getNotAfter() const
{
    return m_NotAfter;
}


void TruststoreItems::setNotAfter(utility::string_t value)
{
    m_NotAfter = value;
    m_NotAfterIsSet = true;
}
bool TruststoreItems::notAfterIsSet() const
{
    return m_NotAfterIsSet;
}

void TruststoreItems::unsetNotAfter()
{
    m_NotAfterIsSet = false;
}

int32_t TruststoreItems::getSerialNumber() const
{
    return m_SerialNumber;
}


void TruststoreItems::setSerialNumber(int32_t value)
{
    m_SerialNumber = value;
    m_SerialNumberIsSet = true;
}
bool TruststoreItems::serialNumberIsSet() const
{
    return m_SerialNumberIsSet;
}

void TruststoreItems::unsetSerialNumber()
{
    m_SerialNumberIsSet = false;
}

}
}
}
}

