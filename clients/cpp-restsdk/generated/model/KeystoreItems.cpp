/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "KeystoreItems.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

KeystoreItems::KeystoreItems()
{
    m_Alias = utility::conversions::to_string_t("");
    m_AliasIsSet = false;
    m_EntryType = utility::conversions::to_string_t("");
    m_EntryTypeIsSet = false;
    m_Algorithm = utility::conversions::to_string_t("");
    m_AlgorithmIsSet = false;
    m_Format = utility::conversions::to_string_t("");
    m_FormatIsSet = false;
    m_ChainIsSet = false;
}

KeystoreItems::~KeystoreItems()
{
}

void KeystoreItems::validate()
{
    // TODO: implement validation
}

web::json::value KeystoreItems::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AliasIsSet)
    {
        val[utility::conversions::to_string_t("alias")] = ModelBase::toJson(m_Alias);
    }
    if(m_EntryTypeIsSet)
    {
        val[utility::conversions::to_string_t("entryType")] = ModelBase::toJson(m_EntryType);
    }
    if(m_AlgorithmIsSet)
    {
        val[utility::conversions::to_string_t("algorithm")] = ModelBase::toJson(m_Algorithm);
    }
    if(m_FormatIsSet)
    {
        val[utility::conversions::to_string_t("format")] = ModelBase::toJson(m_Format);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Chain )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("chain")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void KeystoreItems::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("alias")))
    {
        setAlias(ModelBase::stringFromJson(val[utility::conversions::to_string_t("alias")]));
    }
    if(val.has_field(utility::conversions::to_string_t("entryType")))
    {
        setEntryType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("entryType")]));
    }
    if(val.has_field(utility::conversions::to_string_t("algorithm")))
    {
        setAlgorithm(ModelBase::stringFromJson(val[utility::conversions::to_string_t("algorithm")]));
    }
    if(val.has_field(utility::conversions::to_string_t("format")))
    {
        setFormat(ModelBase::stringFromJson(val[utility::conversions::to_string_t("format")]));
    }
    {
        m_Chain.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("chain")))
        {
        for( auto& item : val[utility::conversions::to_string_t("chain")].as_array() )
        {
            if(item.is_null())
            {
                m_Chain.push_back( std::shared_ptr<KeystoreChainItems>(nullptr) );
            }
            else
            {
                std::shared_ptr<KeystoreChainItems> newItem(new KeystoreChainItems());
                newItem->fromJson(item);
                m_Chain.push_back( newItem );
            }
        }
        }
    }
}

void KeystoreItems::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AliasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("alias"), m_Alias));
    }
    if(m_EntryTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entryType"), m_EntryType));
    }
    if(m_AlgorithmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("algorithm"), m_Algorithm));
    }
    if(m_FormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("format"), m_Format));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Chain )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("chain"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void KeystoreItems::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("alias")))
    {
        setAlias(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("alias"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entryType")))
    {
        setEntryType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("entryType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("algorithm")))
    {
        setAlgorithm(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("algorithm"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("format")))
    {
        setFormat(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("format"))));
    }
    {
        m_Chain.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("chain")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("chain"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Chain.push_back( std::shared_ptr<KeystoreChainItems>(nullptr) );
            }
            else
            {
                std::shared_ptr<KeystoreChainItems> newItem(new KeystoreChainItems());
                newItem->fromJson(item);
                m_Chain.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t KeystoreItems::getAlias() const
{
    return m_Alias;
}


void KeystoreItems::setAlias(utility::string_t value)
{
    m_Alias = value;
    m_AliasIsSet = true;
}
bool KeystoreItems::aliasIsSet() const
{
    return m_AliasIsSet;
}

void KeystoreItems::unsetAlias()
{
    m_AliasIsSet = false;
}

utility::string_t KeystoreItems::getEntryType() const
{
    return m_EntryType;
}


void KeystoreItems::setEntryType(utility::string_t value)
{
    m_EntryType = value;
    m_EntryTypeIsSet = true;
}
bool KeystoreItems::entryTypeIsSet() const
{
    return m_EntryTypeIsSet;
}

void KeystoreItems::unsetEntryType()
{
    m_EntryTypeIsSet = false;
}

utility::string_t KeystoreItems::getAlgorithm() const
{
    return m_Algorithm;
}


void KeystoreItems::setAlgorithm(utility::string_t value)
{
    m_Algorithm = value;
    m_AlgorithmIsSet = true;
}
bool KeystoreItems::algorithmIsSet() const
{
    return m_AlgorithmIsSet;
}

void KeystoreItems::unsetAlgorithm()
{
    m_AlgorithmIsSet = false;
}

utility::string_t KeystoreItems::getFormat() const
{
    return m_Format;
}


void KeystoreItems::setFormat(utility::string_t value)
{
    m_Format = value;
    m_FormatIsSet = true;
}
bool KeystoreItems::formatIsSet() const
{
    return m_FormatIsSet;
}

void KeystoreItems::unsetFormat()
{
    m_FormatIsSet = false;
}

std::vector<std::shared_ptr<KeystoreChainItems>>& KeystoreItems::getChain()
{
    return m_Chain;
}

void KeystoreItems::setChain(std::vector<std::shared_ptr<KeystoreChainItems>> value)
{
    m_Chain = value;
    m_ChainIsSet = true;
}
bool KeystoreItems::chainIsSet() const
{
    return m_ChainIsSet;
}

void KeystoreItems::unsetChain()
{
    m_ChainIsSet = false;
}

}
}
}
}

