/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.openapitools.api;

import java.math.BigDecimal;
import java.io.File;
import org.openapitools.model.KeystoreInfo;
import org.openapitools.model.TruststoreInfo;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Adobe Experience Manager (AEM) API
 *
 * <p>Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * API tests for SlingApi 
 */
public class SlingApiTest {


    private SlingApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost", SlingApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAgentTest() {
        String runmode = null;
        String name = null;
        //api.deleteAgent(runmode, name);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() {
        String path = null;
        String name = null;
        //api.deleteNode(path, name);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentTest() {
        String runmode = null;
        String name = null;
        //api.getAgent(runmode, name);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgentsTest() {
        String runmode = null;
        //String response = api.getAgents(runmode);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthorizableKeystoreTest() {
        String intermediatePath = null;
        String authorizableId = null;
        //KeystoreInfo response = api.getAuthorizableKeystore(intermediatePath, authorizableId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKeystoreTest() {
        String intermediatePath = null;
        String authorizableId = null;
        //File response = api.getKeystore(intermediatePath, authorizableId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeTest() {
        String path = null;
        String name = null;
        //api.getNode(path, name);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackageTest() {
        String group = null;
        String name = null;
        String version = null;
        //File response = api.getPackage(group, name, version);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPackageFilterTest() {
        String group = null;
        String name = null;
        String version = null;
        //String response = api.getPackageFilter(group, name, version);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQueryTest() {
        String path = null;
        BigDecimal pLimit = null;
        String _1property = null;
        String _1propertyValue = null;
        //String response = api.getQuery(path, pLimit, _1property, _1propertyValue);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTruststoreTest() {
        //File response = api.getTruststore();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTruststoreInfoTest() {
        //TruststoreInfo response = api.getTruststoreInfo();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAgentTest() {
        String runmode = null;
        String name = null;
        Boolean jcrColonContentSlashCqColonDistribute = null;
        String jcrColonContentSlashCqColonDistributeAtTypeHint = null;
        String jcrColonContentSlashCqColonName = null;
        String jcrColonContentSlashCqColonTemplate = null;
        Boolean jcrColonContentSlashEnabled = null;
        String jcrColonContentSlashJcrColonDescription = null;
        String jcrColonContentSlashJcrColonLastModified = null;
        String jcrColonContentSlashJcrColonLastModifiedBy = null;
        String jcrColonContentSlashJcrColonMixinTypes = null;
        String jcrColonContentSlashJcrColonTitle = null;
        String jcrColonContentSlashLogLevel = null;
        Boolean jcrColonContentSlashNoStatusUpdate = null;
        Boolean jcrColonContentSlashNoVersioning = null;
        BigDecimal jcrColonContentSlashProtocolConnectTimeout = null;
        Boolean jcrColonContentSlashProtocolHTTPConnectionClosed = null;
        String jcrColonContentSlashProtocolHTTPExpired = null;
        List<String> jcrColonContentSlashProtocolHTTPHeaders = null;
        String jcrColonContentSlashProtocolHTTPHeadersAtTypeHint = null;
        String jcrColonContentSlashProtocolHTTPMethod = null;
        Boolean jcrColonContentSlashProtocolHTTPSRelaxed = null;
        String jcrColonContentSlashProtocolInterface = null;
        BigDecimal jcrColonContentSlashProtocolSocketTimeout = null;
        String jcrColonContentSlashProtocolVersion = null;
        String jcrColonContentSlashProxyNTLMDomain = null;
        String jcrColonContentSlashProxyNTLMHost = null;
        String jcrColonContentSlashProxyHost = null;
        String jcrColonContentSlashProxyPassword = null;
        BigDecimal jcrColonContentSlashProxyPort = null;
        String jcrColonContentSlashProxyUser = null;
        BigDecimal jcrColonContentSlashQueueBatchMaxSize = null;
        String jcrColonContentSlashQueueBatchMode = null;
        BigDecimal jcrColonContentSlashQueueBatchWaitTime = null;
        String jcrColonContentSlashRetryDelay = null;
        Boolean jcrColonContentSlashReverseReplication = null;
        String jcrColonContentSlashSerializationType = null;
        String jcrColonContentSlashSlingColonResourceType = null;
        String jcrColonContentSlashSsl = null;
        String jcrColonContentSlashTransportNTLMDomain = null;
        String jcrColonContentSlashTransportNTLMHost = null;
        String jcrColonContentSlashTransportPassword = null;
        String jcrColonContentSlashTransportUri = null;
        String jcrColonContentSlashTransportUser = null;
        Boolean jcrColonContentSlashTriggerDistribute = null;
        Boolean jcrColonContentSlashTriggerModified = null;
        Boolean jcrColonContentSlashTriggerOnOffTime = null;
        Boolean jcrColonContentSlashTriggerReceive = null;
        Boolean jcrColonContentSlashTriggerSpecific = null;
        String jcrColonContentSlashUserId = null;
        String jcrColonPrimaryType = null;
        String colonOperation = null;
        //api.postAgent(runmode, name, jcrColonContentSlashCqColonDistribute, jcrColonContentSlashCqColonDistributeAtTypeHint, jcrColonContentSlashCqColonName, jcrColonContentSlashCqColonTemplate, jcrColonContentSlashEnabled, jcrColonContentSlashJcrColonDescription, jcrColonContentSlashJcrColonLastModified, jcrColonContentSlashJcrColonLastModifiedBy, jcrColonContentSlashJcrColonMixinTypes, jcrColonContentSlashJcrColonTitle, jcrColonContentSlashLogLevel, jcrColonContentSlashNoStatusUpdate, jcrColonContentSlashNoVersioning, jcrColonContentSlashProtocolConnectTimeout, jcrColonContentSlashProtocolHTTPConnectionClosed, jcrColonContentSlashProtocolHTTPExpired, jcrColonContentSlashProtocolHTTPHeaders, jcrColonContentSlashProtocolHTTPHeadersAtTypeHint, jcrColonContentSlashProtocolHTTPMethod, jcrColonContentSlashProtocolHTTPSRelaxed, jcrColonContentSlashProtocolInterface, jcrColonContentSlashProtocolSocketTimeout, jcrColonContentSlashProtocolVersion, jcrColonContentSlashProxyNTLMDomain, jcrColonContentSlashProxyNTLMHost, jcrColonContentSlashProxyHost, jcrColonContentSlashProxyPassword, jcrColonContentSlashProxyPort, jcrColonContentSlashProxyUser, jcrColonContentSlashQueueBatchMaxSize, jcrColonContentSlashQueueBatchMode, jcrColonContentSlashQueueBatchWaitTime, jcrColonContentSlashRetryDelay, jcrColonContentSlashReverseReplication, jcrColonContentSlashSerializationType, jcrColonContentSlashSlingColonResourceType, jcrColonContentSlashSsl, jcrColonContentSlashTransportNTLMDomain, jcrColonContentSlashTransportNTLMHost, jcrColonContentSlashTransportPassword, jcrColonContentSlashTransportUri, jcrColonContentSlashTransportUser, jcrColonContentSlashTriggerDistribute, jcrColonContentSlashTriggerModified, jcrColonContentSlashTriggerOnOffTime, jcrColonContentSlashTriggerReceive, jcrColonContentSlashTriggerSpecific, jcrColonContentSlashUserId, jcrColonPrimaryType, colonOperation);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAuthorizableKeystoreTest() {
        String intermediatePath = null;
        String authorizableId = null;
        String colonOperation = null;
        String currentPassword = null;
        String newPassword = null;
        String rePassword = null;
        String keyPassword = null;
        String keyStorePass = null;
        String alias = null;
        String newAlias = null;
        String removeAlias = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment certChain = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment pk = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment keyStore = null;
        //KeystoreInfo response = api.postAuthorizableKeystore(intermediatePath, authorizableId, colonOperation, currentPassword, newPassword, rePassword, keyPassword, keyStorePass, alias, newAlias, removeAlias, certChain, pk, keyStore);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAuthorizablesTest() {
        String authorizableId = null;
        String intermediatePath = null;
        String createUser = null;
        String createGroup = null;
        String repColonPassword = null;
        String profileSlashGivenName = null;
        //String response = api.postAuthorizables(authorizableId, intermediatePath, createUser, createGroup, repColonPassword, profileSlashGivenName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigAdobeGraniteSamlAuthenticationHandlerTest() {
        String keyStorePassword = null;
        String keyStorePasswordAtTypeHint = null;
        Integer serviceRanking = null;
        String serviceRankingAtTypeHint = null;
        Boolean idpHttpRedirect = null;
        String idpHttpRedirectAtTypeHint = null;
        Boolean createUser = null;
        String createUserAtTypeHint = null;
        String defaultRedirectUrl = null;
        String defaultRedirectUrlAtTypeHint = null;
        String userIDAttribute = null;
        String userIDAttributeAtTypeHint = null;
        List<String> defaultGroups = null;
        String defaultGroupsAtTypeHint = null;
        String idpCertAlias = null;
        String idpCertAliasAtTypeHint = null;
        Boolean addGroupMemberships = null;
        String addGroupMembershipsAtTypeHint = null;
        List<String> path = null;
        String pathAtTypeHint = null;
        List<String> synchronizeAttributes = null;
        String synchronizeAttributesAtTypeHint = null;
        Integer clockTolerance = null;
        String clockToleranceAtTypeHint = null;
        String groupMembershipAttribute = null;
        String groupMembershipAttributeAtTypeHint = null;
        String idpUrl = null;
        String idpUrlAtTypeHint = null;
        String logoutUrl = null;
        String logoutUrlAtTypeHint = null;
        String serviceProviderEntityId = null;
        String serviceProviderEntityIdAtTypeHint = null;
        String assertionConsumerServiceURL = null;
        String assertionConsumerServiceURLAtTypeHint = null;
        Boolean handleLogout = null;
        String handleLogoutAtTypeHint = null;
        String spPrivateKeyAlias = null;
        String spPrivateKeyAliasAtTypeHint = null;
        Boolean useEncryption = null;
        String useEncryptionAtTypeHint = null;
        String nameIdFormat = null;
        String nameIdFormatAtTypeHint = null;
        String digestMethod = null;
        String digestMethodAtTypeHint = null;
        String signatureMethod = null;
        String signatureMethodAtTypeHint = null;
        String userIntermediatePath = null;
        String userIntermediatePathAtTypeHint = null;
        //api.postConfigAdobeGraniteSamlAuthenticationHandler(keyStorePassword, keyStorePasswordAtTypeHint, serviceRanking, serviceRankingAtTypeHint, idpHttpRedirect, idpHttpRedirectAtTypeHint, createUser, createUserAtTypeHint, defaultRedirectUrl, defaultRedirectUrlAtTypeHint, userIDAttribute, userIDAttributeAtTypeHint, defaultGroups, defaultGroupsAtTypeHint, idpCertAlias, idpCertAliasAtTypeHint, addGroupMemberships, addGroupMembershipsAtTypeHint, path, pathAtTypeHint, synchronizeAttributes, synchronizeAttributesAtTypeHint, clockTolerance, clockToleranceAtTypeHint, groupMembershipAttribute, groupMembershipAttributeAtTypeHint, idpUrl, idpUrlAtTypeHint, logoutUrl, logoutUrlAtTypeHint, serviceProviderEntityId, serviceProviderEntityIdAtTypeHint, assertionConsumerServiceURL, assertionConsumerServiceURLAtTypeHint, handleLogout, handleLogoutAtTypeHint, spPrivateKeyAlias, spPrivateKeyAliasAtTypeHint, useEncryption, useEncryptionAtTypeHint, nameIdFormat, nameIdFormatAtTypeHint, digestMethod, digestMethodAtTypeHint, signatureMethod, signatureMethodAtTypeHint, userIntermediatePath, userIntermediatePathAtTypeHint);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheFelixJettyBasedHttpServiceTest() {
        Boolean orgApacheFelixHttpsNio = null;
        String orgApacheFelixHttpsNioAtTypeHint = null;
        String orgApacheFelixHttpsKeystore = null;
        String orgApacheFelixHttpsKeystoreAtTypeHint = null;
        String orgApacheFelixHttpsKeystorePassword = null;
        String orgApacheFelixHttpsKeystorePasswordAtTypeHint = null;
        String orgApacheFelixHttpsKeystoreKey = null;
        String orgApacheFelixHttpsKeystoreKeyAtTypeHint = null;
        String orgApacheFelixHttpsKeystoreKeyPassword = null;
        String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint = null;
        String orgApacheFelixHttpsTruststore = null;
        String orgApacheFelixHttpsTruststoreAtTypeHint = null;
        String orgApacheFelixHttpsTruststorePassword = null;
        String orgApacheFelixHttpsTruststorePasswordAtTypeHint = null;
        String orgApacheFelixHttpsClientcertificate = null;
        String orgApacheFelixHttpsClientcertificateAtTypeHint = null;
        Boolean orgApacheFelixHttpsEnable = null;
        String orgApacheFelixHttpsEnableAtTypeHint = null;
        String orgOsgiServiceHttpPortSecure = null;
        String orgOsgiServiceHttpPortSecureAtTypeHint = null;
        //api.postConfigApacheFelixJettyBasedHttpService(orgApacheFelixHttpsNio, orgApacheFelixHttpsNioAtTypeHint, orgApacheFelixHttpsKeystore, orgApacheFelixHttpsKeystoreAtTypeHint, orgApacheFelixHttpsKeystorePassword, orgApacheFelixHttpsKeystorePasswordAtTypeHint, orgApacheFelixHttpsKeystoreKey, orgApacheFelixHttpsKeystoreKeyAtTypeHint, orgApacheFelixHttpsKeystoreKeyPassword, orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint, orgApacheFelixHttpsTruststore, orgApacheFelixHttpsTruststoreAtTypeHint, orgApacheFelixHttpsTruststorePassword, orgApacheFelixHttpsTruststorePasswordAtTypeHint, orgApacheFelixHttpsClientcertificate, orgApacheFelixHttpsClientcertificateAtTypeHint, orgApacheFelixHttpsEnable, orgApacheFelixHttpsEnableAtTypeHint, orgOsgiServiceHttpPortSecure, orgOsgiServiceHttpPortSecureAtTypeHint);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheHttpComponentsProxyConfigurationTest() {
        String proxyHost = null;
        String proxyHostAtTypeHint = null;
        Integer proxyPort = null;
        String proxyPortAtTypeHint = null;
        List<String> proxyExceptions = null;
        String proxyExceptionsAtTypeHint = null;
        Boolean proxyEnabled = null;
        String proxyEnabledAtTypeHint = null;
        String proxyUser = null;
        String proxyUserAtTypeHint = null;
        String proxyPassword = null;
        String proxyPasswordAtTypeHint = null;
        //api.postConfigApacheHttpComponentsProxyConfiguration(proxyHost, proxyHostAtTypeHint, proxyPort, proxyPortAtTypeHint, proxyExceptions, proxyExceptionsAtTypeHint, proxyEnabled, proxyEnabledAtTypeHint, proxyUser, proxyUserAtTypeHint, proxyPassword, proxyPasswordAtTypeHint);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheSlingDavExServletTest() {
        String alias = null;
        String aliasAtTypeHint = null;
        Boolean davCreateAbsoluteUri = null;
        String davCreateAbsoluteUriAtTypeHint = null;
        //api.postConfigApacheSlingDavExServlet(alias, aliasAtTypeHint, davCreateAbsoluteUri, davCreateAbsoluteUriAtTypeHint);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheSlingGetServletTest() {
        String jsonMaximumresults = null;
        String jsonMaximumresultsAtTypeHint = null;
        Boolean enableHtml = null;
        String enableHtmlAtTypeHint = null;
        Boolean enableTxt = null;
        String enableTxtAtTypeHint = null;
        Boolean enableXml = null;
        String enableXmlAtTypeHint = null;
        //api.postConfigApacheSlingGetServlet(jsonMaximumresults, jsonMaximumresultsAtTypeHint, enableHtml, enableHtmlAtTypeHint, enableTxt, enableTxtAtTypeHint, enableXml, enableXmlAtTypeHint);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConfigApacheSlingReferrerFilterTest() {
        Boolean allowEmpty = null;
        String allowEmptyAtTypeHint = null;
        String allowHosts = null;
        String allowHostsAtTypeHint = null;
        String allowHostsRegexp = null;
        String allowHostsRegexpAtTypeHint = null;
        String filterMethods = null;
        String filterMethodsAtTypeHint = null;
        //api.postConfigApacheSlingReferrerFilter(allowEmpty, allowEmptyAtTypeHint, allowHosts, allowHostsAtTypeHint, allowHostsRegexp, allowHostsRegexpAtTypeHint, filterMethods, filterMethodsAtTypeHint);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNodeTest() {
        String path = null;
        String name = null;
        String colonOperation = null;
        String deleteAuthorizable = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment file = null;
        //api.postNode(path, name, colonOperation, deleteAuthorizable, file);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNodeRwTest() {
        String path = null;
        String name = null;
        String addMembers = null;
        //api.postNodeRw(path, name, addMembers);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPathTest() {
        String path = null;
        String jcrColonPrimaryType = null;
        String colonName = null;
        //api.postPath(path, jcrColonPrimaryType, colonName);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postQueryTest() {
        String path = null;
        BigDecimal pLimit = null;
        String _1property = null;
        String _1propertyValue = null;
        //String response = api.postQuery(path, pLimit, _1property, _1propertyValue);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTreeActivationTest() {
        Boolean ignoredeactivated = null;
        Boolean onlymodified = null;
        String path = null;
        //api.postTreeActivation(ignoredeactivated, onlymodified, path);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTruststoreTest() {
        String colonOperation = null;
        String newPassword = null;
        String rePassword = null;
        String keyStoreType = null;
        String removeAlias = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment certificate = null;
        //String response = api.postTruststore(colonOperation, newPassword, rePassword, keyStoreType, removeAlias, certificate);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTruststorePKCS12Test() {
        org.apache.cxf.jaxrs.ext.multipart.Attachment truststoreP12 = null;
        //String response = api.postTruststorePKCS12(truststoreP12);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
