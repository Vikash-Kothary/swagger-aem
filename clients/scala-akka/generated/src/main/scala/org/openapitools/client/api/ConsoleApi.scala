/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.SamlConfigurationInfo
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ConsoleApi {

  /**
   * Expected answers:
   *   code 0 : Seq[String] (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   */
  def getAemProductInfo()(implicit basicAuth: BasicCredentials): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, "http://localhost", "/system/console/status-productinfo.json", "application/json")
      .withCredentials(basicAuth)
      .withDefaultSuccessResponse[Seq[String]]
        /**
   * Expected answers:
   *   code 200 : String (OK)
   *   code 5XX :  (Unexpected error.)
   * 
   * Available security schemes:
   *   aemAuth (http)
   */
  def getConfigMgr()(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "http://localhost", "/system/console/configMgr", "application/json")
      .withCredentials(basicAuth)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](5XX)
        /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param name 
   * @param action 
   */
  def postBundle(name: String, action: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/bundles/{name}", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("action", action)
      .withPathParam("name", name)
      .withDefaultSuccessResponse[Unit]
        /**
   * Expected answers:
   *   code 0 :  (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param action 
   */
  def postJmxRepository(action: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/jmx/com.adobe.granite:type=Repository/op/{action}", "application/json")
      .withCredentials(basicAuth)
      .withPathParam("action", action)
      .withDefaultSuccessResponse[Unit]
        /**
   * Expected answers:
   *   code 200 : SamlConfigurationInfo (Retrieved AEM SAML Configuration)
   *   code 302 : String (Default response)
   *   code 0 : String (Default response)
   * 
   * Available security schemes:
   *   aemAuth (http)
   * 
   * @param post 
   * @param apply 
   * @param delete 
   * @param action 
   * @param location 
   * @param path 
   * @param serviceRanking 
   * @param idpUrl 
   * @param idpCertAlias 
   * @param idpHttpRedirect 
   * @param serviceProviderEntityId 
   * @param assertionConsumerServiceURL 
   * @param spPrivateKeyAlias 
   * @param keyStorePassword 
   * @param defaultRedirectUrl 
   * @param userIDAttribute 
   * @param useEncryption 
   * @param createUser 
   * @param addGroupMemberships 
   * @param groupMembershipAttribute 
   * @param defaultGroups 
   * @param nameIdFormat 
   * @param synchronizeAttributes 
   * @param handleLogout 
   * @param logoutUrl 
   * @param clockTolerance 
   * @param digestMethod 
   * @param signatureMethod 
   * @param userIntermediatePath 
   * @param propertylist 
   */
  def postSamlConfiguration(post: Option[Boolean] = None, apply: Option[Boolean] = None, delete: Option[Boolean] = None, action: Option[String] = None, location: Option[String] = None, path: Seq[String], serviceRanking: Option[Int] = None, idpUrl: Option[String] = None, idpCertAlias: Option[String] = None, idpHttpRedirect: Option[Boolean] = None, serviceProviderEntityId: Option[String] = None, assertionConsumerServiceURL: Option[String] = None, spPrivateKeyAlias: Option[String] = None, keyStorePassword: Option[String] = None, defaultRedirectUrl: Option[String] = None, userIDAttribute: Option[String] = None, useEncryption: Option[Boolean] = None, createUser: Option[Boolean] = None, addGroupMemberships: Option[Boolean] = None, groupMembershipAttribute: Option[String] = None, defaultGroups: Seq[String], nameIdFormat: Option[String] = None, synchronizeAttributes: Seq[String], handleLogout: Option[Boolean] = None, logoutUrl: Option[String] = None, clockTolerance: Option[Int] = None, digestMethod: Option[String] = None, signatureMethod: Option[String] = None, userIntermediatePath: Option[String] = None, propertylist: Seq[String])(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "http://localhost", "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", "application/json")
      .withCredentials(basicAuth)
      .withQueryParam("post", post)
      .withQueryParam("apply", apply)
      .withQueryParam("delete", delete)
      .withQueryParam("action", action)
      .withQueryParam("$location", location)
      .withQueryParam("path", ArrayValues(path, MULTI))
      .withQueryParam("service.ranking", serviceRanking)
      .withQueryParam("idpUrl", idpUrl)
      .withQueryParam("idpCertAlias", idpCertAlias)
      .withQueryParam("idpHttpRedirect", idpHttpRedirect)
      .withQueryParam("serviceProviderEntityId", serviceProviderEntityId)
      .withQueryParam("assertionConsumerServiceURL", assertionConsumerServiceURL)
      .withQueryParam("spPrivateKeyAlias", spPrivateKeyAlias)
      .withQueryParam("keyStorePassword", keyStorePassword)
      .withQueryParam("defaultRedirectUrl", defaultRedirectUrl)
      .withQueryParam("userIDAttribute", userIDAttribute)
      .withQueryParam("useEncryption", useEncryption)
      .withQueryParam("createUser", createUser)
      .withQueryParam("addGroupMemberships", addGroupMemberships)
      .withQueryParam("groupMembershipAttribute", groupMembershipAttribute)
      .withQueryParam("defaultGroups", ArrayValues(defaultGroups, MULTI))
      .withQueryParam("nameIdFormat", nameIdFormat)
      .withQueryParam("synchronizeAttributes", ArrayValues(synchronizeAttributes, MULTI))
      .withQueryParam("handleLogout", handleLogout)
      .withQueryParam("logoutUrl", logoutUrl)
      .withQueryParam("clockTolerance", clockTolerance)
      .withQueryParam("digestMethod", digestMethod)
      .withQueryParam("signatureMethod", signatureMethod)
      .withQueryParam("userIntermediatePath", userIntermediatePath)
      .withQueryParam("propertylist", ArrayValues(propertylist, CSV))
      .withSuccessResponse[SamlConfigurationInfo](200)
      .withErrorResponse[String](302)
      .withDefaultErrorResponse[String]
      

}

