/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SamlConfigurationInfo {
  /// Persistent Identity (PID)
  #[serde(rename = "pid")]
  pid: Option<String>,
  /// Title
  #[serde(rename = "title")]
  title: Option<String>,
  /// Title
  #[serde(rename = "description")]
  description: Option<String>,
  /// needed for configuration binding
  #[serde(rename = "bundle_location")]
  bundle_location: Option<String>,
  /// needed for configuraiton binding
  #[serde(rename = "service_location")]
  service_location: Option<String>,
  #[serde(rename = "properties")]
  properties: Option<::models::SamlConfigurationProperties>
}

impl SamlConfigurationInfo {
  pub fn new() -> SamlConfigurationInfo {
    SamlConfigurationInfo {
      pid: None,
      title: None,
      description: None,
      bundle_location: None,
      service_location: None,
      properties: None
    }
  }

  pub fn set_pid(&mut self, pid: String) {
    self.pid = Some(pid);
  }

  pub fn with_pid(mut self, pid: String) -> SamlConfigurationInfo {
    self.pid = Some(pid);
    self
  }

  pub fn pid(&self) -> Option<&String> {
    self.pid.as_ref()
  }

  pub fn reset_pid(&mut self) {
    self.pid = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> SamlConfigurationInfo {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> SamlConfigurationInfo {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_bundle_location(&mut self, bundle_location: String) {
    self.bundle_location = Some(bundle_location);
  }

  pub fn with_bundle_location(mut self, bundle_location: String) -> SamlConfigurationInfo {
    self.bundle_location = Some(bundle_location);
    self
  }

  pub fn bundle_location(&self) -> Option<&String> {
    self.bundle_location.as_ref()
  }

  pub fn reset_bundle_location(&mut self) {
    self.bundle_location = None;
  }

  pub fn set_service_location(&mut self, service_location: String) {
    self.service_location = Some(service_location);
  }

  pub fn with_service_location(mut self, service_location: String) -> SamlConfigurationInfo {
    self.service_location = Some(service_location);
    self
  }

  pub fn service_location(&self) -> Option<&String> {
    self.service_location.as_ref()
  }

  pub fn reset_service_location(&mut self) {
    self.service_location = None;
  }

  pub fn set_properties(&mut self, properties: ::models::SamlConfigurationProperties) {
    self.properties = Some(properties);
  }

  pub fn with_properties(mut self, properties: ::models::SamlConfigurationProperties) -> SamlConfigurationInfo {
    self.properties = Some(properties);
    self
  }

  pub fn properties(&self) -> Option<&::models::SamlConfigurationProperties> {
    self.properties.as_ref()
  }

  pub fn reset_properties(&mut self) {
    self.properties = None;
  }

}



