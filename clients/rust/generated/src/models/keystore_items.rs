/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct KeystoreItems {
  /// Keystore alias name
  #[serde(rename = "alias")]
  alias: Option<String>,
  /// e.g. \"privateKey\"
  #[serde(rename = "entryType")]
  entry_type: Option<String>,
  /// e.g. \"RSA\"
  #[serde(rename = "algorithm")]
  algorithm: Option<String>,
  /// e.g. \"PKCS#8\"
  #[serde(rename = "format")]
  format: Option<String>,
  #[serde(rename = "chain")]
  chain: Option<Vec<::models::KeystoreChainItems>>
}

impl KeystoreItems {
  pub fn new() -> KeystoreItems {
    KeystoreItems {
      alias: None,
      entry_type: None,
      algorithm: None,
      format: None,
      chain: None
    }
  }

  pub fn set_alias(&mut self, alias: String) {
    self.alias = Some(alias);
  }

  pub fn with_alias(mut self, alias: String) -> KeystoreItems {
    self.alias = Some(alias);
    self
  }

  pub fn alias(&self) -> Option<&String> {
    self.alias.as_ref()
  }

  pub fn reset_alias(&mut self) {
    self.alias = None;
  }

  pub fn set_entry_type(&mut self, entry_type: String) {
    self.entry_type = Some(entry_type);
  }

  pub fn with_entry_type(mut self, entry_type: String) -> KeystoreItems {
    self.entry_type = Some(entry_type);
    self
  }

  pub fn entry_type(&self) -> Option<&String> {
    self.entry_type.as_ref()
  }

  pub fn reset_entry_type(&mut self) {
    self.entry_type = None;
  }

  pub fn set_algorithm(&mut self, algorithm: String) {
    self.algorithm = Some(algorithm);
  }

  pub fn with_algorithm(mut self, algorithm: String) -> KeystoreItems {
    self.algorithm = Some(algorithm);
    self
  }

  pub fn algorithm(&self) -> Option<&String> {
    self.algorithm.as_ref()
  }

  pub fn reset_algorithm(&mut self) {
    self.algorithm = None;
  }

  pub fn set_format(&mut self, format: String) {
    self.format = Some(format);
  }

  pub fn with_format(mut self, format: String) -> KeystoreItems {
    self.format = Some(format);
    self
  }

  pub fn format(&self) -> Option<&String> {
    self.format.as_ref()
  }

  pub fn reset_format(&mut self) {
    self.format = None;
  }

  pub fn set_chain(&mut self, chain: Vec<::models::KeystoreChainItems>) {
    self.chain = Some(chain);
  }

  pub fn with_chain(mut self, chain: Vec<::models::KeystoreChainItems>) -> KeystoreItems {
    self.chain = Some(chain);
    self
  }

  pub fn chain(&self) -> Option<&Vec<::models::KeystoreChainItems>> {
    self.chain.as_ref()
  }

  pub fn reset_chain(&mut self) {
    self.chain = None;
  }

}



