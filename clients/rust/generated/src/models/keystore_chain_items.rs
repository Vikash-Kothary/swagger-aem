/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct KeystoreChainItems {
  /// e.g. \"CN=localhost\"
  #[serde(rename = "subject")]
  subject: Option<String>,
  /// e.g. \"CN=Admin\"
  #[serde(rename = "issuer")]
  issuer: Option<String>,
  /// e.g. \"Sun Jul 01 12:00:00 AEST 2018\"
  #[serde(rename = "notBefore")]
  not_before: Option<String>,
  /// e.g. \"Sun Jun 30 23:59:50 AEST 2019\"
  #[serde(rename = "notAfter")]
  not_after: Option<String>,
  /// 18165099476682912368
  #[serde(rename = "serialNumber")]
  serial_number: Option<i32>
}

impl KeystoreChainItems {
  pub fn new() -> KeystoreChainItems {
    KeystoreChainItems {
      subject: None,
      issuer: None,
      not_before: None,
      not_after: None,
      serial_number: None
    }
  }

  pub fn set_subject(&mut self, subject: String) {
    self.subject = Some(subject);
  }

  pub fn with_subject(mut self, subject: String) -> KeystoreChainItems {
    self.subject = Some(subject);
    self
  }

  pub fn subject(&self) -> Option<&String> {
    self.subject.as_ref()
  }

  pub fn reset_subject(&mut self) {
    self.subject = None;
  }

  pub fn set_issuer(&mut self, issuer: String) {
    self.issuer = Some(issuer);
  }

  pub fn with_issuer(mut self, issuer: String) -> KeystoreChainItems {
    self.issuer = Some(issuer);
    self
  }

  pub fn issuer(&self) -> Option<&String> {
    self.issuer.as_ref()
  }

  pub fn reset_issuer(&mut self) {
    self.issuer = None;
  }

  pub fn set_not_before(&mut self, not_before: String) {
    self.not_before = Some(not_before);
  }

  pub fn with_not_before(mut self, not_before: String) -> KeystoreChainItems {
    self.not_before = Some(not_before);
    self
  }

  pub fn not_before(&self) -> Option<&String> {
    self.not_before.as_ref()
  }

  pub fn reset_not_before(&mut self) {
    self.not_before = None;
  }

  pub fn set_not_after(&mut self, not_after: String) {
    self.not_after = Some(not_after);
  }

  pub fn with_not_after(mut self, not_after: String) -> KeystoreChainItems {
    self.not_after = Some(not_after);
    self
  }

  pub fn not_after(&self) -> Option<&String> {
    self.not_after.as_ref()
  }

  pub fn reset_not_after(&mut self) {
    self.not_after = None;
  }

  pub fn set_serial_number(&mut self, serial_number: i32) {
    self.serial_number = Some(serial_number);
  }

  pub fn with_serial_number(mut self, serial_number: i32) -> KeystoreChainItems {
    self.serial_number = Some(serial_number);
    self
  }

  pub fn serial_number(&self) -> Option<&i32> {
    self.serial_number.as_ref()
  }

  pub fn reset_serial_number(&mut self) {
    self.serial_number = None;
  }

}



