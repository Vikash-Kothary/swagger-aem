/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CustomApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CustomApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CustomApiClient<C> {
        CustomApiClient {
            configuration: configuration,
        }
    }
}

pub trait CustomApi {
    fn get_aem_health_check(&self, tags: &str, combine_tags_or: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_config_aem_health_check_servlet(&self, bundles_ignored: Vec<String>, bundles_ignored_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_config_aem_password_reset(&self, pwdreset_authorizables: Vec<String>, pwdreset_authorizables_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>CustomApi for CustomApiClient<C> {
    fn get_aem_health_check(&self, tags: &str, combine_tags_or: bool) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/system/health".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("tags".to_string(), tags.to_string())
            .with_query_param("combineTagsOr".to_string(), combine_tags_or.to_string())
            .execute(self.configuration.borrow())
    }

    fn post_config_aem_health_check_servlet(&self, bundles_ignored: Vec<String>, bundles_ignored_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("bundles.ignored".to_string(), bundles_ignored.join(",").to_string())
            .with_query_param("bundles.ignored@TypeHint".to_string(), bundles_ignored_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_config_aem_password_reset(&self, pwdreset_authorizables: Vec<String>, pwdreset_authorizables_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("pwdreset.authorizables".to_string(), pwdreset_authorizables.join(",").to_string())
            .with_query_param("pwdreset.authorizables@TypeHint".to_string(), pwdreset_authorizables_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

}
