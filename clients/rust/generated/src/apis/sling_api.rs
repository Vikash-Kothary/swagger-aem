/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SlingApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SlingApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SlingApiClient<C> {
        SlingApiClient {
            configuration: configuration,
        }
    }
}

pub trait SlingApi {
    fn delete_agent(&self, runmode: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_node(&self, path: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_agent(&self, runmode: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_agents(&self, runmode: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_authorizable_keystore(&self, intermediate_path: &str, authorizable_id: &str) -> Box<Future<Item = ::models::KeystoreInfo, Error = Error<serde_json::Value>>>;
    fn get_keystore(&self, intermediate_path: &str, authorizable_id: &str) -> Box<Future<Item = ::models::File, Error = Error<serde_json::Value>>>;
    fn get_node(&self, path: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_package(&self, group: &str, name: &str, version: &str) -> Box<Future<Item = ::models::File, Error = Error<serde_json::Value>>>;
    fn get_package_filter(&self, group: &str, name: &str, version: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_query(&self, path: &str, p_limit: f32, var_1_property: &str, var_1_property_value: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_truststore(&self, ) -> Box<Future<Item = ::models::File, Error = Error<serde_json::Value>>>;
    fn get_truststore_info(&self, ) -> Box<Future<Item = ::models::TruststoreInfo, Error = Error<serde_json::Value>>>;
    fn post_agent(&self, runmode: &str, name: &str, jcrcontentcqdistribute: bool, jcrcontentcqdistribute_type_hint: &str, jcrcontentcqname: &str, jcrcontentcqtemplate: &str, jcrcontentenabled: bool, jcrcontentjcrdescription: &str, jcrcontentjcrlast_modified: &str, jcrcontentjcrlast_modified_by: &str, jcrcontentjcrmixin_types: &str, jcrcontentjcrtitle: &str, jcrcontentlog_level: &str, jcrcontentno_status_update: bool, jcrcontentno_versioning: bool, jcrcontentprotocol_connect_timeout: f32, jcrcontentprotocol_http_connection_closed: bool, jcrcontentprotocol_http_expired: &str, jcrcontentprotocol_http_headers: Vec<String>, jcrcontentprotocol_http_headers_type_hint: &str, jcrcontentprotocol_http_method: &str, jcrcontentprotocol_https_relaxed: bool, jcrcontentprotocol_interface: &str, jcrcontentprotocol_socket_timeout: f32, jcrcontentprotocol_version: &str, jcrcontentproxy_ntlm_domain: &str, jcrcontentproxy_ntlm_host: &str, jcrcontentproxy_host: &str, jcrcontentproxy_password: &str, jcrcontentproxy_port: f32, jcrcontentproxy_user: &str, jcrcontentqueue_batch_max_size: f32, jcrcontentqueue_batch_mode: &str, jcrcontentqueue_batch_wait_time: f32, jcrcontentretry_delay: &str, jcrcontentreverse_replication: bool, jcrcontentserialization_type: &str, jcrcontentslingresource_type: &str, jcrcontentssl: &str, jcrcontenttransport_ntlm_domain: &str, jcrcontenttransport_ntlm_host: &str, jcrcontenttransport_password: &str, jcrcontenttransport_uri: &str, jcrcontenttransport_user: &str, jcrcontenttrigger_distribute: bool, jcrcontenttrigger_modified: bool, jcrcontenttrigger_on_off_time: bool, jcrcontenttrigger_receive: bool, jcrcontenttrigger_specific: bool, jcrcontentuser_id: &str, jcrprimary_type: &str, operation: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_authorizable_keystore(&self, intermediate_path: &str, authorizable_id: &str, operation: &str, current_password: &str, new_password: &str, re_password: &str, key_password: &str, key_store_pass: &str, alias: &str, new_alias: &str, remove_alias: &str, cert_chain: ::models::File, pk: ::models::File, key_store: ::models::File) -> Box<Future<Item = ::models::KeystoreInfo, Error = Error<serde_json::Value>>>;
    fn post_authorizables(&self, authorizable_id: &str, intermediate_path: &str, create_user: &str, create_group: &str, reppassword: &str, profilegiven_name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_config_adobe_granite_saml_authentication_handler(&self, key_store_password: &str, key_store_password_type_hint: &str, service_ranking: i32, service_ranking_type_hint: &str, idp_http_redirect: bool, idp_http_redirect_type_hint: &str, create_user: bool, create_user_type_hint: &str, default_redirect_url: &str, default_redirect_url_type_hint: &str, user_id_attribute: &str, user_id_attribute_type_hint: &str, default_groups: Vec<String>, default_groups_type_hint: &str, idp_cert_alias: &str, idp_cert_alias_type_hint: &str, add_group_memberships: bool, add_group_memberships_type_hint: &str, path: Vec<String>, path_type_hint: &str, synchronize_attributes: Vec<String>, synchronize_attributes_type_hint: &str, clock_tolerance: i32, clock_tolerance_type_hint: &str, group_membership_attribute: &str, group_membership_attribute_type_hint: &str, idp_url: &str, idp_url_type_hint: &str, logout_url: &str, logout_url_type_hint: &str, service_provider_entity_id: &str, service_provider_entity_id_type_hint: &str, assertion_consumer_service_url: &str, assertion_consumer_service_url_type_hint: &str, handle_logout: bool, handle_logout_type_hint: &str, sp_private_key_alias: &str, sp_private_key_alias_type_hint: &str, use_encryption: bool, use_encryption_type_hint: &str, name_id_format: &str, name_id_format_type_hint: &str, digest_method: &str, digest_method_type_hint: &str, signature_method: &str, signature_method_type_hint: &str, user_intermediate_path: &str, user_intermediate_path_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_config_apache_felix_jetty_based_http_service(&self, org_apache_felix_https_nio: bool, org_apache_felix_https_nio_type_hint: &str, org_apache_felix_https_keystore: &str, org_apache_felix_https_keystore_type_hint: &str, org_apache_felix_https_keystore_password: &str, org_apache_felix_https_keystore_password_type_hint: &str, org_apache_felix_https_keystore_key: &str, org_apache_felix_https_keystore_key_type_hint: &str, org_apache_felix_https_keystore_key_password: &str, org_apache_felix_https_keystore_key_password_type_hint: &str, org_apache_felix_https_truststore: &str, org_apache_felix_https_truststore_type_hint: &str, org_apache_felix_https_truststore_password: &str, org_apache_felix_https_truststore_password_type_hint: &str, org_apache_felix_https_clientcertificate: &str, org_apache_felix_https_clientcertificate_type_hint: &str, org_apache_felix_https_enable: bool, org_apache_felix_https_enable_type_hint: &str, org_osgi_service_http_port_secure: &str, org_osgi_service_http_port_secure_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_config_apache_http_components_proxy_configuration(&self, proxy_host: &str, proxy_host_type_hint: &str, proxy_port: i32, proxy_port_type_hint: &str, proxy_exceptions: Vec<String>, proxy_exceptions_type_hint: &str, proxy_enabled: bool, proxy_enabled_type_hint: &str, proxy_user: &str, proxy_user_type_hint: &str, proxy_password: &str, proxy_password_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_config_apache_sling_dav_ex_servlet(&self, alias: &str, alias_type_hint: &str, dav_create_absolute_uri: bool, dav_create_absolute_uri_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_config_apache_sling_get_servlet(&self, json_maximumresults: &str, json_maximumresults_type_hint: &str, enable_html: bool, enable_html_type_hint: &str, enable_txt: bool, enable_txt_type_hint: &str, enable_xml: bool, enable_xml_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_config_apache_sling_referrer_filter(&self, allow_empty: bool, allow_empty_type_hint: &str, allow_hosts: &str, allow_hosts_type_hint: &str, allow_hosts_regexp: &str, allow_hosts_regexp_type_hint: &str, filter_methods: &str, filter_methods_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_node(&self, path: &str, name: &str, operation: &str, delete_authorizable: &str, file: ::models::File) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_node_rw(&self, path: &str, name: &str, add_members: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_path(&self, path: &str, jcrprimary_type: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_query(&self, path: &str, p_limit: f32, var_1_property: &str, var_1_property_value: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_tree_activation(&self, ignoredeactivated: bool, onlymodified: bool, path: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_truststore(&self, operation: &str, new_password: &str, re_password: &str, key_store_type: &str, remove_alias: &str, certificate: ::models::File) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_truststore_pkcs12(&self, truststore_p12: ::models::File) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>SlingApi for SlingApiClient<C> {
    fn delete_agent(&self, runmode: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/etc/replication/agents.{runmode}/{name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("runmode".to_string(), runmode.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn delete_node(&self, path: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/{path}/{name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_agent(&self, runmode: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/etc/replication/agents.{runmode}/{name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("runmode".to_string(), runmode.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_agents(&self, runmode: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/etc/replication/agents.{runmode}.-1.json".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("runmode".to_string(), runmode.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_authorizable_keystore(&self, intermediate_path: &str, authorizable_id: &str) -> Box<Future<Item = ::models::KeystoreInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/{intermediatePath}/{authorizableId}.ks.json".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("intermediatePath".to_string(), intermediate_path.to_string())
            .with_path_param("authorizableId".to_string(), authorizable_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_keystore(&self, intermediate_path: &str, authorizable_id: &str) -> Box<Future<Item = ::models::File, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/{intermediatePath}/{authorizableId}/keystore/store.p12".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("intermediatePath".to_string(), intermediate_path.to_string())
            .with_path_param("authorizableId".to_string(), authorizable_id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_node(&self, path: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/{path}/{name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn get_package(&self, group: &str, name: &str, version: &str) -> Box<Future<Item = ::models::File, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/etc/packages/{group}/{name}-{version}.zip".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("group".to_string(), group.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("version".to_string(), version.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_package_filter(&self, group: &str, name: &str, version: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("group".to_string(), group.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_path_param("version".to_string(), version.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_query(&self, path: &str, p_limit: f32, var_1_property: &str, var_1_property_value: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/bin/querybuilder.json".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("p.limit".to_string(), p_limit.to_string())
            .with_query_param("1_property".to_string(), var_1_property.to_string())
            .with_query_param("1_property.value".to_string(), var_1_property_value.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_truststore(&self, ) -> Box<Future<Item = ::models::File, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/etc/truststore/truststore.p12".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .execute(self.configuration.borrow())
    }

    fn get_truststore_info(&self, ) -> Box<Future<Item = ::models::TruststoreInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/libs/granite/security/truststore.json".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .execute(self.configuration.borrow())
    }

    fn post_agent(&self, runmode: &str, name: &str, jcrcontentcqdistribute: bool, jcrcontentcqdistribute_type_hint: &str, jcrcontentcqname: &str, jcrcontentcqtemplate: &str, jcrcontentenabled: bool, jcrcontentjcrdescription: &str, jcrcontentjcrlast_modified: &str, jcrcontentjcrlast_modified_by: &str, jcrcontentjcrmixin_types: &str, jcrcontentjcrtitle: &str, jcrcontentlog_level: &str, jcrcontentno_status_update: bool, jcrcontentno_versioning: bool, jcrcontentprotocol_connect_timeout: f32, jcrcontentprotocol_http_connection_closed: bool, jcrcontentprotocol_http_expired: &str, jcrcontentprotocol_http_headers: Vec<String>, jcrcontentprotocol_http_headers_type_hint: &str, jcrcontentprotocol_http_method: &str, jcrcontentprotocol_https_relaxed: bool, jcrcontentprotocol_interface: &str, jcrcontentprotocol_socket_timeout: f32, jcrcontentprotocol_version: &str, jcrcontentproxy_ntlm_domain: &str, jcrcontentproxy_ntlm_host: &str, jcrcontentproxy_host: &str, jcrcontentproxy_password: &str, jcrcontentproxy_port: f32, jcrcontentproxy_user: &str, jcrcontentqueue_batch_max_size: f32, jcrcontentqueue_batch_mode: &str, jcrcontentqueue_batch_wait_time: f32, jcrcontentretry_delay: &str, jcrcontentreverse_replication: bool, jcrcontentserialization_type: &str, jcrcontentslingresource_type: &str, jcrcontentssl: &str, jcrcontenttransport_ntlm_domain: &str, jcrcontenttransport_ntlm_host: &str, jcrcontenttransport_password: &str, jcrcontenttransport_uri: &str, jcrcontenttransport_user: &str, jcrcontenttrigger_distribute: bool, jcrcontenttrigger_modified: bool, jcrcontenttrigger_on_off_time: bool, jcrcontenttrigger_receive: bool, jcrcontenttrigger_specific: bool, jcrcontentuser_id: &str, jcrprimary_type: &str, operation: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/etc/replication/agents.{runmode}/{name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("jcr:content/cq:distribute".to_string(), jcrcontentcqdistribute.to_string())
            .with_query_param("jcr:content/cq:distribute@TypeHint".to_string(), jcrcontentcqdistribute_type_hint.to_string())
            .with_query_param("jcr:content/cq:name".to_string(), jcrcontentcqname.to_string())
            .with_query_param("jcr:content/cq:template".to_string(), jcrcontentcqtemplate.to_string())
            .with_query_param("jcr:content/enabled".to_string(), jcrcontentenabled.to_string())
            .with_query_param("jcr:content/jcr:description".to_string(), jcrcontentjcrdescription.to_string())
            .with_query_param("jcr:content/jcr:lastModified".to_string(), jcrcontentjcrlast_modified.to_string())
            .with_query_param("jcr:content/jcr:lastModifiedBy".to_string(), jcrcontentjcrlast_modified_by.to_string())
            .with_query_param("jcr:content/jcr:mixinTypes".to_string(), jcrcontentjcrmixin_types.to_string())
            .with_query_param("jcr:content/jcr:title".to_string(), jcrcontentjcrtitle.to_string())
            .with_query_param("jcr:content/logLevel".to_string(), jcrcontentlog_level.to_string())
            .with_query_param("jcr:content/noStatusUpdate".to_string(), jcrcontentno_status_update.to_string())
            .with_query_param("jcr:content/noVersioning".to_string(), jcrcontentno_versioning.to_string())
            .with_query_param("jcr:content/protocolConnectTimeout".to_string(), jcrcontentprotocol_connect_timeout.to_string())
            .with_query_param("jcr:content/protocolHTTPConnectionClosed".to_string(), jcrcontentprotocol_http_connection_closed.to_string())
            .with_query_param("jcr:content/protocolHTTPExpired".to_string(), jcrcontentprotocol_http_expired.to_string())
            .with_query_param("jcr:content/protocolHTTPHeaders".to_string(), jcrcontentprotocol_http_headers.join(",").to_string())
            .with_query_param("jcr:content/protocolHTTPHeaders@TypeHint".to_string(), jcrcontentprotocol_http_headers_type_hint.to_string())
            .with_query_param("jcr:content/protocolHTTPMethod".to_string(), jcrcontentprotocol_http_method.to_string())
            .with_query_param("jcr:content/protocolHTTPSRelaxed".to_string(), jcrcontentprotocol_https_relaxed.to_string())
            .with_query_param("jcr:content/protocolInterface".to_string(), jcrcontentprotocol_interface.to_string())
            .with_query_param("jcr:content/protocolSocketTimeout".to_string(), jcrcontentprotocol_socket_timeout.to_string())
            .with_query_param("jcr:content/protocolVersion".to_string(), jcrcontentprotocol_version.to_string())
            .with_query_param("jcr:content/proxyNTLMDomain".to_string(), jcrcontentproxy_ntlm_domain.to_string())
            .with_query_param("jcr:content/proxyNTLMHost".to_string(), jcrcontentproxy_ntlm_host.to_string())
            .with_query_param("jcr:content/proxyHost".to_string(), jcrcontentproxy_host.to_string())
            .with_query_param("jcr:content/proxyPassword".to_string(), jcrcontentproxy_password.to_string())
            .with_query_param("jcr:content/proxyPort".to_string(), jcrcontentproxy_port.to_string())
            .with_query_param("jcr:content/proxyUser".to_string(), jcrcontentproxy_user.to_string())
            .with_query_param("jcr:content/queueBatchMaxSize".to_string(), jcrcontentqueue_batch_max_size.to_string())
            .with_query_param("jcr:content/queueBatchMode".to_string(), jcrcontentqueue_batch_mode.to_string())
            .with_query_param("jcr:content/queueBatchWaitTime".to_string(), jcrcontentqueue_batch_wait_time.to_string())
            .with_query_param("jcr:content/retryDelay".to_string(), jcrcontentretry_delay.to_string())
            .with_query_param("jcr:content/reverseReplication".to_string(), jcrcontentreverse_replication.to_string())
            .with_query_param("jcr:content/serializationType".to_string(), jcrcontentserialization_type.to_string())
            .with_query_param("jcr:content/sling:resourceType".to_string(), jcrcontentslingresource_type.to_string())
            .with_query_param("jcr:content/ssl".to_string(), jcrcontentssl.to_string())
            .with_query_param("jcr:content/transportNTLMDomain".to_string(), jcrcontenttransport_ntlm_domain.to_string())
            .with_query_param("jcr:content/transportNTLMHost".to_string(), jcrcontenttransport_ntlm_host.to_string())
            .with_query_param("jcr:content/transportPassword".to_string(), jcrcontenttransport_password.to_string())
            .with_query_param("jcr:content/transportUri".to_string(), jcrcontenttransport_uri.to_string())
            .with_query_param("jcr:content/transportUser".to_string(), jcrcontenttransport_user.to_string())
            .with_query_param("jcr:content/triggerDistribute".to_string(), jcrcontenttrigger_distribute.to_string())
            .with_query_param("jcr:content/triggerModified".to_string(), jcrcontenttrigger_modified.to_string())
            .with_query_param("jcr:content/triggerOnOffTime".to_string(), jcrcontenttrigger_on_off_time.to_string())
            .with_query_param("jcr:content/triggerReceive".to_string(), jcrcontenttrigger_receive.to_string())
            .with_query_param("jcr:content/triggerSpecific".to_string(), jcrcontenttrigger_specific.to_string())
            .with_query_param("jcr:content/userId".to_string(), jcrcontentuser_id.to_string())
            .with_query_param("jcr:primaryType".to_string(), jcrprimary_type.to_string())
            .with_query_param(":operation".to_string(), operation.to_string())
            .with_path_param("runmode".to_string(), runmode.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_authorizable_keystore(&self, intermediate_path: &str, authorizable_id: &str, operation: &str, current_password: &str, new_password: &str, re_password: &str, key_password: &str, key_store_pass: &str, alias: &str, new_alias: &str, remove_alias: &str, cert_chain: ::models::File, pk: ::models::File, key_store: ::models::File) -> Box<Future<Item = ::models::KeystoreInfo, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/{intermediatePath}/{authorizableId}.ks.html".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param(":operation".to_string(), operation.to_string())
            .with_query_param("currentPassword".to_string(), current_password.to_string())
            .with_query_param("newPassword".to_string(), new_password.to_string())
            .with_query_param("rePassword".to_string(), re_password.to_string())
            .with_query_param("keyPassword".to_string(), key_password.to_string())
            .with_query_param("keyStorePass".to_string(), key_store_pass.to_string())
            .with_query_param("alias".to_string(), alias.to_string())
            .with_query_param("newAlias".to_string(), new_alias.to_string())
            .with_query_param("removeAlias".to_string(), remove_alias.to_string())
            .with_path_param("intermediatePath".to_string(), intermediate_path.to_string())
            .with_path_param("authorizableId".to_string(), authorizable_id.to_string())
            .with_form_param("cert-chain".to_string(), unimplemented!())
            .with_form_param("pk".to_string(), unimplemented!())
            .with_form_param("keyStore".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn post_authorizables(&self, authorizable_id: &str, intermediate_path: &str, create_user: &str, create_group: &str, reppassword: &str, profilegiven_name: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/libs/granite/security/post/authorizables".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("authorizableId".to_string(), authorizable_id.to_string())
            .with_query_param("intermediatePath".to_string(), intermediate_path.to_string())
            .with_query_param("createUser".to_string(), create_user.to_string())
            .with_query_param("createGroup".to_string(), create_group.to_string())
            .with_query_param("rep:password".to_string(), reppassword.to_string())
            .with_query_param("profile/givenName".to_string(), profilegiven_name.to_string())
            .execute(self.configuration.borrow())
    }

    fn post_config_adobe_granite_saml_authentication_handler(&self, key_store_password: &str, key_store_password_type_hint: &str, service_ranking: i32, service_ranking_type_hint: &str, idp_http_redirect: bool, idp_http_redirect_type_hint: &str, create_user: bool, create_user_type_hint: &str, default_redirect_url: &str, default_redirect_url_type_hint: &str, user_id_attribute: &str, user_id_attribute_type_hint: &str, default_groups: Vec<String>, default_groups_type_hint: &str, idp_cert_alias: &str, idp_cert_alias_type_hint: &str, add_group_memberships: bool, add_group_memberships_type_hint: &str, path: Vec<String>, path_type_hint: &str, synchronize_attributes: Vec<String>, synchronize_attributes_type_hint: &str, clock_tolerance: i32, clock_tolerance_type_hint: &str, group_membership_attribute: &str, group_membership_attribute_type_hint: &str, idp_url: &str, idp_url_type_hint: &str, logout_url: &str, logout_url_type_hint: &str, service_provider_entity_id: &str, service_provider_entity_id_type_hint: &str, assertion_consumer_service_url: &str, assertion_consumer_service_url_type_hint: &str, handle_logout: bool, handle_logout_type_hint: &str, sp_private_key_alias: &str, sp_private_key_alias_type_hint: &str, use_encryption: bool, use_encryption_type_hint: &str, name_id_format: &str, name_id_format_type_hint: &str, digest_method: &str, digest_method_type_hint: &str, signature_method: &str, signature_method_type_hint: &str, user_intermediate_path: &str, user_intermediate_path_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("keyStorePassword".to_string(), key_store_password.to_string())
            .with_query_param("keyStorePassword@TypeHint".to_string(), key_store_password_type_hint.to_string())
            .with_query_param("service.ranking".to_string(), service_ranking.to_string())
            .with_query_param("service.ranking@TypeHint".to_string(), service_ranking_type_hint.to_string())
            .with_query_param("idpHttpRedirect".to_string(), idp_http_redirect.to_string())
            .with_query_param("idpHttpRedirect@TypeHint".to_string(), idp_http_redirect_type_hint.to_string())
            .with_query_param("createUser".to_string(), create_user.to_string())
            .with_query_param("createUser@TypeHint".to_string(), create_user_type_hint.to_string())
            .with_query_param("defaultRedirectUrl".to_string(), default_redirect_url.to_string())
            .with_query_param("defaultRedirectUrl@TypeHint".to_string(), default_redirect_url_type_hint.to_string())
            .with_query_param("userIDAttribute".to_string(), user_id_attribute.to_string())
            .with_query_param("userIDAttribute@TypeHint".to_string(), user_id_attribute_type_hint.to_string())
            .with_query_param("defaultGroups".to_string(), default_groups.join(",").to_string())
            .with_query_param("defaultGroups@TypeHint".to_string(), default_groups_type_hint.to_string())
            .with_query_param("idpCertAlias".to_string(), idp_cert_alias.to_string())
            .with_query_param("idpCertAlias@TypeHint".to_string(), idp_cert_alias_type_hint.to_string())
            .with_query_param("addGroupMemberships".to_string(), add_group_memberships.to_string())
            .with_query_param("addGroupMemberships@TypeHint".to_string(), add_group_memberships_type_hint.to_string())
            .with_query_param("path".to_string(), path.join(",").to_string())
            .with_query_param("path@TypeHint".to_string(), path_type_hint.to_string())
            .with_query_param("synchronizeAttributes".to_string(), synchronize_attributes.join(",").to_string())
            .with_query_param("synchronizeAttributes@TypeHint".to_string(), synchronize_attributes_type_hint.to_string())
            .with_query_param("clockTolerance".to_string(), clock_tolerance.to_string())
            .with_query_param("clockTolerance@TypeHint".to_string(), clock_tolerance_type_hint.to_string())
            .with_query_param("groupMembershipAttribute".to_string(), group_membership_attribute.to_string())
            .with_query_param("groupMembershipAttribute@TypeHint".to_string(), group_membership_attribute_type_hint.to_string())
            .with_query_param("idpUrl".to_string(), idp_url.to_string())
            .with_query_param("idpUrl@TypeHint".to_string(), idp_url_type_hint.to_string())
            .with_query_param("logoutUrl".to_string(), logout_url.to_string())
            .with_query_param("logoutUrl@TypeHint".to_string(), logout_url_type_hint.to_string())
            .with_query_param("serviceProviderEntityId".to_string(), service_provider_entity_id.to_string())
            .with_query_param("serviceProviderEntityId@TypeHint".to_string(), service_provider_entity_id_type_hint.to_string())
            .with_query_param("assertionConsumerServiceURL".to_string(), assertion_consumer_service_url.to_string())
            .with_query_param("assertionConsumerServiceURL@TypeHint".to_string(), assertion_consumer_service_url_type_hint.to_string())
            .with_query_param("handleLogout".to_string(), handle_logout.to_string())
            .with_query_param("handleLogout@TypeHint".to_string(), handle_logout_type_hint.to_string())
            .with_query_param("spPrivateKeyAlias".to_string(), sp_private_key_alias.to_string())
            .with_query_param("spPrivateKeyAlias@TypeHint".to_string(), sp_private_key_alias_type_hint.to_string())
            .with_query_param("useEncryption".to_string(), use_encryption.to_string())
            .with_query_param("useEncryption@TypeHint".to_string(), use_encryption_type_hint.to_string())
            .with_query_param("nameIdFormat".to_string(), name_id_format.to_string())
            .with_query_param("nameIdFormat@TypeHint".to_string(), name_id_format_type_hint.to_string())
            .with_query_param("digestMethod".to_string(), digest_method.to_string())
            .with_query_param("digestMethod@TypeHint".to_string(), digest_method_type_hint.to_string())
            .with_query_param("signatureMethod".to_string(), signature_method.to_string())
            .with_query_param("signatureMethod@TypeHint".to_string(), signature_method_type_hint.to_string())
            .with_query_param("userIntermediatePath".to_string(), user_intermediate_path.to_string())
            .with_query_param("userIntermediatePath@TypeHint".to_string(), user_intermediate_path_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_config_apache_felix_jetty_based_http_service(&self, org_apache_felix_https_nio: bool, org_apache_felix_https_nio_type_hint: &str, org_apache_felix_https_keystore: &str, org_apache_felix_https_keystore_type_hint: &str, org_apache_felix_https_keystore_password: &str, org_apache_felix_https_keystore_password_type_hint: &str, org_apache_felix_https_keystore_key: &str, org_apache_felix_https_keystore_key_type_hint: &str, org_apache_felix_https_keystore_key_password: &str, org_apache_felix_https_keystore_key_password_type_hint: &str, org_apache_felix_https_truststore: &str, org_apache_felix_https_truststore_type_hint: &str, org_apache_felix_https_truststore_password: &str, org_apache_felix_https_truststore_password_type_hint: &str, org_apache_felix_https_clientcertificate: &str, org_apache_felix_https_clientcertificate_type_hint: &str, org_apache_felix_https_enable: bool, org_apache_felix_https_enable_type_hint: &str, org_osgi_service_http_port_secure: &str, org_osgi_service_http_port_secure_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/org.apache.felix.http".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("org.apache.felix.https.nio".to_string(), org_apache_felix_https_nio.to_string())
            .with_query_param("org.apache.felix.https.nio@TypeHint".to_string(), org_apache_felix_https_nio_type_hint.to_string())
            .with_query_param("org.apache.felix.https.keystore".to_string(), org_apache_felix_https_keystore.to_string())
            .with_query_param("org.apache.felix.https.keystore@TypeHint".to_string(), org_apache_felix_https_keystore_type_hint.to_string())
            .with_query_param("org.apache.felix.https.keystore.password".to_string(), org_apache_felix_https_keystore_password.to_string())
            .with_query_param("org.apache.felix.https.keystore.password@TypeHint".to_string(), org_apache_felix_https_keystore_password_type_hint.to_string())
            .with_query_param("org.apache.felix.https.keystore.key".to_string(), org_apache_felix_https_keystore_key.to_string())
            .with_query_param("org.apache.felix.https.keystore.key@TypeHint".to_string(), org_apache_felix_https_keystore_key_type_hint.to_string())
            .with_query_param("org.apache.felix.https.keystore.key.password".to_string(), org_apache_felix_https_keystore_key_password.to_string())
            .with_query_param("org.apache.felix.https.keystore.key.password@TypeHint".to_string(), org_apache_felix_https_keystore_key_password_type_hint.to_string())
            .with_query_param("org.apache.felix.https.truststore".to_string(), org_apache_felix_https_truststore.to_string())
            .with_query_param("org.apache.felix.https.truststore@TypeHint".to_string(), org_apache_felix_https_truststore_type_hint.to_string())
            .with_query_param("org.apache.felix.https.truststore.password".to_string(), org_apache_felix_https_truststore_password.to_string())
            .with_query_param("org.apache.felix.https.truststore.password@TypeHint".to_string(), org_apache_felix_https_truststore_password_type_hint.to_string())
            .with_query_param("org.apache.felix.https.clientcertificate".to_string(), org_apache_felix_https_clientcertificate.to_string())
            .with_query_param("org.apache.felix.https.clientcertificate@TypeHint".to_string(), org_apache_felix_https_clientcertificate_type_hint.to_string())
            .with_query_param("org.apache.felix.https.enable".to_string(), org_apache_felix_https_enable.to_string())
            .with_query_param("org.apache.felix.https.enable@TypeHint".to_string(), org_apache_felix_https_enable_type_hint.to_string())
            .with_query_param("org.osgi.service.http.port.secure".to_string(), org_osgi_service_http_port_secure.to_string())
            .with_query_param("org.osgi.service.http.port.secure@TypeHint".to_string(), org_osgi_service_http_port_secure_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_config_apache_http_components_proxy_configuration(&self, proxy_host: &str, proxy_host_type_hint: &str, proxy_port: i32, proxy_port_type_hint: &str, proxy_exceptions: Vec<String>, proxy_exceptions_type_hint: &str, proxy_enabled: bool, proxy_enabled_type_hint: &str, proxy_user: &str, proxy_user_type_hint: &str, proxy_password: &str, proxy_password_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/org.apache.http.proxyconfigurator.config".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("proxy.host".to_string(), proxy_host.to_string())
            .with_query_param("proxy.host@TypeHint".to_string(), proxy_host_type_hint.to_string())
            .with_query_param("proxy.port".to_string(), proxy_port.to_string())
            .with_query_param("proxy.port@TypeHint".to_string(), proxy_port_type_hint.to_string())
            .with_query_param("proxy.exceptions".to_string(), proxy_exceptions.join(",").to_string())
            .with_query_param("proxy.exceptions@TypeHint".to_string(), proxy_exceptions_type_hint.to_string())
            .with_query_param("proxy.enabled".to_string(), proxy_enabled.to_string())
            .with_query_param("proxy.enabled@TypeHint".to_string(), proxy_enabled_type_hint.to_string())
            .with_query_param("proxy.user".to_string(), proxy_user.to_string())
            .with_query_param("proxy.user@TypeHint".to_string(), proxy_user_type_hint.to_string())
            .with_query_param("proxy.password".to_string(), proxy_password.to_string())
            .with_query_param("proxy.password@TypeHint".to_string(), proxy_password_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_config_apache_sling_dav_ex_servlet(&self, alias: &str, alias_type_hint: &str, dav_create_absolute_uri: bool, dav_create_absolute_uri_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("alias".to_string(), alias.to_string())
            .with_query_param("alias@TypeHint".to_string(), alias_type_hint.to_string())
            .with_query_param("dav.create-absolute-uri".to_string(), dav_create_absolute_uri.to_string())
            .with_query_param("dav.create-absolute-uri@TypeHint".to_string(), dav_create_absolute_uri_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_config_apache_sling_get_servlet(&self, json_maximumresults: &str, json_maximumresults_type_hint: &str, enable_html: bool, enable_html_type_hint: &str, enable_txt: bool, enable_txt_type_hint: &str, enable_xml: bool, enable_xml_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("json.maximumresults".to_string(), json_maximumresults.to_string())
            .with_query_param("json.maximumresults@TypeHint".to_string(), json_maximumresults_type_hint.to_string())
            .with_query_param("enable.html".to_string(), enable_html.to_string())
            .with_query_param("enable.html@TypeHint".to_string(), enable_html_type_hint.to_string())
            .with_query_param("enable.txt".to_string(), enable_txt.to_string())
            .with_query_param("enable.txt@TypeHint".to_string(), enable_txt_type_hint.to_string())
            .with_query_param("enable.xml".to_string(), enable_xml.to_string())
            .with_query_param("enable.xml@TypeHint".to_string(), enable_xml_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_config_apache_sling_referrer_filter(&self, allow_empty: bool, allow_empty_type_hint: &str, allow_hosts: &str, allow_hosts_type_hint: &str, allow_hosts_regexp: &str, allow_hosts_regexp_type_hint: &str, filter_methods: &str, filter_methods_type_hint: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("allow.empty".to_string(), allow_empty.to_string())
            .with_query_param("allow.empty@TypeHint".to_string(), allow_empty_type_hint.to_string())
            .with_query_param("allow.hosts".to_string(), allow_hosts.to_string())
            .with_query_param("allow.hosts@TypeHint".to_string(), allow_hosts_type_hint.to_string())
            .with_query_param("allow.hosts.regexp".to_string(), allow_hosts_regexp.to_string())
            .with_query_param("allow.hosts.regexp@TypeHint".to_string(), allow_hosts_regexp_type_hint.to_string())
            .with_query_param("filter.methods".to_string(), filter_methods.to_string())
            .with_query_param("filter.methods@TypeHint".to_string(), filter_methods_type_hint.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_node(&self, path: &str, name: &str, operation: &str, delete_authorizable: &str, file: ::models::File) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/{path}/{name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param(":operation".to_string(), operation.to_string())
            .with_query_param("deleteAuthorizable".to_string(), delete_authorizable.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_node_rw(&self, path: &str, name: &str, add_members: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/{path}/{name}.rw.html".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("addMembers".to_string(), add_members.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .with_path_param("name".to_string(), name.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_path(&self, path: &str, jcrprimary_type: &str, name: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/{path}/".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("jcr:primaryType".to_string(), jcrprimary_type.to_string())
            .with_query_param(":name".to_string(), name.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_query(&self, path: &str, p_limit: f32, var_1_property: &str, var_1_property_value: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/bin/querybuilder.json".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("p.limit".to_string(), p_limit.to_string())
            .with_query_param("1_property".to_string(), var_1_property.to_string())
            .with_query_param("1_property.value".to_string(), var_1_property_value.to_string())
            .execute(self.configuration.borrow())
    }

    fn post_tree_activation(&self, ignoredeactivated: bool, onlymodified: bool, path: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/etc/replication/treeactivation.html".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("ignoredeactivated".to_string(), ignoredeactivated.to_string())
            .with_query_param("onlymodified".to_string(), onlymodified.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_truststore(&self, operation: &str, new_password: &str, re_password: &str, key_store_type: &str, remove_alias: &str, certificate: ::models::File) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/libs/granite/security/post/truststore".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param(":operation".to_string(), operation.to_string())
            .with_query_param("newPassword".to_string(), new_password.to_string())
            .with_query_param("rePassword".to_string(), re_password.to_string())
            .with_query_param("keyStoreType".to_string(), key_store_type.to_string())
            .with_query_param("removeAlias".to_string(), remove_alias.to_string())
            .with_form_param("certificate".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn post_truststore_pkcs12(&self, truststore_p12: ::models::File) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/etc/truststore".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_form_param("truststore.p12".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

}
