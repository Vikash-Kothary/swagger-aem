/* 
 * Adobe Experience Manager (AEM) API
 *
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * OpenAPI spec version: 3.2.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CrxApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CrxApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CrxApiClient<C> {
        CrxApiClient {
            configuration: configuration,
        }
    }
}

pub trait CrxApi {
    fn get_crxde_status(&self, ) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn get_install_status(&self, ) -> Box<Future<Item = ::models::InstallStatus, Error = Error<serde_json::Value>>>;
    fn get_package_manager_servlet(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn post_package_service(&self, cmd: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_package_service_json(&self, path: &str, cmd: &str, group_name: &str, package_name: &str, package_version: &str, _charset_: &str, force: bool, recursive: bool, package: ::models::File) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_package_update(&self, group_name: &str, package_name: &str, version: &str, path: &str, filter: &str, _charset_: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
    fn post_set_password(&self, old: &str, plain: &str, verify: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>CrxApi for CrxApiClient<C> {
    fn get_crxde_status(&self, ) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/crx/server/crx.default/jcr:root/.1.json".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .execute(self.configuration.borrow())
    }

    fn get_install_status(&self, ) -> Box<Future<Item = ::models::InstallStatus, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/crx/packmgr/installstatus.jsp".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .execute(self.configuration.borrow())
    }

    fn get_package_manager_servlet(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/crx/packmgr/service/script.html".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn post_package_service(&self, cmd: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/crx/packmgr/service.jsp".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("cmd".to_string(), cmd.to_string())
            .execute(self.configuration.borrow())
    }

    fn post_package_service_json(&self, path: &str, cmd: &str, group_name: &str, package_name: &str, package_version: &str, _charset_: &str, force: bool, recursive: bool, package: ::models::File) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/crx/packmgr/service/.json/{path}".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("cmd".to_string(), cmd.to_string())
            .with_query_param("groupName".to_string(), group_name.to_string())
            .with_query_param("packageName".to_string(), package_name.to_string())
            .with_query_param("packageVersion".to_string(), package_version.to_string())
            .with_query_param("_charset_".to_string(), _charset_.to_string())
            .with_query_param("force".to_string(), force.to_string())
            .with_query_param("recursive".to_string(), recursive.to_string())
            .with_path_param("path".to_string(), path.to_string())
            .with_form_param("package".to_string(), unimplemented!())
            .execute(self.configuration.borrow())
    }

    fn post_package_update(&self, group_name: &str, package_name: &str, version: &str, path: &str, filter: &str, _charset_: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/crx/packmgr/update.jsp".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("groupName".to_string(), group_name.to_string())
            .with_query_param("packageName".to_string(), package_name.to_string())
            .with_query_param("version".to_string(), version.to_string())
            .with_query_param("path".to_string(), path.to_string())
            .with_query_param("filter".to_string(), filter.to_string())
            .with_query_param("_charset_".to_string(), _charset_.to_string())
            .execute(self.configuration.borrow())
    }

    fn post_set_password(&self, old: &str, plain: &str, verify: &str) -> Box<Future<Item = String, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/crx/explorer/ui/setpassword.jsp".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_query_param("old".to_string(), old.to_string())
            .with_query_param("plain".to_string(), plain.to_string())
            .with_query_param("verify".to_string(), verify.to_string())
            .execute(self.configuration.borrow())
    }

}
