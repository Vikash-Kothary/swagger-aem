/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-08-04T23:44:43.219Z[GMT]")

@Validated
@Api(value = "bin", description = "the bin API")
public interface BinApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "getQuery", notes = "", response = String.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/bin/querybuilder.json",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getQuery(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "path", required = true) String path,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "p.limit", required = true) BigDecimal pLimit,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "1_property", required = true) String _1property,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "1_property.value", required = true) String _1propertyValue) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postQuery", notes = "", response = String.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/bin/querybuilder.json",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<String> postQuery(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "path", required = true) String path,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "p.limit", required = true) BigDecimal pLimit,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "1_property", required = true) String _1property,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "1_property.value", required = true) String _1propertyValue) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
