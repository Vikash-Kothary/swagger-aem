/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-08-04T23:44:43.219Z[GMT]")

@Validated
@Api(value = "apps", description = "the apps API")
public interface AppsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "postConfigAdobeGraniteSamlAuthenticationHandler", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigAdobeGraniteSamlAuthenticationHandler(@ApiParam(value = "") @Valid @RequestParam(value = "keyStorePassword", required = false) String keyStorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "keyStorePassword@TypeHint", required = false) String keyStorePasswordAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking", required = false) Integer serviceRanking,@ApiParam(value = "") @Valid @RequestParam(value = "service.ranking@TypeHint", required = false) String serviceRankingAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "idpHttpRedirect", required = false) Boolean idpHttpRedirect,@ApiParam(value = "") @Valid @RequestParam(value = "idpHttpRedirect@TypeHint", required = false) String idpHttpRedirectAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "createUser", required = false) Boolean createUser,@ApiParam(value = "") @Valid @RequestParam(value = "createUser@TypeHint", required = false) String createUserAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "defaultRedirectUrl", required = false) String defaultRedirectUrl,@ApiParam(value = "") @Valid @RequestParam(value = "defaultRedirectUrl@TypeHint", required = false) String defaultRedirectUrlAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "userIDAttribute", required = false) String userIDAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "userIDAttribute@TypeHint", required = false) String userIDAttributeAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "defaultGroups", required = false) List<String> defaultGroups,@ApiParam(value = "") @Valid @RequestParam(value = "defaultGroups@TypeHint", required = false) String defaultGroupsAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "idpCertAlias", required = false) String idpCertAlias,@ApiParam(value = "") @Valid @RequestParam(value = "idpCertAlias@TypeHint", required = false) String idpCertAliasAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "addGroupMemberships", required = false) Boolean addGroupMemberships,@ApiParam(value = "") @Valid @RequestParam(value = "addGroupMemberships@TypeHint", required = false) String addGroupMembershipsAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "path", required = false) List<String> path,@ApiParam(value = "") @Valid @RequestParam(value = "path@TypeHint", required = false) String pathAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "synchronizeAttributes", required = false) List<String> synchronizeAttributes,@ApiParam(value = "") @Valid @RequestParam(value = "synchronizeAttributes@TypeHint", required = false) String synchronizeAttributesAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "clockTolerance", required = false) Integer clockTolerance,@ApiParam(value = "") @Valid @RequestParam(value = "clockTolerance@TypeHint", required = false) String clockToleranceAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "groupMembershipAttribute", required = false) String groupMembershipAttribute,@ApiParam(value = "") @Valid @RequestParam(value = "groupMembershipAttribute@TypeHint", required = false) String groupMembershipAttributeAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "idpUrl", required = false) String idpUrl,@ApiParam(value = "") @Valid @RequestParam(value = "idpUrl@TypeHint", required = false) String idpUrlAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "logoutUrl", required = false) String logoutUrl,@ApiParam(value = "") @Valid @RequestParam(value = "logoutUrl@TypeHint", required = false) String logoutUrlAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "serviceProviderEntityId", required = false) String serviceProviderEntityId,@ApiParam(value = "") @Valid @RequestParam(value = "serviceProviderEntityId@TypeHint", required = false) String serviceProviderEntityIdAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "assertionConsumerServiceURL", required = false) String assertionConsumerServiceURL,@ApiParam(value = "") @Valid @RequestParam(value = "assertionConsumerServiceURL@TypeHint", required = false) String assertionConsumerServiceURLAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "handleLogout", required = false) Boolean handleLogout,@ApiParam(value = "") @Valid @RequestParam(value = "handleLogout@TypeHint", required = false) String handleLogoutAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "spPrivateKeyAlias", required = false) String spPrivateKeyAlias,@ApiParam(value = "") @Valid @RequestParam(value = "spPrivateKeyAlias@TypeHint", required = false) String spPrivateKeyAliasAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "useEncryption", required = false) Boolean useEncryption,@ApiParam(value = "") @Valid @RequestParam(value = "useEncryption@TypeHint", required = false) String useEncryptionAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "nameIdFormat", required = false) String nameIdFormat,@ApiParam(value = "") @Valid @RequestParam(value = "nameIdFormat@TypeHint", required = false) String nameIdFormatAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "digestMethod", required = false) String digestMethod,@ApiParam(value = "") @Valid @RequestParam(value = "digestMethod@TypeHint", required = false) String digestMethodAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "signatureMethod", required = false) String signatureMethod,@ApiParam(value = "") @Valid @RequestParam(value = "signatureMethod@TypeHint", required = false) String signatureMethodAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "userIntermediatePath", required = false) String userIntermediatePath,@ApiParam(value = "") @Valid @RequestParam(value = "userIntermediatePath@TypeHint", required = false) String userIntermediatePathAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postConfigAemHealthCheckServlet", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "custom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigAemHealthCheckServlet(@ApiParam(value = "") @Valid @RequestParam(value = "bundles.ignored", required = false) List<String> bundlesIgnored,@ApiParam(value = "") @Valid @RequestParam(value = "bundles.ignored@TypeHint", required = false) String bundlesIgnoredAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postConfigAemPasswordReset", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "custom", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigAemPasswordReset(@ApiParam(value = "") @Valid @RequestParam(value = "pwdreset.authorizables", required = false) List<String> pwdresetAuthorizables,@ApiParam(value = "") @Valid @RequestParam(value = "pwdreset.authorizables@TypeHint", required = false) String pwdresetAuthorizablesAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postConfigApacheFelixJettyBasedHttpService", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/org.apache.felix.http",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigApacheFelixJettyBasedHttpService(@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.nio", required = false) Boolean orgApacheFelixHttpsNio,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.nio@TypeHint", required = false) String orgApacheFelixHttpsNioAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore", required = false) String orgApacheFelixHttpsKeystore,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore@TypeHint", required = false) String orgApacheFelixHttpsKeystoreAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.password", required = false) String orgApacheFelixHttpsKeystorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.password@TypeHint", required = false) String orgApacheFelixHttpsKeystorePasswordAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.key", required = false) String orgApacheFelixHttpsKeystoreKey,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.key@TypeHint", required = false) String orgApacheFelixHttpsKeystoreKeyAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.key.password", required = false) String orgApacheFelixHttpsKeystoreKeyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.keystore.key.password@TypeHint", required = false) String orgApacheFelixHttpsKeystoreKeyPasswordAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.truststore", required = false) String orgApacheFelixHttpsTruststore,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.truststore@TypeHint", required = false) String orgApacheFelixHttpsTruststoreAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.truststore.password", required = false) String orgApacheFelixHttpsTruststorePassword,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.truststore.password@TypeHint", required = false) String orgApacheFelixHttpsTruststorePasswordAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.clientcertificate", required = false) String orgApacheFelixHttpsClientcertificate,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.clientcertificate@TypeHint", required = false) String orgApacheFelixHttpsClientcertificateAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.enable", required = false) Boolean orgApacheFelixHttpsEnable,@ApiParam(value = "") @Valid @RequestParam(value = "org.apache.felix.https.enable@TypeHint", required = false) String orgApacheFelixHttpsEnableAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "org.osgi.service.http.port.secure", required = false) String orgOsgiServiceHttpPortSecure,@ApiParam(value = "") @Valid @RequestParam(value = "org.osgi.service.http.port.secure@TypeHint", required = false) String orgOsgiServiceHttpPortSecureAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postConfigApacheHttpComponentsProxyConfiguration", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/org.apache.http.proxyconfigurator.config",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigApacheHttpComponentsProxyConfiguration(@ApiParam(value = "") @Valid @RequestParam(value = "proxy.host", required = false) String proxyHost,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.host@TypeHint", required = false) String proxyHostAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.port", required = false) Integer proxyPort,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.port@TypeHint", required = false) String proxyPortAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.exceptions", required = false) List<String> proxyExceptions,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.exceptions@TypeHint", required = false) String proxyExceptionsAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.enabled", required = false) Boolean proxyEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.enabled@TypeHint", required = false) String proxyEnabledAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.user", required = false) String proxyUser,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.user@TypeHint", required = false) String proxyUserAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.password", required = false) String proxyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "proxy.password@TypeHint", required = false) String proxyPasswordAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postConfigApacheSlingDavExServlet", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigApacheSlingDavExServlet(@ApiParam(value = "") @Valid @RequestParam(value = "alias", required = false) String alias,@ApiParam(value = "") @Valid @RequestParam(value = "alias@TypeHint", required = false) String aliasAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "dav.create-absolute-uri", required = false) Boolean davCreateAbsoluteUri,@ApiParam(value = "") @Valid @RequestParam(value = "dav.create-absolute-uri@TypeHint", required = false) String davCreateAbsoluteUriAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postConfigApacheSlingGetServlet", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigApacheSlingGetServlet(@ApiParam(value = "") @Valid @RequestParam(value = "json.maximumresults", required = false) String jsonMaximumresults,@ApiParam(value = "") @Valid @RequestParam(value = "json.maximumresults@TypeHint", required = false) String jsonMaximumresultsAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "enable.html", required = false) Boolean enableHtml,@ApiParam(value = "") @Valid @RequestParam(value = "enable.html@TypeHint", required = false) String enableHtmlAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "enable.txt", required = false) Boolean enableTxt,@ApiParam(value = "") @Valid @RequestParam(value = "enable.txt@TypeHint", required = false) String enableTxtAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "enable.xml", required = false) Boolean enableXml,@ApiParam(value = "") @Valid @RequestParam(value = "enable.xml@TypeHint", required = false) String enableXmlAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postConfigApacheSlingReferrerFilter", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/apps/system/config/org.apache.sling.security.impl.ReferrerFilter",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postConfigApacheSlingReferrerFilter(@ApiParam(value = "") @Valid @RequestParam(value = "allow.empty", required = false) Boolean allowEmpty,@ApiParam(value = "") @Valid @RequestParam(value = "allow.empty@TypeHint", required = false) String allowEmptyAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "allow.hosts", required = false) String allowHosts,@ApiParam(value = "") @Valid @RequestParam(value = "allow.hosts@TypeHint", required = false) String allowHostsAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "allow.hosts.regexp", required = false) String allowHostsRegexp,@ApiParam(value = "") @Valid @RequestParam(value = "allow.hosts.regexp@TypeHint", required = false) String allowHostsRegexpAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "filter.methods", required = false) String filterMethods,@ApiParam(value = "") @Valid @RequestParam(value = "filter.methods@TypeHint", required = false) String filterMethodsAtTypeHint) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
