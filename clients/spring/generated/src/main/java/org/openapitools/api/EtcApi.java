/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-08-04T23:44:43.219Z[GMT]")

@Validated
@Api(value = "etc", description = "the etc API")
public interface EtcApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "deleteAgent", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/etc/replication/agents.{runmode}/{name}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteAgent(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode,@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getAgent", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/etc/replication/agents.{runmode}/{name}",
        method = RequestMethod.GET)
    default ResponseEntity<Void> getAgent(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode,@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getAgents", notes = "", response = String.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/etc/replication/agents.{runmode}.-1.json",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getAgents(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPackage", notes = "", response = Resource.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = Resource.class) })
    @RequestMapping(value = "/etc/packages/{group}/{name}-{version}.zip",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resource> getPackage(@ApiParam(value = "",required=true) @PathVariable("group") String group,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "",required=true) @PathVariable("version") String version) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPackageFilter", notes = "", response = String.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getPackageFilter(@ApiParam(value = "",required=true) @PathVariable("group") String group,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "",required=true) @PathVariable("version") String version) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getTruststore", notes = "", response = Resource.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = Resource.class) })
    @RequestMapping(value = "/etc/truststore/truststore.p12",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resource> getTruststore() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postAgent", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/etc/replication/agents.{runmode}/{name}",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postAgent(@ApiParam(value = "",required=true) @PathVariable("runmode") String runmode,@ApiParam(value = "",required=true) @PathVariable("name") String name,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:distribute", required = false) Boolean jcrColonContentSlashCqColonDistribute,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:distribute@TypeHint", required = false) String jcrColonContentSlashCqColonDistributeAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:name", required = false) String jcrColonContentSlashCqColonName,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/cq:template", required = false) String jcrColonContentSlashCqColonTemplate,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/enabled", required = false) Boolean jcrColonContentSlashEnabled,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:description", required = false) String jcrColonContentSlashJcrColonDescription,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:lastModified", required = false) String jcrColonContentSlashJcrColonLastModified,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:lastModifiedBy", required = false) String jcrColonContentSlashJcrColonLastModifiedBy,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:mixinTypes", required = false) String jcrColonContentSlashJcrColonMixinTypes,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/jcr:title", required = false) String jcrColonContentSlashJcrColonTitle,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/logLevel", required = false) String jcrColonContentSlashLogLevel,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/noStatusUpdate", required = false) Boolean jcrColonContentSlashNoStatusUpdate,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/noVersioning", required = false) Boolean jcrColonContentSlashNoVersioning,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolConnectTimeout", required = false) BigDecimal jcrColonContentSlashProtocolConnectTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPConnectionClosed", required = false) Boolean jcrColonContentSlashProtocolHTTPConnectionClosed,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPExpired", required = false) String jcrColonContentSlashProtocolHTTPExpired,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPHeaders", required = false) List<String> jcrColonContentSlashProtocolHTTPHeaders,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPHeaders@TypeHint", required = false) String jcrColonContentSlashProtocolHTTPHeadersAtTypeHint,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPMethod", required = false) String jcrColonContentSlashProtocolHTTPMethod,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolHTTPSRelaxed", required = false) Boolean jcrColonContentSlashProtocolHTTPSRelaxed,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolInterface", required = false) String jcrColonContentSlashProtocolInterface,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolSocketTimeout", required = false) BigDecimal jcrColonContentSlashProtocolSocketTimeout,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/protocolVersion", required = false) String jcrColonContentSlashProtocolVersion,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyNTLMDomain", required = false) String jcrColonContentSlashProxyNTLMDomain,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyNTLMHost", required = false) String jcrColonContentSlashProxyNTLMHost,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyHost", required = false) String jcrColonContentSlashProxyHost,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyPassword", required = false) String jcrColonContentSlashProxyPassword,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyPort", required = false) BigDecimal jcrColonContentSlashProxyPort,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/proxyUser", required = false) String jcrColonContentSlashProxyUser,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/queueBatchMaxSize", required = false) BigDecimal jcrColonContentSlashQueueBatchMaxSize,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/queueBatchMode", required = false) String jcrColonContentSlashQueueBatchMode,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/queueBatchWaitTime", required = false) BigDecimal jcrColonContentSlashQueueBatchWaitTime,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/retryDelay", required = false) String jcrColonContentSlashRetryDelay,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/reverseReplication", required = false) Boolean jcrColonContentSlashReverseReplication,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/serializationType", required = false) String jcrColonContentSlashSerializationType,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/sling:resourceType", required = false) String jcrColonContentSlashSlingColonResourceType,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/ssl", required = false) String jcrColonContentSlashSsl,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportNTLMDomain", required = false) String jcrColonContentSlashTransportNTLMDomain,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportNTLMHost", required = false) String jcrColonContentSlashTransportNTLMHost,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportPassword", required = false) String jcrColonContentSlashTransportPassword,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportUri", required = false) String jcrColonContentSlashTransportUri,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/transportUser", required = false) String jcrColonContentSlashTransportUser,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerDistribute", required = false) Boolean jcrColonContentSlashTriggerDistribute,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerModified", required = false) Boolean jcrColonContentSlashTriggerModified,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerOnOffTime", required = false) Boolean jcrColonContentSlashTriggerOnOffTime,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerReceive", required = false) Boolean jcrColonContentSlashTriggerReceive,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/triggerSpecific", required = false) Boolean jcrColonContentSlashTriggerSpecific,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:content/userId", required = false) String jcrColonContentSlashUserId,@ApiParam(value = "") @Valid @RequestParam(value = "jcr:primaryType", required = false) String jcrColonPrimaryType,@ApiParam(value = "") @Valid @RequestParam(value = ":operation", required = false) String colonOperation) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postTreeActivation", notes = "", authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response") })
    @RequestMapping(value = "/etc/replication/treeactivation.html",
        method = RequestMethod.POST)
    default ResponseEntity<Void> postTreeActivation(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "ignoredeactivated", required = true) Boolean ignoredeactivated,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "onlymodified", required = true) Boolean onlymodified,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "path", required = true) String path) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postTruststorePKCS12", notes = "", response = String.class, authorizations = {
        @Authorization(value = "aemAuth")
    }, tags={ "sling", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Default response", response = String.class) })
    @RequestMapping(value = "/etc/truststore",
        produces = { "text/plain" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<String> postTruststorePKCS12(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile truststore.p12) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
