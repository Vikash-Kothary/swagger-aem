/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "CrxApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CrxApi::CrxApi(Pistache::Address addr)
    : httpEndpoint(addr)
{ };

void CrxApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::InstallSignalHandler);
    httpEndpoint.init(opts);
    setupRoutes();
}

void CrxApi::start() {
    httpEndpoint.setHandler(router.handler());
    httpEndpoint.serve();
}

void CrxApi::shutdown() {
    httpEndpoint.shutdown();
}

void CrxApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(router, base + "/crx/server/crx.default/jcr:root/.1.json", Routes::bind(&CrxApi::get_crxde_status_handler, this));
    Routes::Get(router, base + "/crx/packmgr/installstatus.jsp", Routes::bind(&CrxApi::get_install_status_handler, this));
    Routes::Get(router, base + "/crx/packmgr/service/script.html", Routes::bind(&CrxApi::get_package_manager_servlet_handler, this));
    Routes::Post(router, base + "/crx/packmgr/service.jsp", Routes::bind(&CrxApi::post_package_service_handler, this));
    Routes::Post(router, base + "/crx/packmgr/service/.json/:path", Routes::bind(&CrxApi::post_package_service_json_handler, this));
    Routes::Post(router, base + "/crx/packmgr/update.jsp", Routes::bind(&CrxApi::post_package_update_handler, this));
    Routes::Post(router, base + "/crx/explorer/ui/setpassword.jsp", Routes::bind(&CrxApi::post_set_password_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&CrxApi::crx_api_default_handler, this));
}

void CrxApi::get_crxde_status_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_crxde_status(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CrxApi::get_install_status_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_install_status(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CrxApi::get_package_manager_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_package_manager_servlet(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CrxApi::post_package_service_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto cmd = request.query().get("cmd");
    
    try {
      this->post_package_service(cmd, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CrxApi::post_package_service_json_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {
      this->post_package_service_json(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CrxApi::post_package_update_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto groupName = request.query().get("groupName");
    auto packageName = request.query().get("packageName");
    auto version = request.query().get("version");
    auto path = request.query().get("path");
    auto filter = request.query().get("filter");
    auto charset = request.query().get("_charset_");
    
    try {
      this->post_package_update(groupName, packageName, version, path, filter, charset, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CrxApi::post_set_password_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto old = request.query().get("old");
    auto plain = request.query().get("plain");
    auto verify = request.query().get("verify");
    
    try {
      this->post_set_password(old, plain, verify, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void CrxApi::crx_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

