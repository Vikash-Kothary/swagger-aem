/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "CustomApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

CustomApi::CustomApi(Pistache::Address addr)
    : httpEndpoint(addr)
{ };

void CustomApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::InstallSignalHandler);
    httpEndpoint.init(opts);
    setupRoutes();
}

void CustomApi::start() {
    httpEndpoint.setHandler(router.handler());
    httpEndpoint.serve();
}

void CustomApi::shutdown() {
    httpEndpoint.shutdown();
}

void CustomApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(router, base + "/system/health", Routes::bind(&CustomApi::get_aem_health_check_handler, this));
    Routes::Post(router, base + "/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck", Routes::bind(&CustomApi::post_config_aem_health_check_servlet_handler, this));
    Routes::Post(router, base + "/apps/system/config/com.shinesolutions.aem.passwordreset.Activator", Routes::bind(&CustomApi::post_config_aem_password_reset_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&CustomApi::custom_api_default_handler, this));
}

void CustomApi::get_aem_health_check_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto tags = request.query().get("tags");
    auto combineTagsOr = request.query().get("combineTagsOr");
    
    try {
      this->get_aem_health_check(tags, combineTagsOr, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CustomApi::post_config_aem_health_check_servlet_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto bundlesPeriodignored = request.query().get("bundles.ignored");
    auto bundlesPeriodignoredAtTypeHint = request.query().get("bundles.ignored@TypeHint");
    
    try {
      this->post_config_aem_health_check_servlet(bundlesPeriodignored, bundlesPeriodignoredAtTypeHint, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void CustomApi::post_config_aem_password_reset_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto pwdresetPeriodauthorizables = request.query().get("pwdreset.authorizables");
    auto pwdresetPeriodauthorizablesAtTypeHint = request.query().get("pwdreset.authorizables@TypeHint");
    
    try {
      this->post_config_aem_password_reset(pwdresetPeriodauthorizables, pwdresetPeriodauthorizablesAtTypeHint, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void CustomApi::custom_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

