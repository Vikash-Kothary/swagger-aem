/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ConsoleApi.h
 *
 * 
 */

#ifndef ConsoleApi_H_
#define ConsoleApi_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <pistache/optional.h>

#include "SamlConfigurationInfo.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  ConsoleApi {
public:
    ConsoleApi(Pistache::Address addr);
    virtual ~ConsoleApi() {};
    void init(size_t thr);
    void start();
    void shutdown();

    const std::string base = "/";

private:
    void setupRoutes();

    void get_aem_product_info_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_config_mgr_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_bundle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_jmx_repository_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_saml_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void console_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    Pistache::Http::Endpoint httpEndpoint;
    Pistache::Rest::Router router;


    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void get_aem_product_info(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void get_config_mgr(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name"></param>
    /// <param name="action"></param>
    virtual void post_bundle(const std::string &name, const Pistache::Optional<std::string> &action, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="action"></param>
    virtual void post_jmx_repository(const std::string &action, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="post"> (optional)</param>
    /// <param name="apply"> (optional)</param>
    /// <param name="delete"> (optional)</param>
    /// <param name="action"> (optional)</param>
    /// <param name="Dollarlocation"> (optional)</param>
    /// <param name="path"> (optional)</param>
    /// <param name="servicePeriodranking"> (optional)</param>
    /// <param name="idpUrl"> (optional)</param>
    /// <param name="idpCertAlias"> (optional)</param>
    /// <param name="idpHttpRedirect"> (optional)</param>
    /// <param name="serviceProviderEntityId"> (optional)</param>
    /// <param name="assertionConsumerServiceURL"> (optional)</param>
    /// <param name="spPrivateKeyAlias"> (optional)</param>
    /// <param name="keyStorePassword"> (optional)</param>
    /// <param name="defaultRedirectUrl"> (optional)</param>
    /// <param name="userIDAttribute"> (optional)</param>
    /// <param name="useEncryption"> (optional)</param>
    /// <param name="createUser"> (optional)</param>
    /// <param name="addGroupMemberships"> (optional)</param>
    /// <param name="groupMembershipAttribute"> (optional)</param>
    /// <param name="defaultGroups"> (optional)</param>
    /// <param name="nameIdFormat"> (optional)</param>
    /// <param name="synchronizeAttributes"> (optional)</param>
    /// <param name="handleLogout"> (optional)</param>
    /// <param name="logoutUrl"> (optional)</param>
    /// <param name="clockTolerance"> (optional)</param>
    /// <param name="digestMethod"> (optional)</param>
    /// <param name="signatureMethod"> (optional)</param>
    /// <param name="userIntermediatePath"> (optional)</param>
    /// <param name="propertylist"> (optional)</param>
    virtual void post_saml_configuration(const Pistache::Optional<bool> &post, const Pistache::Optional<bool> &apply, const Pistache::Optional<bool> &delete, const Pistache::Optional<std::string> &action, const Pistache::Optional<std::string> &Dollarlocation, const Pistache::Optional<std::string> &path, const Pistache::Optional<int32_t> &servicePeriodranking, const Pistache::Optional<std::string> &idpUrl, const Pistache::Optional<std::string> &idpCertAlias, const Pistache::Optional<bool> &idpHttpRedirect, const Pistache::Optional<std::string> &serviceProviderEntityId, const Pistache::Optional<std::string> &assertionConsumerServiceURL, const Pistache::Optional<std::string> &spPrivateKeyAlias, const Pistache::Optional<std::string> &keyStorePassword, const Pistache::Optional<std::string> &defaultRedirectUrl, const Pistache::Optional<std::string> &userIDAttribute, const Pistache::Optional<bool> &useEncryption, const Pistache::Optional<bool> &createUser, const Pistache::Optional<bool> &addGroupMemberships, const Pistache::Optional<std::string> &groupMembershipAttribute, const Pistache::Optional<std::string> &defaultGroups, const Pistache::Optional<std::string> &nameIdFormat, const Pistache::Optional<std::string> &synchronizeAttributes, const Pistache::Optional<bool> &handleLogout, const Pistache::Optional<std::string> &logoutUrl, const Pistache::Optional<int32_t> &clockTolerance, const Pistache::Optional<std::string> &digestMethod, const Pistache::Optional<std::string> &signatureMethod, const Pistache::Optional<std::string> &userIntermediatePath, const Pistache::Optional<std::string> &propertylist, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* ConsoleApi_H_ */

