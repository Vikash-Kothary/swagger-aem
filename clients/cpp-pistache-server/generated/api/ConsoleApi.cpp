/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ConsoleApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ConsoleApi::ConsoleApi(Pistache::Address addr)
    : httpEndpoint(addr)
{ };

void ConsoleApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::InstallSignalHandler);
    httpEndpoint.init(opts);
    setupRoutes();
}

void ConsoleApi::start() {
    httpEndpoint.setHandler(router.handler());
    httpEndpoint.serve();
}

void ConsoleApi::shutdown() {
    httpEndpoint.shutdown();
}

void ConsoleApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(router, base + "/system/console/status-productinfo.json", Routes::bind(&ConsoleApi::get_aem_product_info_handler, this));
    Routes::Get(router, base + "/system/console/configMgr", Routes::bind(&ConsoleApi::get_config_mgr_handler, this));
    Routes::Post(router, base + "/system/console/bundles/:name", Routes::bind(&ConsoleApi::post_bundle_handler, this));
    Routes::Post(router, base + "/system/console/jmx/com.adobe.granite:type=Repository/op/:action", Routes::bind(&ConsoleApi::post_jmx_repository_handler, this));
    Routes::Post(router, base + "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler", Routes::bind(&ConsoleApi::post_saml_configuration_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&ConsoleApi::console_api_default_handler, this));
}

void ConsoleApi::get_aem_product_info_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_aem_product_info(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConsoleApi::get_config_mgr_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_config_mgr(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConsoleApi::post_bundle_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the query params
    auto action = request.query().get("action");
    
    try {
      this->post_bundle(name, action, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConsoleApi::post_jmx_repository_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto action = request.param(":action").as<std::string>();
    
    try {
      this->post_jmx_repository(action, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void ConsoleApi::post_saml_configuration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto post = request.query().get("post");
    auto apply = request.query().get("apply");
    auto delete = request.query().get("delete");
    auto action = request.query().get("action");
    auto Dollarlocation = request.query().get("$location");
    auto path = request.query().get("path");
    auto servicePeriodranking = request.query().get("service.ranking");
    auto idpUrl = request.query().get("idpUrl");
    auto idpCertAlias = request.query().get("idpCertAlias");
    auto idpHttpRedirect = request.query().get("idpHttpRedirect");
    auto serviceProviderEntityId = request.query().get("serviceProviderEntityId");
    auto assertionConsumerServiceURL = request.query().get("assertionConsumerServiceURL");
    auto spPrivateKeyAlias = request.query().get("spPrivateKeyAlias");
    auto keyStorePassword = request.query().get("keyStorePassword");
    auto defaultRedirectUrl = request.query().get("defaultRedirectUrl");
    auto userIDAttribute = request.query().get("userIDAttribute");
    auto useEncryption = request.query().get("useEncryption");
    auto createUser = request.query().get("createUser");
    auto addGroupMemberships = request.query().get("addGroupMemberships");
    auto groupMembershipAttribute = request.query().get("groupMembershipAttribute");
    auto defaultGroups = request.query().get("defaultGroups");
    auto nameIdFormat = request.query().get("nameIdFormat");
    auto synchronizeAttributes = request.query().get("synchronizeAttributes");
    auto handleLogout = request.query().get("handleLogout");
    auto logoutUrl = request.query().get("logoutUrl");
    auto clockTolerance = request.query().get("clockTolerance");
    auto digestMethod = request.query().get("digestMethod");
    auto signatureMethod = request.query().get("signatureMethod");
    auto userIntermediatePath = request.query().get("userIntermediatePath");
    auto propertylist = request.query().get("propertylist");
    
    try {
      this->post_saml_configuration(post, apply, delete, action, Dollarlocation, path, servicePeriodranking, idpUrl, idpCertAlias, idpHttpRedirect, serviceProviderEntityId, assertionConsumerServiceURL, spPrivateKeyAlias, keyStorePassword, defaultRedirectUrl, userIDAttribute, useEncryption, createUser, addGroupMemberships, groupMembershipAttribute, defaultGroups, nameIdFormat, synchronizeAttributes, handleLogout, logoutUrl, clockTolerance, digestMethod, signatureMethod, userIntermediatePath, propertylist, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void ConsoleApi::console_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

