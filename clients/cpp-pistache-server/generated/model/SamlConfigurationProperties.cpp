/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SamlConfigurationProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SamlConfigurationProperties::SamlConfigurationProperties()
{
    m_PathIsSet = false;
    m_Service_rankingIsSet = false;
    m_IdpUrlIsSet = false;
    m_IdpCertAliasIsSet = false;
    m_IdpHttpRedirectIsSet = false;
    m_ServiceProviderEntityIdIsSet = false;
    m_AssertionConsumerServiceURLIsSet = false;
    m_SpPrivateKeyAliasIsSet = false;
    m_KeyStorePasswordIsSet = false;
    m_DefaultRedirectUrlIsSet = false;
    m_UserIDAttributeIsSet = false;
    m_UseEncryptionIsSet = false;
    m_CreateUserIsSet = false;
    m_AddGroupMembershipsIsSet = false;
    m_GroupMembershipAttributeIsSet = false;
    m_DefaultGroupsIsSet = false;
    m_NameIdFormatIsSet = false;
    m_SynchronizeAttributesIsSet = false;
    m_HandleLogoutIsSet = false;
    m_LogoutUrlIsSet = false;
    m_ClockToleranceIsSet = false;
    m_DigestMethodIsSet = false;
    m_SignatureMethodIsSet = false;
    m_UserIntermediatePathIsSet = false;
    
}

SamlConfigurationProperties::~SamlConfigurationProperties()
{
}

void SamlConfigurationProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json SamlConfigurationProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_IdpUrlIsSet)
    {
        val["idpUrl"] = ModelBase::toJson(m_IdpUrl);
    }
    if(m_IdpCertAliasIsSet)
    {
        val["idpCertAlias"] = ModelBase::toJson(m_IdpCertAlias);
    }
    if(m_IdpHttpRedirectIsSet)
    {
        val["idpHttpRedirect"] = ModelBase::toJson(m_IdpHttpRedirect);
    }
    if(m_ServiceProviderEntityIdIsSet)
    {
        val["serviceProviderEntityId"] = ModelBase::toJson(m_ServiceProviderEntityId);
    }
    if(m_AssertionConsumerServiceURLIsSet)
    {
        val["assertionConsumerServiceURL"] = ModelBase::toJson(m_AssertionConsumerServiceURL);
    }
    if(m_SpPrivateKeyAliasIsSet)
    {
        val["spPrivateKeyAlias"] = ModelBase::toJson(m_SpPrivateKeyAlias);
    }
    if(m_KeyStorePasswordIsSet)
    {
        val["keyStorePassword"] = ModelBase::toJson(m_KeyStorePassword);
    }
    if(m_DefaultRedirectUrlIsSet)
    {
        val["defaultRedirectUrl"] = ModelBase::toJson(m_DefaultRedirectUrl);
    }
    if(m_UserIDAttributeIsSet)
    {
        val["userIDAttribute"] = ModelBase::toJson(m_UserIDAttribute);
    }
    if(m_UseEncryptionIsSet)
    {
        val["useEncryption"] = ModelBase::toJson(m_UseEncryption);
    }
    if(m_CreateUserIsSet)
    {
        val["createUser"] = ModelBase::toJson(m_CreateUser);
    }
    if(m_AddGroupMembershipsIsSet)
    {
        val["addGroupMemberships"] = ModelBase::toJson(m_AddGroupMemberships);
    }
    if(m_GroupMembershipAttributeIsSet)
    {
        val["groupMembershipAttribute"] = ModelBase::toJson(m_GroupMembershipAttribute);
    }
    if(m_DefaultGroupsIsSet)
    {
        val["defaultGroups"] = ModelBase::toJson(m_DefaultGroups);
    }
    if(m_NameIdFormatIsSet)
    {
        val["nameIdFormat"] = ModelBase::toJson(m_NameIdFormat);
    }
    if(m_SynchronizeAttributesIsSet)
    {
        val["synchronizeAttributes"] = ModelBase::toJson(m_SynchronizeAttributes);
    }
    if(m_HandleLogoutIsSet)
    {
        val["handleLogout"] = ModelBase::toJson(m_HandleLogout);
    }
    if(m_LogoutUrlIsSet)
    {
        val["logoutUrl"] = ModelBase::toJson(m_LogoutUrl);
    }
    if(m_ClockToleranceIsSet)
    {
        val["clockTolerance"] = ModelBase::toJson(m_ClockTolerance);
    }
    if(m_DigestMethodIsSet)
    {
        val["digestMethod"] = ModelBase::toJson(m_DigestMethod);
    }
    if(m_SignatureMethodIsSet)
    {
        val["signatureMethod"] = ModelBase::toJson(m_SignatureMethod);
    }
    if(m_UserIntermediatePathIsSet)
    {
        val["userIntermediatePath"] = ModelBase::toJson(m_UserIntermediatePath);
    }
    

    return val;
}

void SamlConfigurationProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            SamlConfigurationPropertyItemsArray newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            SamlConfigurationPropertyItemsLong newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    if(val.find("idpUrl") != val.end())
    {
        if(!val["idpUrl"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["idpUrl"]);
            setIdpUrl( newItem );
        }
        
    }
    if(val.find("idpCertAlias") != val.end())
    {
        if(!val["idpCertAlias"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["idpCertAlias"]);
            setIdpCertAlias( newItem );
        }
        
    }
    if(val.find("idpHttpRedirect") != val.end())
    {
        if(!val["idpHttpRedirect"].is_null())
        {
            SamlConfigurationPropertyItemsBoolean newItem;
            newItem.fromJson(val["idpHttpRedirect"]);
            setIdpHttpRedirect( newItem );
        }
        
    }
    if(val.find("serviceProviderEntityId") != val.end())
    {
        if(!val["serviceProviderEntityId"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["serviceProviderEntityId"]);
            setServiceProviderEntityId( newItem );
        }
        
    }
    if(val.find("assertionConsumerServiceURL") != val.end())
    {
        if(!val["assertionConsumerServiceURL"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["assertionConsumerServiceURL"]);
            setAssertionConsumerServiceURL( newItem );
        }
        
    }
    if(val.find("spPrivateKeyAlias") != val.end())
    {
        if(!val["spPrivateKeyAlias"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["spPrivateKeyAlias"]);
            setSpPrivateKeyAlias( newItem );
        }
        
    }
    if(val.find("keyStorePassword") != val.end())
    {
        if(!val["keyStorePassword"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["keyStorePassword"]);
            setKeyStorePassword( newItem );
        }
        
    }
    if(val.find("defaultRedirectUrl") != val.end())
    {
        if(!val["defaultRedirectUrl"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["defaultRedirectUrl"]);
            setDefaultRedirectUrl( newItem );
        }
        
    }
    if(val.find("userIDAttribute") != val.end())
    {
        if(!val["userIDAttribute"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["userIDAttribute"]);
            setUserIDAttribute( newItem );
        }
        
    }
    if(val.find("useEncryption") != val.end())
    {
        if(!val["useEncryption"].is_null())
        {
            SamlConfigurationPropertyItemsBoolean newItem;
            newItem.fromJson(val["useEncryption"]);
            setUseEncryption( newItem );
        }
        
    }
    if(val.find("createUser") != val.end())
    {
        if(!val["createUser"].is_null())
        {
            SamlConfigurationPropertyItemsBoolean newItem;
            newItem.fromJson(val["createUser"]);
            setCreateUser( newItem );
        }
        
    }
    if(val.find("addGroupMemberships") != val.end())
    {
        if(!val["addGroupMemberships"].is_null())
        {
            SamlConfigurationPropertyItemsBoolean newItem;
            newItem.fromJson(val["addGroupMemberships"]);
            setAddGroupMemberships( newItem );
        }
        
    }
    if(val.find("groupMembershipAttribute") != val.end())
    {
        if(!val["groupMembershipAttribute"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["groupMembershipAttribute"]);
            setGroupMembershipAttribute( newItem );
        }
        
    }
    if(val.find("defaultGroups") != val.end())
    {
        if(!val["defaultGroups"].is_null())
        {
            SamlConfigurationPropertyItemsArray newItem;
            newItem.fromJson(val["defaultGroups"]);
            setDefaultGroups( newItem );
        }
        
    }
    if(val.find("nameIdFormat") != val.end())
    {
        if(!val["nameIdFormat"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["nameIdFormat"]);
            setNameIdFormat( newItem );
        }
        
    }
    if(val.find("synchronizeAttributes") != val.end())
    {
        if(!val["synchronizeAttributes"].is_null())
        {
            SamlConfigurationPropertyItemsArray newItem;
            newItem.fromJson(val["synchronizeAttributes"]);
            setSynchronizeAttributes( newItem );
        }
        
    }
    if(val.find("handleLogout") != val.end())
    {
        if(!val["handleLogout"].is_null())
        {
            SamlConfigurationPropertyItemsBoolean newItem;
            newItem.fromJson(val["handleLogout"]);
            setHandleLogout( newItem );
        }
        
    }
    if(val.find("logoutUrl") != val.end())
    {
        if(!val["logoutUrl"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["logoutUrl"]);
            setLogoutUrl( newItem );
        }
        
    }
    if(val.find("clockTolerance") != val.end())
    {
        if(!val["clockTolerance"].is_null())
        {
            SamlConfigurationPropertyItemsLong newItem;
            newItem.fromJson(val["clockTolerance"]);
            setClockTolerance( newItem );
        }
        
    }
    if(val.find("digestMethod") != val.end())
    {
        if(!val["digestMethod"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["digestMethod"]);
            setDigestMethod( newItem );
        }
        
    }
    if(val.find("signatureMethod") != val.end())
    {
        if(!val["signatureMethod"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["signatureMethod"]);
            setSignatureMethod( newItem );
        }
        
    }
    if(val.find("userIntermediatePath") != val.end())
    {
        if(!val["userIntermediatePath"].is_null())
        {
            SamlConfigurationPropertyItemsString newItem;
            newItem.fromJson(val["userIntermediatePath"]);
            setUserIntermediatePath( newItem );
        }
        
    }
    
}


SamlConfigurationPropertyItemsArray SamlConfigurationProperties::getPath() const
{
    return m_Path;
}
void SamlConfigurationProperties::setPath(SamlConfigurationPropertyItemsArray const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool SamlConfigurationProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void SamlConfigurationProperties::unsetPath()
{
    m_PathIsSet = false;
}
SamlConfigurationPropertyItemsLong SamlConfigurationProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void SamlConfigurationProperties::setServiceRanking(SamlConfigurationPropertyItemsLong const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool SamlConfigurationProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void SamlConfigurationProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getIdpUrl() const
{
    return m_IdpUrl;
}
void SamlConfigurationProperties::setIdpUrl(SamlConfigurationPropertyItemsString const& value)
{
    m_IdpUrl = value;
    m_IdpUrlIsSet = true;
}
bool SamlConfigurationProperties::idpUrlIsSet() const
{
    return m_IdpUrlIsSet;
}
void SamlConfigurationProperties::unsetIdpUrl()
{
    m_IdpUrlIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getIdpCertAlias() const
{
    return m_IdpCertAlias;
}
void SamlConfigurationProperties::setIdpCertAlias(SamlConfigurationPropertyItemsString const& value)
{
    m_IdpCertAlias = value;
    m_IdpCertAliasIsSet = true;
}
bool SamlConfigurationProperties::idpCertAliasIsSet() const
{
    return m_IdpCertAliasIsSet;
}
void SamlConfigurationProperties::unsetIdpCertAlias()
{
    m_IdpCertAliasIsSet = false;
}
SamlConfigurationPropertyItemsBoolean SamlConfigurationProperties::getIdpHttpRedirect() const
{
    return m_IdpHttpRedirect;
}
void SamlConfigurationProperties::setIdpHttpRedirect(SamlConfigurationPropertyItemsBoolean const& value)
{
    m_IdpHttpRedirect = value;
    m_IdpHttpRedirectIsSet = true;
}
bool SamlConfigurationProperties::idpHttpRedirectIsSet() const
{
    return m_IdpHttpRedirectIsSet;
}
void SamlConfigurationProperties::unsetIdpHttpRedirect()
{
    m_IdpHttpRedirectIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getServiceProviderEntityId() const
{
    return m_ServiceProviderEntityId;
}
void SamlConfigurationProperties::setServiceProviderEntityId(SamlConfigurationPropertyItemsString const& value)
{
    m_ServiceProviderEntityId = value;
    m_ServiceProviderEntityIdIsSet = true;
}
bool SamlConfigurationProperties::serviceProviderEntityIdIsSet() const
{
    return m_ServiceProviderEntityIdIsSet;
}
void SamlConfigurationProperties::unsetServiceProviderEntityId()
{
    m_ServiceProviderEntityIdIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getAssertionConsumerServiceURL() const
{
    return m_AssertionConsumerServiceURL;
}
void SamlConfigurationProperties::setAssertionConsumerServiceURL(SamlConfigurationPropertyItemsString const& value)
{
    m_AssertionConsumerServiceURL = value;
    m_AssertionConsumerServiceURLIsSet = true;
}
bool SamlConfigurationProperties::assertionConsumerServiceURLIsSet() const
{
    return m_AssertionConsumerServiceURLIsSet;
}
void SamlConfigurationProperties::unsetAssertionConsumerServiceURL()
{
    m_AssertionConsumerServiceURLIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getSpPrivateKeyAlias() const
{
    return m_SpPrivateKeyAlias;
}
void SamlConfigurationProperties::setSpPrivateKeyAlias(SamlConfigurationPropertyItemsString const& value)
{
    m_SpPrivateKeyAlias = value;
    m_SpPrivateKeyAliasIsSet = true;
}
bool SamlConfigurationProperties::spPrivateKeyAliasIsSet() const
{
    return m_SpPrivateKeyAliasIsSet;
}
void SamlConfigurationProperties::unsetSpPrivateKeyAlias()
{
    m_SpPrivateKeyAliasIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getKeyStorePassword() const
{
    return m_KeyStorePassword;
}
void SamlConfigurationProperties::setKeyStorePassword(SamlConfigurationPropertyItemsString const& value)
{
    m_KeyStorePassword = value;
    m_KeyStorePasswordIsSet = true;
}
bool SamlConfigurationProperties::keyStorePasswordIsSet() const
{
    return m_KeyStorePasswordIsSet;
}
void SamlConfigurationProperties::unsetKeyStorePassword()
{
    m_KeyStorePasswordIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getDefaultRedirectUrl() const
{
    return m_DefaultRedirectUrl;
}
void SamlConfigurationProperties::setDefaultRedirectUrl(SamlConfigurationPropertyItemsString const& value)
{
    m_DefaultRedirectUrl = value;
    m_DefaultRedirectUrlIsSet = true;
}
bool SamlConfigurationProperties::defaultRedirectUrlIsSet() const
{
    return m_DefaultRedirectUrlIsSet;
}
void SamlConfigurationProperties::unsetDefaultRedirectUrl()
{
    m_DefaultRedirectUrlIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getUserIDAttribute() const
{
    return m_UserIDAttribute;
}
void SamlConfigurationProperties::setUserIDAttribute(SamlConfigurationPropertyItemsString const& value)
{
    m_UserIDAttribute = value;
    m_UserIDAttributeIsSet = true;
}
bool SamlConfigurationProperties::userIDAttributeIsSet() const
{
    return m_UserIDAttributeIsSet;
}
void SamlConfigurationProperties::unsetUserIDAttribute()
{
    m_UserIDAttributeIsSet = false;
}
SamlConfigurationPropertyItemsBoolean SamlConfigurationProperties::getUseEncryption() const
{
    return m_UseEncryption;
}
void SamlConfigurationProperties::setUseEncryption(SamlConfigurationPropertyItemsBoolean const& value)
{
    m_UseEncryption = value;
    m_UseEncryptionIsSet = true;
}
bool SamlConfigurationProperties::useEncryptionIsSet() const
{
    return m_UseEncryptionIsSet;
}
void SamlConfigurationProperties::unsetUseEncryption()
{
    m_UseEncryptionIsSet = false;
}
SamlConfigurationPropertyItemsBoolean SamlConfigurationProperties::getCreateUser() const
{
    return m_CreateUser;
}
void SamlConfigurationProperties::setCreateUser(SamlConfigurationPropertyItemsBoolean const& value)
{
    m_CreateUser = value;
    m_CreateUserIsSet = true;
}
bool SamlConfigurationProperties::createUserIsSet() const
{
    return m_CreateUserIsSet;
}
void SamlConfigurationProperties::unsetCreateUser()
{
    m_CreateUserIsSet = false;
}
SamlConfigurationPropertyItemsBoolean SamlConfigurationProperties::getAddGroupMemberships() const
{
    return m_AddGroupMemberships;
}
void SamlConfigurationProperties::setAddGroupMemberships(SamlConfigurationPropertyItemsBoolean const& value)
{
    m_AddGroupMemberships = value;
    m_AddGroupMembershipsIsSet = true;
}
bool SamlConfigurationProperties::addGroupMembershipsIsSet() const
{
    return m_AddGroupMembershipsIsSet;
}
void SamlConfigurationProperties::unsetAddGroupMemberships()
{
    m_AddGroupMembershipsIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getGroupMembershipAttribute() const
{
    return m_GroupMembershipAttribute;
}
void SamlConfigurationProperties::setGroupMembershipAttribute(SamlConfigurationPropertyItemsString const& value)
{
    m_GroupMembershipAttribute = value;
    m_GroupMembershipAttributeIsSet = true;
}
bool SamlConfigurationProperties::groupMembershipAttributeIsSet() const
{
    return m_GroupMembershipAttributeIsSet;
}
void SamlConfigurationProperties::unsetGroupMembershipAttribute()
{
    m_GroupMembershipAttributeIsSet = false;
}
SamlConfigurationPropertyItemsArray SamlConfigurationProperties::getDefaultGroups() const
{
    return m_DefaultGroups;
}
void SamlConfigurationProperties::setDefaultGroups(SamlConfigurationPropertyItemsArray const& value)
{
    m_DefaultGroups = value;
    m_DefaultGroupsIsSet = true;
}
bool SamlConfigurationProperties::defaultGroupsIsSet() const
{
    return m_DefaultGroupsIsSet;
}
void SamlConfigurationProperties::unsetDefaultGroups()
{
    m_DefaultGroupsIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getNameIdFormat() const
{
    return m_NameIdFormat;
}
void SamlConfigurationProperties::setNameIdFormat(SamlConfigurationPropertyItemsString const& value)
{
    m_NameIdFormat = value;
    m_NameIdFormatIsSet = true;
}
bool SamlConfigurationProperties::nameIdFormatIsSet() const
{
    return m_NameIdFormatIsSet;
}
void SamlConfigurationProperties::unsetNameIdFormat()
{
    m_NameIdFormatIsSet = false;
}
SamlConfigurationPropertyItemsArray SamlConfigurationProperties::getSynchronizeAttributes() const
{
    return m_SynchronizeAttributes;
}
void SamlConfigurationProperties::setSynchronizeAttributes(SamlConfigurationPropertyItemsArray const& value)
{
    m_SynchronizeAttributes = value;
    m_SynchronizeAttributesIsSet = true;
}
bool SamlConfigurationProperties::synchronizeAttributesIsSet() const
{
    return m_SynchronizeAttributesIsSet;
}
void SamlConfigurationProperties::unsetSynchronizeAttributes()
{
    m_SynchronizeAttributesIsSet = false;
}
SamlConfigurationPropertyItemsBoolean SamlConfigurationProperties::getHandleLogout() const
{
    return m_HandleLogout;
}
void SamlConfigurationProperties::setHandleLogout(SamlConfigurationPropertyItemsBoolean const& value)
{
    m_HandleLogout = value;
    m_HandleLogoutIsSet = true;
}
bool SamlConfigurationProperties::handleLogoutIsSet() const
{
    return m_HandleLogoutIsSet;
}
void SamlConfigurationProperties::unsetHandleLogout()
{
    m_HandleLogoutIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getLogoutUrl() const
{
    return m_LogoutUrl;
}
void SamlConfigurationProperties::setLogoutUrl(SamlConfigurationPropertyItemsString const& value)
{
    m_LogoutUrl = value;
    m_LogoutUrlIsSet = true;
}
bool SamlConfigurationProperties::logoutUrlIsSet() const
{
    return m_LogoutUrlIsSet;
}
void SamlConfigurationProperties::unsetLogoutUrl()
{
    m_LogoutUrlIsSet = false;
}
SamlConfigurationPropertyItemsLong SamlConfigurationProperties::getClockTolerance() const
{
    return m_ClockTolerance;
}
void SamlConfigurationProperties::setClockTolerance(SamlConfigurationPropertyItemsLong const& value)
{
    m_ClockTolerance = value;
    m_ClockToleranceIsSet = true;
}
bool SamlConfigurationProperties::clockToleranceIsSet() const
{
    return m_ClockToleranceIsSet;
}
void SamlConfigurationProperties::unsetClockTolerance()
{
    m_ClockToleranceIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getDigestMethod() const
{
    return m_DigestMethod;
}
void SamlConfigurationProperties::setDigestMethod(SamlConfigurationPropertyItemsString const& value)
{
    m_DigestMethod = value;
    m_DigestMethodIsSet = true;
}
bool SamlConfigurationProperties::digestMethodIsSet() const
{
    return m_DigestMethodIsSet;
}
void SamlConfigurationProperties::unsetDigestMethod()
{
    m_DigestMethodIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getSignatureMethod() const
{
    return m_SignatureMethod;
}
void SamlConfigurationProperties::setSignatureMethod(SamlConfigurationPropertyItemsString const& value)
{
    m_SignatureMethod = value;
    m_SignatureMethodIsSet = true;
}
bool SamlConfigurationProperties::signatureMethodIsSet() const
{
    return m_SignatureMethodIsSet;
}
void SamlConfigurationProperties::unsetSignatureMethod()
{
    m_SignatureMethodIsSet = false;
}
SamlConfigurationPropertyItemsString SamlConfigurationProperties::getUserIntermediatePath() const
{
    return m_UserIntermediatePath;
}
void SamlConfigurationProperties::setUserIntermediatePath(SamlConfigurationPropertyItemsString const& value)
{
    m_UserIntermediatePath = value;
    m_UserIntermediatePathIsSet = true;
}
bool SamlConfigurationProperties::userIntermediatePathIsSet() const
{
    return m_UserIntermediatePathIsSet;
}
void SamlConfigurationProperties::unsetUserIntermediatePath()
{
    m_UserIntermediatePathIsSet = false;
}

}
}
}
}

