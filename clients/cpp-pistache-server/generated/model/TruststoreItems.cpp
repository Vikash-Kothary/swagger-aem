/**
* Adobe Experience Manager (AEM) API
* Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
*
* OpenAPI spec version: 3.2.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "TruststoreItems.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

TruststoreItems::TruststoreItems()
{
    m_Alias = "";
    m_AliasIsSet = false;
    m_EntryType = "";
    m_EntryTypeIsSet = false;
    m_Subject = "";
    m_SubjectIsSet = false;
    m_Issuer = "";
    m_IssuerIsSet = false;
    m_NotBefore = "";
    m_NotBeforeIsSet = false;
    m_NotAfter = "";
    m_NotAfterIsSet = false;
    m_SerialNumber = 0;
    m_SerialNumberIsSet = false;
    
}

TruststoreItems::~TruststoreItems()
{
}

void TruststoreItems::validate()
{
    // TODO: implement validation
}

nlohmann::json TruststoreItems::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AliasIsSet)
    {
        val["alias"] = ModelBase::toJson(m_Alias);
    }
    if(m_EntryTypeIsSet)
    {
        val["entryType"] = ModelBase::toJson(m_EntryType);
    }
    if(m_SubjectIsSet)
    {
        val["subject"] = ModelBase::toJson(m_Subject);
    }
    if(m_IssuerIsSet)
    {
        val["issuer"] = ModelBase::toJson(m_Issuer);
    }
    if(m_NotBeforeIsSet)
    {
        val["notBefore"] = ModelBase::toJson(m_NotBefore);
    }
    if(m_NotAfterIsSet)
    {
        val["notAfter"] = ModelBase::toJson(m_NotAfter);
    }
    if(m_SerialNumberIsSet)
    {
        val["serialNumber"] = m_SerialNumber;
    }
    

    return val;
}

void TruststoreItems::fromJson(nlohmann::json& val)
{
    if(val.find("alias") != val.end())
    {
        setAlias(val.at("alias"));
    }
    if(val.find("entryType") != val.end())
    {
        setEntryType(val.at("entryType"));
    }
    if(val.find("subject") != val.end())
    {
        setSubject(val.at("subject"));
    }
    if(val.find("issuer") != val.end())
    {
        setIssuer(val.at("issuer"));
    }
    if(val.find("notBefore") != val.end())
    {
        setNotBefore(val.at("notBefore"));
    }
    if(val.find("notAfter") != val.end())
    {
        setNotAfter(val.at("notAfter"));
    }
    if(val.find("serialNumber") != val.end())
    {
        setSerialNumber(val.at("serialNumber"));
    }
    
}


std::string TruststoreItems::getAlias() const
{
    return m_Alias;
}
void TruststoreItems::setAlias(std::string const& value)
{
    m_Alias = value;
    m_AliasIsSet = true;
}
bool TruststoreItems::aliasIsSet() const
{
    return m_AliasIsSet;
}
void TruststoreItems::unsetAlias()
{
    m_AliasIsSet = false;
}
std::string TruststoreItems::getEntryType() const
{
    return m_EntryType;
}
void TruststoreItems::setEntryType(std::string const& value)
{
    m_EntryType = value;
    m_EntryTypeIsSet = true;
}
bool TruststoreItems::entryTypeIsSet() const
{
    return m_EntryTypeIsSet;
}
void TruststoreItems::unsetEntryType()
{
    m_EntryTypeIsSet = false;
}
std::string TruststoreItems::getSubject() const
{
    return m_Subject;
}
void TruststoreItems::setSubject(std::string const& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}
bool TruststoreItems::subjectIsSet() const
{
    return m_SubjectIsSet;
}
void TruststoreItems::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::string TruststoreItems::getIssuer() const
{
    return m_Issuer;
}
void TruststoreItems::setIssuer(std::string const& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}
bool TruststoreItems::issuerIsSet() const
{
    return m_IssuerIsSet;
}
void TruststoreItems::unsetIssuer()
{
    m_IssuerIsSet = false;
}
std::string TruststoreItems::getNotBefore() const
{
    return m_NotBefore;
}
void TruststoreItems::setNotBefore(std::string const& value)
{
    m_NotBefore = value;
    m_NotBeforeIsSet = true;
}
bool TruststoreItems::notBeforeIsSet() const
{
    return m_NotBeforeIsSet;
}
void TruststoreItems::unsetNotBefore()
{
    m_NotBeforeIsSet = false;
}
std::string TruststoreItems::getNotAfter() const
{
    return m_NotAfter;
}
void TruststoreItems::setNotAfter(std::string const& value)
{
    m_NotAfter = value;
    m_NotAfterIsSet = true;
}
bool TruststoreItems::notAfterIsSet() const
{
    return m_NotAfterIsSet;
}
void TruststoreItems::unsetNotAfter()
{
    m_NotAfterIsSet = false;
}
int32_t TruststoreItems::getSerialNumber() const
{
    return m_SerialNumber;
}
void TruststoreItems::setSerialNumber(int32_t const value)
{
    m_SerialNumber = value;
    m_SerialNumberIsSet = true;
}
bool TruststoreItems::serialNumberIsSet() const
{
    return m_SerialNumberIsSet;
}
void TruststoreItems::unsetSerialNumber()
{
    m_SerialNumberIsSet = false;
}

}
}
}
}

