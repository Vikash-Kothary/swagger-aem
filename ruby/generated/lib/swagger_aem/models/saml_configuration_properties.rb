=begin
#Adobe Experience Manager (AEM) API

#Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API

OpenAPI spec version: 2.3.0
Contact: opensource@shinesolutions.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module SwaggerAemClient

  class SamlConfigurationProperties
    # Repository path for which this authentication handler should be used by Sling. If this is empty, the authentication handler will be disabled.
    attr_accessor :path

    # OSGi Framework Service Ranking value to indicate the order in which to call this service. This is an int value where higher values designate higher precedence. Default value is 0.
    attr_accessor :service_ranking

    # URL of the IDP where the SAML Authentication Request should be sent to. If this property is empty the authentication handler is disabled. (idpUrl)
    attr_accessor :idp_url

    # The alias of the IdP's certificate in the global truststore. If this property is empty the authentication handler is disabled.
    attr_accessor :idp_cert_alias

    # Use an HTTP Redirect to the IDP URL instead of sending an AuthnRequest-message to request credentials. Use this for IDP initiated authentication.
    attr_accessor :idp_http_redirect

    # ID which uniquely identifies this service provider with the identity provider. If this property is empty the authentication handler is disabled.
    attr_accessor :service_provider_entity_id

    # The (optional) AssertionConsumerServiceURL attribute of an Authn request specifies the location to which a <Response> message MUST be sent to the requester.
    attr_accessor :assertion_consumer_service_url

    # The alias of the SP's private key in the key-store of the 'authentication-service' system user. If this property is empty the handler will not be able to sign or decrypt messages.
    attr_accessor :sp_private_key_alias

    # The password of the key-store of the 'authentication-service' system user.
    attr_accessor :key_store_password

    # The default location to redirect to after successful authentication.
    attr_accessor :default_redirect_url

    # The name of the attribute containing the user ID used to authenticate and create the user in the CRX repository. Leave empty to use the Subject:NameId.
    attr_accessor :user_id_attribute

    # Whether or not this authentication handler expects encrypted SAML assertions. If this is enabled the SP's private key must be provided in the key-store of the 'authentication-service' system user (see SP Private Key Alias above).
    attr_accessor :use_encryption

    # Whether or not to autocreate nonexisting users in the repository.
    attr_accessor :create_user

    # Whether or not a user should be automatically added to CRX groups after successful authentication.
    attr_accessor :add_group_memberships

    # The name of the attribute containing a list of CRX groups this user should be added to.
    attr_accessor :group_membership_attribute

    # A list of default CRX groups users are added to after successful authentication.
    attr_accessor :default_groups

    # The value of the NameIDPolicy format parameter to send in the AuthnRequest message.
    attr_accessor :name_id_format

    # A list of attribute mappings (in the format \\attributename=path/relative/to/user/node\\) which should be stored in the repository on user-synchronization.
    attr_accessor :synchronize_attributes

    # Whether or not logout (dropCredentials) requests will be processed by this handler.
    attr_accessor :handle_logout

    # URL of the IDP where the SAML Logout Request should be sent to. If this property is empty the authentication handler won't handle logouts.
    attr_accessor :logout_url

    # Time tolerance in seconds to compensate clock skew between IDP and SP when validating Assertions.
    attr_accessor :clock_tolerance

    # The digest algorithm to use when signing a SAML message.
    attr_accessor :digest_method

    # The signature algorithm to use when signing a SAML message.
    attr_accessor :signature_method

    # User intermediate path to store created users.
    attr_accessor :user_intermediate_path


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'path' => :'path',
        :'service_ranking' => :'service.ranking',
        :'idp_url' => :'idpUrl',
        :'idp_cert_alias' => :'idpCertAlias',
        :'idp_http_redirect' => :'idpHttpRedirect',
        :'service_provider_entity_id' => :'serviceProviderEntityId',
        :'assertion_consumer_service_url' => :'assertionConsumerServiceURL',
        :'sp_private_key_alias' => :'spPrivateKeyAlias',
        :'key_store_password' => :'keyStorePassword',
        :'default_redirect_url' => :'defaultRedirectUrl',
        :'user_id_attribute' => :'userIDAttribute',
        :'use_encryption' => :'useEncryption',
        :'create_user' => :'createUser',
        :'add_group_memberships' => :'addGroupMemberships',
        :'group_membership_attribute' => :'groupMembershipAttribute',
        :'default_groups' => :'defaultGroups',
        :'name_id_format' => :'nameIdFormat',
        :'synchronize_attributes' => :'synchronizeAttributes',
        :'handle_logout' => :'handleLogout',
        :'logout_url' => :'logoutUrl',
        :'clock_tolerance' => :'clockTolerance',
        :'digest_method' => :'digestMethod',
        :'signature_method' => :'signatureMethod',
        :'user_intermediate_path' => :'userIntermediatePath'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'path' => :'Array<SamlConfigurationPropertyItemsArray>',
        :'service_ranking' => :'Array<SamlConfigurationPropertyItemsLong>',
        :'idp_url' => :'Array<SamlConfigurationPropertyItemsString>',
        :'idp_cert_alias' => :'Array<SamlConfigurationPropertyItemsString>',
        :'idp_http_redirect' => :'Array<SamlConfigurationPropertyItemsBoolean>',
        :'service_provider_entity_id' => :'Array<SamlConfigurationPropertyItemsString>',
        :'assertion_consumer_service_url' => :'Array<SamlConfigurationPropertyItemsString>',
        :'sp_private_key_alias' => :'Array<SamlConfigurationPropertyItemsString>',
        :'key_store_password' => :'Array<SamlConfigurationPropertyItemsString>',
        :'default_redirect_url' => :'Array<SamlConfigurationPropertyItemsString>',
        :'user_id_attribute' => :'Array<SamlConfigurationPropertyItemsString>',
        :'use_encryption' => :'Array<SamlConfigurationPropertyItemsBoolean>',
        :'create_user' => :'Array<SamlConfigurationPropertyItemsBoolean>',
        :'add_group_memberships' => :'Array<SamlConfigurationPropertyItemsBoolean>',
        :'group_membership_attribute' => :'Array<SamlConfigurationPropertyItemsString>',
        :'default_groups' => :'Array<SamlConfigurationPropertyItemsArray>',
        :'name_id_format' => :'Array<SamlConfigurationPropertyItemsString>',
        :'synchronize_attributes' => :'Array<SamlConfigurationPropertyItemsArray>',
        :'handle_logout' => :'Array<SamlConfigurationPropertyItemsBoolean>',
        :'logout_url' => :'Array<SamlConfigurationPropertyItemsString>',
        :'clock_tolerance' => :'Array<SamlConfigurationPropertyItemsLong>',
        :'digest_method' => :'Array<SamlConfigurationPropertyItemsString>',
        :'signature_method' => :'Array<SamlConfigurationPropertyItemsString>',
        :'user_intermediate_path' => :'Array<SamlConfigurationPropertyItemsString>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'path')
        if (value = attributes[:'path']).is_a?(Array)
          self.path = value
        end
      end

      if attributes.has_key?(:'service.ranking')
        if (value = attributes[:'service.ranking']).is_a?(Array)
          self.service_ranking = value
        end
      end

      if attributes.has_key?(:'idpUrl')
        if (value = attributes[:'idpUrl']).is_a?(Array)
          self.idp_url = value
        end
      end

      if attributes.has_key?(:'idpCertAlias')
        if (value = attributes[:'idpCertAlias']).is_a?(Array)
          self.idp_cert_alias = value
        end
      end

      if attributes.has_key?(:'idpHttpRedirect')
        if (value = attributes[:'idpHttpRedirect']).is_a?(Array)
          self.idp_http_redirect = value
        end
      end

      if attributes.has_key?(:'serviceProviderEntityId')
        if (value = attributes[:'serviceProviderEntityId']).is_a?(Array)
          self.service_provider_entity_id = value
        end
      end

      if attributes.has_key?(:'assertionConsumerServiceURL')
        if (value = attributes[:'assertionConsumerServiceURL']).is_a?(Array)
          self.assertion_consumer_service_url = value
        end
      end

      if attributes.has_key?(:'spPrivateKeyAlias')
        if (value = attributes[:'spPrivateKeyAlias']).is_a?(Array)
          self.sp_private_key_alias = value
        end
      end

      if attributes.has_key?(:'keyStorePassword')
        if (value = attributes[:'keyStorePassword']).is_a?(Array)
          self.key_store_password = value
        end
      end

      if attributes.has_key?(:'defaultRedirectUrl')
        if (value = attributes[:'defaultRedirectUrl']).is_a?(Array)
          self.default_redirect_url = value
        end
      end

      if attributes.has_key?(:'userIDAttribute')
        if (value = attributes[:'userIDAttribute']).is_a?(Array)
          self.user_id_attribute = value
        end
      end

      if attributes.has_key?(:'useEncryption')
        if (value = attributes[:'useEncryption']).is_a?(Array)
          self.use_encryption = value
        end
      end

      if attributes.has_key?(:'createUser')
        if (value = attributes[:'createUser']).is_a?(Array)
          self.create_user = value
        end
      end

      if attributes.has_key?(:'addGroupMemberships')
        if (value = attributes[:'addGroupMemberships']).is_a?(Array)
          self.add_group_memberships = value
        end
      end

      if attributes.has_key?(:'groupMembershipAttribute')
        if (value = attributes[:'groupMembershipAttribute']).is_a?(Array)
          self.group_membership_attribute = value
        end
      end

      if attributes.has_key?(:'defaultGroups')
        if (value = attributes[:'defaultGroups']).is_a?(Array)
          self.default_groups = value
        end
      end

      if attributes.has_key?(:'nameIdFormat')
        if (value = attributes[:'nameIdFormat']).is_a?(Array)
          self.name_id_format = value
        end
      end

      if attributes.has_key?(:'synchronizeAttributes')
        if (value = attributes[:'synchronizeAttributes']).is_a?(Array)
          self.synchronize_attributes = value
        end
      end

      if attributes.has_key?(:'handleLogout')
        if (value = attributes[:'handleLogout']).is_a?(Array)
          self.handle_logout = value
        end
      end

      if attributes.has_key?(:'logoutUrl')
        if (value = attributes[:'logoutUrl']).is_a?(Array)
          self.logout_url = value
        end
      end

      if attributes.has_key?(:'clockTolerance')
        if (value = attributes[:'clockTolerance']).is_a?(Array)
          self.clock_tolerance = value
        end
      end

      if attributes.has_key?(:'digestMethod')
        if (value = attributes[:'digestMethod']).is_a?(Array)
          self.digest_method = value
        end
      end

      if attributes.has_key?(:'signatureMethod')
        if (value = attributes[:'signatureMethod']).is_a?(Array)
          self.signature_method = value
        end
      end

      if attributes.has_key?(:'userIntermediatePath')
        if (value = attributes[:'userIntermediatePath']).is_a?(Array)
          self.user_intermediate_path = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          path == o.path &&
          service_ranking == o.service_ranking &&
          idp_url == o.idp_url &&
          idp_cert_alias == o.idp_cert_alias &&
          idp_http_redirect == o.idp_http_redirect &&
          service_provider_entity_id == o.service_provider_entity_id &&
          assertion_consumer_service_url == o.assertion_consumer_service_url &&
          sp_private_key_alias == o.sp_private_key_alias &&
          key_store_password == o.key_store_password &&
          default_redirect_url == o.default_redirect_url &&
          user_id_attribute == o.user_id_attribute &&
          use_encryption == o.use_encryption &&
          create_user == o.create_user &&
          add_group_memberships == o.add_group_memberships &&
          group_membership_attribute == o.group_membership_attribute &&
          default_groups == o.default_groups &&
          name_id_format == o.name_id_format &&
          synchronize_attributes == o.synchronize_attributes &&
          handle_logout == o.handle_logout &&
          logout_url == o.logout_url &&
          clock_tolerance == o.clock_tolerance &&
          digest_method == o.digest_method &&
          signature_method == o.signature_method &&
          user_intermediate_path == o.user_intermediate_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [path, service_ranking, idp_url, idp_cert_alias, idp_http_redirect, service_provider_entity_id, assertion_consumer_service_url, sp_private_key_alias, key_store_password, default_redirect_url, user_id_attribute, use_encryption, create_user, add_group_memberships, group_membership_attribute, default_groups, name_id_format, synchronize_attributes, handle_logout, logout_url, clock_tolerance, digest_method, signature_method, user_intermediate_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerAemClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
